[{"C:\\apply-page-backend\\src\\main\\frontend\\src\\index.tsx":"1","C:\\apply-page-backend\\src\\main\\frontend\\src\\reportWebVitals.ts":"2","C:\\apply-page-backend\\src\\main\\frontend\\src\\App.tsx":"3","C:\\apply-page-backend\\src\\main\\frontend\\src\\app\\store.ts":"4","C:\\apply-page-backend\\src\\main\\frontend\\src\\hooks\\ScrollToTop.ts":"5","C:\\apply-page-backend\\src\\main\\frontend\\src\\features\\fetcherSlice.ts":"6","C:\\apply-page-backend\\src\\main\\frontend\\src\\api\\ChannelService.ts":"7","C:\\apply-page-backend\\src\\main\\frontend\\src\\styles\\GlobalFont.tsx":"8","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\Common.tsx":"9","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\Index.tsx":"10","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Frontend.tsx":"11","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\Index.tsx":"12","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Design.tsx":"13","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\partition\\Pass.tsx":"14","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Backend.tsx":"15","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\partition\\Temp.tsx":"16","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\partition\\Main.tsx":"17","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\partition\\Fail.tsx":"18","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\404\\Error.tsx":"19","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\emotion\\component.tsx":"20","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\404\\NotTime.tsx":"21","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\common\\Header.tsx":"22","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\class.ts":"23","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\time\\time.ts":"24","C:\\apply-page-backend\\src\\main\\frontend\\src\\hooks\\Confetti.tsx":"25","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\detail\\Detail.tsx":"26","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\emotion\\component.tsx":"27","C:\\apply-page-backend\\src\\main\\frontend\\src\\styles\\Keyframes.ts":"28","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\404\\NotWidth.tsx":"29","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\detail\\emotion\\component.tsx":"30"},{"size":701,"mtime":1680093035813,"results":"31","hashOfConfig":"32"},{"size":440,"mtime":1680093035816,"results":"33","hashOfConfig":"32"},{"size":2753,"mtime":1680093035744,"results":"34","hashOfConfig":"32"},{"size":314,"mtime":1680093035746,"results":"35","hashOfConfig":"32"},{"size":328,"mtime":1680093035776,"results":"36","hashOfConfig":"32"},{"size":4882,"mtime":1680093035771,"results":"37","hashOfConfig":"32"},{"size":4517,"mtime":1680093035745,"results":"38","hashOfConfig":"32"},{"size":1079,"mtime":1680093035818,"results":"39","hashOfConfig":"32"},{"size":15238,"mtime":1680093035751,"results":"40","hashOfConfig":"32"},{"size":39983,"mtime":1680093035752,"results":"41","hashOfConfig":"32"},{"size":14005,"mtime":1680093035768,"results":"42","hashOfConfig":"32"},{"size":2085,"mtime":1680093035753,"results":"43","hashOfConfig":"32"},{"size":13987,"mtime":1680093035768,"results":"44","hashOfConfig":"32"},{"size":17984,"mtime":1680093035761,"results":"45","hashOfConfig":"32"},{"size":13125,"mtime":1680093035766,"results":"46","hashOfConfig":"32"},{"size":6876,"mtime":1680093035761,"results":"47","hashOfConfig":"32"},{"size":6872,"mtime":1680093035760,"results":"48","hashOfConfig":"32"},{"size":17502,"mtime":1680093035759,"results":"49","hashOfConfig":"32"},{"size":1859,"mtime":1680093035749,"results":"50","hashOfConfig":"32"},{"size":39044,"mtime":1680093035765,"results":"51","hashOfConfig":"32"},{"size":1190,"mtime":1680093035749,"results":"52","hashOfConfig":"32"},{"size":3505,"mtime":1680093035754,"results":"53","hashOfConfig":"32"},{"size":939,"mtime":1680093035764,"results":"54","hashOfConfig":"32"},{"size":154,"mtime":1680093035770,"results":"55","hashOfConfig":"32"},{"size":1761,"mtime":1680093035774,"results":"56","hashOfConfig":"32"},{"size":20857,"mtime":1680093035755,"results":"57","hashOfConfig":"32"},{"size":18263,"mtime":1680093035758,"results":"58","hashOfConfig":"32"},{"size":665,"mtime":1680093035819,"results":"59","hashOfConfig":"32"},{"size":1313,"mtime":1680093035750,"results":"60","hashOfConfig":"32"},{"size":6500,"mtime":1680093035757,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15lpgrz",{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":3,"source":"135"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":3,"source":"157"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},"C:\\apply-page-backend\\src\\main\\frontend\\src\\index.tsx",[],[],"C:\\apply-page-backend\\src\\main\\frontend\\src\\reportWebVitals.ts",[],[],"C:\\apply-page-backend\\src\\main\\frontend\\src\\App.tsx",["174","175","176","177","178","179","180","181"],[],"import React, { useEffect, useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { BrowserRouter, Routes, Route, useLocation } from 'react-router-dom';\r\nimport Index from './component/Index'\r\nimport GlobalStyles from './styles/GlobalFont';\r\nimport Common from './component/Common';\r\nimport Frontend from './component/position/Frontend';\r\nimport Design from './component/position/Design';\r\nimport Backend from './component/position/Backend';\r\nimport ScrollToTop from './hooks/ScrollToTop';\r\nimport Admin from './component/admin/Index';\r\nimport Main from './component/admin/partition/Main';\r\nimport Fail from './component/admin/partition/Fail';\r\nimport Pass from './component/admin/partition/Pass';\r\nimport Header from './component/admin/common/Header';\r\nimport Detail from './component/admin/detail/Detail';\r\nimport Error from './component/404/Error';\r\nimport { useSelector } from 'react-redux';\r\nimport { TestState } from './app/store';\r\nimport { Footer, IndexHeader } from './component/emotion/component';\r\nimport Temp from './component/admin/partition/Temp';\r\nimport NotTime from './component/404/NotTime';\r\nimport ChannelService from './api/ChannelService';\r\nimport { KeyboardIOS } from './hooks/KeyboardIOS';\r\n\r\nexport interface WrapperProps {\r\n  children?: React.ReactNode;\r\n  name?: string;\r\n  text?: string;\r\n  imgSrc?: string;\r\n  alt?: string;\r\n}\r\n\r\nfunction App() {\r\n\r\n  useEffect(() => {\r\n    ChannelService.boot({\r\n      \"pluginKey\": \"4a95db46-8630-4d8d-a4ad-005f90e433e1\", // fill your plugin key\r\n    });\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <GlobalStyles />\r\n        <ScrollToTop />\r\n        <Routes>\r\n          <Route element={<IndexHeader />}>\r\n            <Route path='/' element={<Index />} />\r\n            <Route path='/common' element={<Common />} />\r\n            <Route path='/frontend' element={<Frontend />} />\r\n            <Route path='/backend' element={<Backend />} />\r\n            <Route path='/design' element={<Design />} />\r\n          </Route>\r\n\r\n          <Route path='/admin' element={<Admin />} />\r\n          <Route path='/404' element={<Error />} />\r\n          <Route path='/*' element={<Error />} />\r\n          <Route path='/notTime' element={<NotTime />} />\r\n\r\n          <Route element={<Header />}>\r\n            <Route path='/admin/main' element={<Main />} />\r\n            <Route path='/admin/pass' element={<Pass />} />\r\n            <Route path='/admin/temp' element={<Temp />} />\r\n            <Route path='/admin/fail' element={<Fail />} />\r\n            {/* <Route path='/admin/detail/:position' element={<Detail />} /> */}\r\n          </Route>\r\n        </Routes>\r\n      </BrowserRouter >\r\n    </div >\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\app\\store.ts",[],[],"C:\\apply-page-backend\\src\\main\\frontend\\src\\hooks\\ScrollToTop.ts",[],[],"C:\\apply-page-backend\\src\\main\\frontend\\src\\features\\fetcherSlice.ts",["182","183"],[],"import { createAsyncThunk, createSlice, isFulfilled } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetcherSlice = createSlice({\r\n    name: 'fetcher',\r\n    initialState: {\r\n        userName: '',\r\n        userID: '',\r\n        userDepartment: '',\r\n        userEmail: '',\r\n        userPhone: '',\r\n        userPosition: '',\r\n        userMotiv: '',\r\n        userHardWork: '',\r\n        userKeyWord: '',\r\n        userMostDeeplyWork: '',\r\n\r\n        // 백엔드\r\n        userDifficultAndOvercoming: '',\r\n        userStudyFramework: '',\r\n        userImportantGroup: '',\r\n\r\n        // 프론트엔드\r\n        userWhyFrontend: '',\r\n        userUsingStack: '',\r\n        userTeamProject: '',\r\n        userAchieve: '',\r\n\r\n        // 디자인\r\n        userWhyDesign: '',\r\n        userToolExperience: '',\r\n        userTeamworkExperience: '',\r\n        userDesignGrowth: '',\r\n\r\n        // 공통 포트폴리오\r\n        userPortfolioLinkFront: '',\r\n        userPortfolioLinkBack: '',\r\n        userPortfolioLinkDesign: '',\r\n\r\n        // 관리자 페이지에서의 모달창 온/오프\r\n        userModalState: false,\r\n        newList: false,\r\n        adminState: false,\r\n        passMailList: [],\r\n    },\r\n    reducers: {\r\n        saveIndex: (state, action) => {\r\n            // console.log(action);\r\n            // console.log(action.payload);\r\n            state.userName = action.payload.userName;\r\n            state.userID = action.payload.userID;\r\n            state.userDepartment = action.payload.userDepartment;\r\n            state.userEmail = action.payload.userEmail;\r\n            state.userPhone = action.payload.userPhone;\r\n            state.userPosition = action.payload.userPosition;\r\n        },\r\n        saveCommon: (state, action) => {\r\n            state.userMotiv = action.payload.userMotiv;\r\n            state.userHardWork = action.payload.userHardWork;\r\n            state.userKeyWord = action.payload.userKeyword;\r\n            state.userMostDeeplyWork = action.payload.userMostDeeplyWork;\r\n        },\r\n        saveDesign: (state, action) => {\r\n            state.userWhyDesign = action.payload.userWhyDesign;\r\n            state.userToolExperience = action.payload.userToolExperience;\r\n            state.userTeamworkExperience = action.payload.userTeamworkExperience;\r\n            state.userDesignGrowth = action.payload.userDesignGrowth;\r\n            state.userPortfolioLinkDesign = action.payload.userPortfolioLinkDesign;\r\n        },\r\n        saveFrontEnd: (state, action) => {\r\n            state.userWhyFrontend = action.payload.userWhyFrontend;\r\n            state.userUsingStack = action.payload.userUsingStack;\r\n            state.userTeamProject = action.payload.userTeamProject;\r\n            state.userAchieve = action.payload.userAchieve;\r\n            state.userPortfolioLinkFront = action.payload.userPortfolioLinkFront;\r\n        },\r\n        saveBackEnd: (state, action) => {\r\n            state.userDifficultAndOvercoming = action.payload.userDifficultAndOvercoming;\r\n            state.userStudyFramework = action.payload.userStudyFramework;\r\n            state.userImportantGroup = action.payload.userImportantGroup;\r\n            state.userPortfolioLinkBack = action.payload.userPortfolioLinkBack;\r\n        },\r\n        view: (state) => {\r\n            //     console.log(state.userName);\r\n            //     console.log(state.userID);\r\n            //     console.log(state.userEmail);\r\n            //     console.log(state.userPhone);\r\n            //     console.log(state.userPosition);\r\n            //     console.log(state.userMotiv);\r\n            //     console.log(state.userHardWork);\r\n            //     console.log(state.userKeyWord);\r\n            //     console.log(state.userMostDeeplyWork);\r\n            //     console.log(state.userWhyDesign);\r\n            //     console.log(state.userToolExperience);\r\n            //     console.log(state.userTeamworkExperience);\r\n            //     console.log(state.userDesignGrowth);\r\n            //     console.log(state.userWhyFrontend);\r\n            //     console.log(state.userUsingStack);\r\n            //     console.log(state.userTeamProject);\r\n            //     console.log(state.userAchieve);\r\n        },\r\n        saveModalState: (state, action) => {\r\n            state.userModalState = action.payload.userModalState;\r\n        },\r\n        renderNewList: (state, action) => {\r\n            state.newList = action.payload.newList;\r\n        },\r\n        saveAdminState: (state, action) => {\r\n            state.adminState = action.payload.adminState;\r\n        },\r\n        updatePassMailList: (state, action) => {\r\n            state.passMailList = action.payload;\r\n        }\r\n    },\r\n    extraReducers: {},\r\n})\r\n\r\nexport const { saveIndex, saveCommon, saveBackEnd, saveFrontEnd, saveDesign, view, saveModalState, saveAdminState, updatePassMailList, renderNewList } = fetcherSlice.actions;\r\nexport default fetcherSlice.reducer;","C:\\apply-page-backend\\src\\main\\frontend\\src\\api\\ChannelService.ts",[],[],"C:\\apply-page-backend\\src\\main\\frontend\\src\\styles\\GlobalFont.tsx",[],[],"C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\Common.tsx",["184","185","186","187"],[],"import React, { ChangeEvent } from 'react'\r\nimport { ButtonBox, Section, Button, Require, Article, InputTitle, TextAreaBox, InputBox, Banner, WordLength, Modal, Footer } from './emotion/component'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch, TestState } from '../app/store';\r\nimport { saveCommon, saveIndex, view, saveBackEnd, saveDesign, saveFrontEnd } from '../features/fetcherSlice';\r\nimport { useEffect, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport tempImg from '../images/temp.png';\r\n\r\nexport default function Common() {\r\n\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const [motiv, setMotiv] = useState<string>('');\r\n    const [hardwork, setHardwork] = useState<string>('');\r\n    const [keyword, setKeyword] = useState<string>('');\r\n    const [mostDeeplyWork, setMostDeeplyyWork] = useState<string>('');\r\n    const [buttonState, setButtonState] = useState<boolean>(false);\r\n    const [submitCount, setSubmitCount] = useState<number>(0);\r\n    const [tempState, setTempState] = useState<boolean>(false);\r\n    const [temp, setTemp] = useState(false);\r\n\r\n    const userName = useSelector((state: TestState) => state.fetcher.userName);\r\n    const userID = useSelector((state: TestState) => state.fetcher.userID);\r\n    const userPhone = useSelector((state: TestState) => state.fetcher.userPhone);\r\n    const userEmail = useSelector((state: TestState) => state.fetcher.userEmail);\r\n    const userPosition = useSelector((state: TestState) => state.fetcher.userPosition);\r\n    const userDepartment = useSelector((state: TestState) => state.fetcher.userDepartment);\r\n\r\n    const userMotiv = useSelector((state: TestState) => state.fetcher.userMotiv);\r\n    const userHardWork = useSelector((state: TestState) => state.fetcher.userHardWork);\r\n    const userKeyWord = useSelector((state: TestState) => state.fetcher.userKeyWord);\r\n    const userMostDeeplyWork = useSelector((state: TestState) => state.fetcher.userMostDeeplyWork);\r\n\r\n    const userWhyFrontend = useSelector((state: TestState) => state.fetcher.userWhyFrontend);\r\n    const userUsingStack = useSelector((state: TestState) => state.fetcher.userUsingStack);\r\n    const userTeamProject = useSelector((state: TestState) => state.fetcher.userTeamProject);\r\n    const userAchieve = useSelector((state: TestState) => state.fetcher.userAchieve);\r\n    const userPortfolioLinkFront = useSelector((state: TestState) => state.fetcher.userPortfolioLinkFront);\r\n\r\n    const userWhyDesign = useSelector((state: TestState) => state.fetcher.userWhyDesign);\r\n    const userToolExperience = useSelector((state: TestState) => state.fetcher.userToolExperience);\r\n    const userTeamworkExperience = useSelector((state: TestState) => state.fetcher.userTeamworkExperience);\r\n    const userDesignGrowth = useSelector((state: TestState) => state.fetcher.userDesignGrowth);\r\n    const userPortfolioLinkDesign = useSelector((state: TestState) => state.fetcher.userPortfolioLinkDesign);\r\n\r\n    const userDifficultAndOvercoming = useSelector((state: TestState) => state.fetcher.userDifficultAndOvercoming);\r\n    const userStudyFramework = useSelector((state: TestState) => state.fetcher.userStudyFramework);\r\n    const userImportantGroup = useSelector((state: TestState) => state.fetcher.userImportantGroup);\r\n    const userPortfolioLinkBack = useSelector((state: TestState) => state.fetcher.userPortfolioLinkBack);\r\n\r\n    useEffect(() => {\r\n        document.body.style.overflow = \"unset\";\r\n        if (!userName && !userID && !userPhone && !userEmail && !userPosition) {\r\n            navigate('/404')\r\n        }\r\n\r\n        // 이전 값들을 저장하기 위해서 Redux 사용\r\n        if (userMotiv) {\r\n            setMotiv(userMotiv)\r\n        }\r\n        if (userHardWork) {\r\n            setHardwork(userHardWork)\r\n        }\r\n        if (userKeyWord) {\r\n            setKeyword(userKeyWord)\r\n        }\r\n        if (userMostDeeplyWork) {\r\n            setMostDeeplyyWork(userMostDeeplyWork)\r\n        }\r\n    }, [])\r\n\r\n    useMemo(() => {\r\n        if (motiv || hardwork || keyword || mostDeeplyWork) {\r\n            setTempState(false);\r\n        } else {\r\n            setTempState(true);\r\n        }\r\n\r\n        if (motiv && hardwork && keyword && mostDeeplyWork) {\r\n            setButtonState(false)\r\n        } else {\r\n            setButtonState(true)\r\n        }\r\n\r\n        if (submitCount >= 1) {\r\n            setButtonState(true);\r\n        }\r\n    }, [motiv, hardwork, keyword, mostDeeplyWork, submitCount])\r\n\r\n\r\n    const Back = () => {\r\n        setSubmitCount((prev) => (prev + 1));\r\n        dispatch(saveCommon({ userMotiv: motiv, userHardWork: hardwork, userKeyword: keyword, userMostDeeplyWork: mostDeeplyWork }));\r\n        navigate('/');\r\n    }\r\n\r\n    const PartHistoy = async () => {\r\n        await setSubmitCount((prev) => (prev + 1));\r\n        await dispatch(saveCommon({ userMotiv: motiv, userHardWork: hardwork, userKeyword: keyword, userMostDeeplyWork: mostDeeplyWork }));\r\n        if (userPosition === \"프론트엔드\") {\r\n            await navigate('/frontend');\r\n        } else if (userPosition === \"백엔드\") {\r\n            await navigate('/backend')\r\n        } else if (userPosition === \"디자인\") {\r\n            await navigate('/design')\r\n        } else {\r\n            alert(\"오류가 발생했습니다, 강남대학교 멋쟁이사자처럼에 문의해주세요!\")\r\n            await navigate('/');\r\n        }\r\n    }\r\n\r\n    const TempSave = async () => {\r\n        await setSubmitCount((prev) => (prev + 1));\r\n        if (userPosition === \"프론트엔드\") {\r\n            await axios.post('/frontendApplication', JSON.stringify({\r\n                department: userDepartment,\r\n                whyFrontend: userWhyFrontend,\r\n                email: userEmail,\r\n                hardWork: hardwork,\r\n                usingStack: userUsingStack,\r\n                keyWord: keyword,\r\n                mostDeeplyWork: mostDeeplyWork,\r\n                motive: motiv,\r\n                name: userName,\r\n                passOrNot: true,\r\n                phoneNumber: userPhone,\r\n                portfolioFile: \"\",\r\n                portfolioLink: userPortfolioLinkFront,\r\n                sid: userID,\r\n                teamProject: userTeamProject,\r\n                achieve: userAchieve,\r\n                submissionStatus: false,\r\n            }),\r\n                {\r\n                    headers: {\r\n                        \"Content-type\": \"application/json\",\r\n                    }\r\n                }\r\n            )\r\n                .then(async (res) => {\r\n                    await setTemp(true);\r\n                    document.body.style.overflow = \"hidden\";\r\n                })\r\n                .catch((error) => {\r\n                    // console.log(error);\r\n                })\r\n        }\r\n\r\n        if (userPosition === \"백엔드\") {\r\n            await axios.post('/backendApplication', JSON.stringify({\r\n                department: userDepartment,\r\n                difficultAndOvercoming: userDifficultAndOvercoming,\r\n                email: userEmail,\r\n                hardWork: hardwork,\r\n                importantGroup: userImportantGroup,\r\n                keyWord: keyword,\r\n                mostDeeplyWork: mostDeeplyWork,\r\n                motive: motiv,\r\n                name: userName,\r\n                passOrNot: true,\r\n                phoneNumber: userPhone,\r\n                portfolioFile: \"\",\r\n                portfolioLink: userPortfolioLinkBack,\r\n                sid: userID,\r\n                studyFramework: userStudyFramework,\r\n                submissionStatus: false,\r\n            }),\r\n                {\r\n                    headers: {\r\n                        \"Content-type\": \"application/json\",\r\n                    }\r\n                }\r\n            )\r\n                .then(async (res) => {\r\n                    await setTemp(!temp);\r\n                    document.body.style.overflow = \"hidden\";\r\n                })\r\n        }\r\n\r\n        if (userPosition === \"디자인\") {\r\n            await axios.post('/designApplication', JSON.stringify({\r\n                department: userDepartment,\r\n                whyDesign: userWhyDesign,\r\n                email: userEmail,\r\n                hardWork: hardwork,\r\n                toolExperience: userToolExperience,\r\n                keyWord: keyword,\r\n                mostDeeplyWork: mostDeeplyWork,\r\n                motive: motiv,\r\n                name: userName,\r\n                passOrNot: true,\r\n                phoneNumber: userPhone,\r\n                portfolioFile: \"\",\r\n                portfolioLink: userPortfolioLinkDesign,\r\n                sid: userID,\r\n                teamworkExperience: userTeamworkExperience,\r\n                designGrowth: userDesignGrowth,\r\n                submissionStatus: false,\r\n            }),\r\n                {\r\n                    headers: {\r\n                        \"Content-type\": \"application/json\",\r\n                    }\r\n                }\r\n            )\r\n                .then(async (res) => {\r\n                    await setTemp(!temp);\r\n                    document.body.style.overflow = \"hidden\";\r\n                })\r\n        }\r\n    }\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        if (event.target.name === \"최종목표\") {\r\n            if (event.target.value.length <= 1000) {\r\n                setMotiv(event.target.value);\r\n            }\r\n        }\r\n\r\n        if (event.target.name === \"활동\") {\r\n            if (event.target.value.length <= 1000) {\r\n                setHardwork(event.target.value);\r\n            }\r\n        }\r\n\r\n        if (event.target.name === \"키워드\") {\r\n            if (event.target.value.length <= 1000) {\r\n                setKeyword(event.target.value);\r\n            }\r\n        }\r\n\r\n        if (event.target.name === \"감명\") {\r\n            if (event.target.value.length <= 1000) {\r\n                setMostDeeplyyWork(event.target.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    const TempBack = async () => {\r\n        setTemp(false);\r\n        setSubmitCount(0);\r\n        setTempState(false);\r\n        setButtonState(false);\r\n        document.body.style.overflow = \"unset\";\r\n    }\r\n\r\n    const TempHome = async () => {\r\n        if (userPosition === \"프론트엔드\") {\r\n            dispatch(saveFrontEnd({\r\n                userWhyFrontend: '',\r\n                userUsingStack: '',\r\n                userAchieve: '',\r\n                userPortfolioLinkFront: '',\r\n                userTeamProject: '',\r\n            }));\r\n            dispatch(saveCommon({\r\n                userMotiv: '',\r\n                userHardWork: '',\r\n                userKeyWord: '',\r\n                userMostDeeplyWork: '',\r\n            }))\r\n            dispatch(saveIndex({\r\n                userName: '',\r\n                userID: '',\r\n                userDepartment: '',\r\n                userEmail: '',\r\n                userPhone: '',\r\n                userPosition: '',\r\n            }))\r\n        }\r\n        if (userPosition === \"백엔드\") {\r\n            dispatch(saveBackEnd({\r\n                userDifficultAndOvercoming: '',\r\n                userImportantGroup: '',\r\n                userPortfolioLink: '',\r\n                userStudyFramework: '',\r\n            }));\r\n            dispatch(saveCommon({\r\n                userMotiv: '',\r\n                userHardWork: '',\r\n                userKeyWord: '',\r\n                userMostDeeplyWork: '',\r\n            }))\r\n            dispatch(saveIndex({\r\n                userName: '',\r\n                userID: '',\r\n                userDepartment: '',\r\n                userEmail: '',\r\n                userPhone: '',\r\n                userPosition: '',\r\n            }))\r\n        }\r\n        if (userPosition === \"디자인\") {\r\n            await dispatch(saveDesign({\r\n                userWhyDesign: '',\r\n                userToolExperience: '',\r\n                userTeamworkExperience: '',\r\n                userPortfolioLinkDesign: '',\r\n                userDesignGrowth: '',\r\n            }));\r\n            await dispatch(saveCommon({\r\n                userMotiv: '',\r\n                userHardWork: '',\r\n                userKeyWord: '',\r\n                userMostDeeplyWork: '',\r\n            }))\r\n            await dispatch(saveIndex({\r\n                userName: '',\r\n                userID: '',\r\n                userDepartment: '',\r\n                userEmail: '',\r\n                userPhone: '',\r\n                userPosition: '',\r\n            }))\r\n        }\r\n        await navigate('/');\r\n    }\r\n\r\n    return (\r\n        <Section>\r\n            {temp ?\r\n                <Modal text=\"지원하신 학번으로 지원서가 저장이 되었어요!\" imgSrc={tempImg}>\r\n                    <Button name=\"임시저장\" onClick={TempHome}>메인 화면으로 이동</Button>\r\n                    <Button name=\"제출하기\" onClick={TempBack}>이어서 작성하기</Button>\r\n                </Modal>\r\n                : null\r\n            }\r\n            <Banner />\r\n            <Article>\r\n                <InputTitle>지원자분의 인생의 최종 목표는 무엇인가요?<Require /> </InputTitle>\r\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"최종목표\" onChange={handleChange} value={motiv} />\r\n                <WordLength>{motiv.length}</WordLength>\r\n            </Article>\r\n            <Article>\r\n                <InputTitle>학교 공부를 제외하고 본인의 인생에 있어서 가장 열심히 했던 활동은 무엇인가요?<Require /> </InputTitle>\r\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"활동\" onChange={handleChange} value={hardwork} />\r\n                <WordLength>{hardwork.length}</WordLength>\r\n            </Article>\r\n            <Article>\r\n                <InputTitle>자신을 설명할 수 있는 키워드 3개와 그 이유에 대하여 설명해주세요<Require /> </InputTitle>\r\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"키워드\" onChange={handleChange} value={keyword} />\r\n                <WordLength>{keyword.length}</WordLength>\r\n            </Article>\r\n            <Article>\r\n                <InputTitle>최근에 가장 감명 깊었던 책 · 영화 · 노래가 있다면 하나를 선택해주시고, 그 이유에 대하여 설명해주세요<Require /> </InputTitle>\r\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"감명\" onChange={handleChange} value={mostDeeplyWork} />\r\n                <WordLength>{mostDeeplyWork.length}</WordLength>\r\n            </Article>\r\n            <ButtonBox>\r\n                <Button name=\"임시저장\" onClick={TempSave} disabled={tempState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `임시저장`}</Button>\r\n                <Button name=\"제출하기\" onClick={Back}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `뒤로가기`}</Button>\r\n                <Button name=\"제출하기\" onClick={PartHistoy} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `파트별 문항 작성하기`}</Button>\r\n            </ButtonBox>\r\n        </Section>\r\n    )\r\n}\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\Index.tsx",["188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208"],[],"/** @jsxImportSource @emotion/react */\r\nimport React, { ChangeEvent, useRef, useState } from 'react'\r\nimport axios from 'axios';\r\nimport checkBox from '../images/checkBox.svg';\r\nimport checkedBox from '../images/checkedBox.svg';\r\nimport { useMemo } from 'react';\r\nimport { css, keyframes } from \"@emotion/react\";\r\nimport { fadeLeft, fadeUp } from '../styles/Keyframes';\r\nimport { Section, Banner, Article, InputTitle, InputBox, PositionBox, Position, Require, Precautions, ArgreeBox, Argree, ButtonBox, Button, Modal, ModalInput, Quit, EndTime, CollectDescription, ErrorDescription, SearchDepartment, Footer } from './emotion/component';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch, TestState } from '../app/store';\r\nimport { view, saveIndex, saveBackEnd, saveCommon, saveFrontEnd, saveDesign } from '../features/fetcherSlice';\r\nimport { useEffect } from 'react';\r\nimport human from '../images/human.png';\r\nimport isTemp from '../images/isTemp.png';\r\nimport { classList } from './class';\r\nimport Confetti from '../hooks/Confetti';\r\nimport NotWidth from './404/NotWidth';\r\nimport NotTime from './404/NotTime';\r\nimport { currentTime, endTime, startTime } from './time/time';\r\n\r\nexport default function Index() {\r\n    const [name, setName] = useState<string>('');\r\n    const [id, setID] = useState<string>('');\r\n    const [email, setEmail] = useState<string>('');\r\n    const [phone, setPhone] = useState<number | string>('');\r\n    const [department, setDepartment] = useState<string>('');\r\n    const [temp, setTemp] = useState<boolean>(false);\r\n    const [submit, setSubmit] = useState<boolean>(false);\r\n    const [load, setLoad] = useState<boolean>(false);\r\n    const [tempId, setTempId] = useState<string>('');\r\n    const [tempEmail, setTempEmail] = useState<string>('');\r\n    const [tabIndex, setTabIndex] = useState<number>(0);\r\n\r\n    const [position, setPosition] = useState<string>('');\r\n    const [tempPosition, setTempPosition] = useState<string>('');\r\n    const [precautions, setPrecautions] = useState<boolean>(false);\r\n    const [privacy, setPrivacy] = useState<boolean>(false);\r\n    const [buttonState, setButtonState] = useState<boolean>(false);\r\n    const [tempButtonState, setTempButtonState] = useState<boolean>(false);\r\n    const [submitCount, setSubmitCount] = useState<number>(0);\r\n    const [tempCount, setTempCount] = useState<number>(0);\r\n    const [isTempState, setIsTempState] = useState<boolean>(false);\r\n    const [isNotTempState, setIsNotTempState] = useState<boolean>(false);\r\n    const [openSearch, setOpenSearch] = useState<boolean>(false);\r\n    const [itIsTemp, setItIsTemp] = useState<boolean>(false);\r\n    const [isDepartment, setIsDepartment] = useState<boolean>(false);\r\n\r\n    const [userNameCheck, setUserNameCheck] = useState<boolean | null>(null);\r\n    const [userIDCheck, setUserIDCheck] = useState<boolean | null>(null);\r\n    const [userEmailCheck, setUserEmailCheck] = useState<boolean | null>(null);\r\n    const [userPhoneCheck, setUserPhoneCheck] = useState<boolean | null>(null);\r\n    const [userDepartmentCheck, setUserDepartmentCheck] = useState<boolean | null>(null);\r\n\r\n\r\n    const userName = useSelector((state: TestState) => state.fetcher.userName);\r\n    const userID = useSelector((state: TestState) => state.fetcher.userID);\r\n    const userPhone = useSelector((state: TestState) => state.fetcher.userPhone);\r\n    const userEmail = useSelector((state: TestState) => state.fetcher.userEmail);\r\n    const userPosition = useSelector((state: TestState) => state.fetcher.userPosition);\r\n    const userDepartment = useSelector((state: TestState) => state.fetcher.userDepartment);\r\n\r\n    const departmentRef = useRef() as React.MutableRefObject<HTMLDivElement>;\r\n\r\n    const [timeState, setTimeState] = useState<boolean>(false);\r\n    // const [widthState, setWidthState] = useState<boolean>(false);\r\n    const EMAIL_REGEX = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/;\r\n\r\n\r\n    useEffect(() => {\r\n        // 현재 시간이 엔드타임보다 클 경우에는 timesState를 true로 만들어줍니다.\r\n        // 현재 시간이 스타트타임보다 작을 경우에는 timsState를 true로 만들어줍니다.\r\n        // timeState가 true라면 모달창을 띄웁니다.\r\n\r\n        if (currentTime <= startTime) {\r\n            setTimeState(true);\r\n        }\r\n        else if (currentTime > endTime) {\r\n            setTimeState(true);\r\n        } else {\r\n            setTimeState(false);\r\n        }\r\n\r\n        // 사용자의 해상도가 1100보다 작을 경우, widthState를 true로 만들어줍니다.\r\n        // if (window.innerWidth && document.body.clientWidth < 1100) {\r\n        //     setWidthState(true);\r\n        // } else {\r\n        //     setWidthState(false);\r\n        // }\r\n\r\n        document.body.style.overflow = \"unset\";\r\n        // 이전 값들을 저장하기 위해서 Redux 사용\r\n        if (userName && userID && userPhone && userEmail && userPosition && userDepartment) {\r\n            setName(userName);\r\n            setID(userID);\r\n            setEmail(userEmail);\r\n            setPhone(userPhone);\r\n            setPosition(userPosition);\r\n            setDepartment(userDepartment);\r\n            setUserNameCheck(true);\r\n            setUserIDCheck(true);\r\n            setUserEmailCheck(true);\r\n            setUserDepartmentCheck(true);\r\n            setUserPhoneCheck(true);\r\n            setOpenSearch(true);\r\n        }\r\n    }, [])\r\n\r\n    useMemo(() => {\r\n        if (tempId.length >= 9 && tempEmail && tempPosition) {\r\n            setIsTempState(false);\r\n        } else {\r\n            setIsTempState(true);\r\n        }\r\n\r\n        if (userNameCheck && userEmailCheck && userPhoneCheck && position && precautions && privacy && userDepartmentCheck && userIDCheck) {\r\n            setButtonState(false)\r\n        } else {\r\n            setButtonState(true)\r\n        }\r\n\r\n        if (submitCount >= 1) {\r\n            setButtonState(true);\r\n        }\r\n\r\n        if (tempCount >= 1) {\r\n            setTempButtonState(true);\r\n        }\r\n\r\n    }, [name, id, email, phone, position, precautions, privacy, department, submitCount, tempCount, tempId, tempEmail, tempPosition, userNameCheck, userEmailCheck, userPhoneCheck, userDepartmentCheck, userIDCheck])\r\n\r\n    // 모달의 상태 값이 참 일 경우에는, 브라우저의 스크롤 움직임을 막아준다. (hidden)\r\n    // 모달의 상태 값이 거짓 일 경우에는, 브라우저의 스크롤 움직임을 풀어준다. (usset)\r\n    useEffect(() => {\r\n        if (isNotTempState || load || submit || temp) {\r\n            document.body.style.overflow = \"hidden\";\r\n        } else {\r\n            document.body.style.overflow = \"unset\";\r\n        }\r\n    }, [isNotTempState, load, submit, temp]);\r\n\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const navigate = useNavigate();\r\n\r\n    const handleClick = async () => {\r\n        if (position) {\r\n            setSubmitCount((prev) => (prev + 1))\r\n            if (position === \"백엔드\") {\r\n                await axios.get(`/backendApplication?sid=${id}`)\r\n                    .then(async (res) => {\r\n                        // console.log(\"백엔드\", res.data);\r\n                        if (res.data.motive || res.data.hardWork || res.data.keyWord || res.data.mostDeeplyWork) {\r\n                            if (res.data.submissionStatus) {\r\n                                setSubmit(!submit);\r\n                                document.body.style.overflow = \"hidden\";\r\n                            } else {\r\n                                setItIsTemp(!itIsTemp);\r\n                                document.body.style.overflow = \"hidden\";\r\n                            }\r\n                        } else {\r\n                            dispatch(saveIndex({ userName: name, userID: id, userPhone: phone, userEmail: email, userPosition: position, userDepartment: department }));\r\n                            navigate('/common');\r\n                        }\r\n                    })\r\n            }\r\n\r\n            if (position === \"프론트엔드\") {\r\n                await axios.get(`/frontendApplication?sid=${id}`)\r\n                    .then(async (res) => {\r\n                        // console.log(\"프론트엔드\", res.data);\r\n                        if (res.data.motive || res.data.hardWork || res.data.keyWord || res.data.mostDeeplyWork) {\r\n                            if (res.data.submissionStatus) {\r\n                                setSubmit(!submit);\r\n                                document.body.style.overflow = \"hidden\";\r\n                            } else {\r\n                                setItIsTemp(!itIsTemp);\r\n                                document.body.style.overflow = \"hidden\";\r\n                            }\r\n                        } else {\r\n                            dispatch(saveIndex({ userName: name, userID: id, userPhone: phone, userEmail: email, userPosition: position, userDepartment: department }));\r\n                            navigate('/common');\r\n                        }\r\n                    })\r\n            }\r\n\r\n            if (position === \"디자인\") {\r\n                await axios.get(`/designApplication?sid=${id}`)\r\n                    .then(async (res) => {\r\n                        // console.log(\"디자인\", res.data);\r\n                        if (res.data.motive || res.data.hardWork || res.data.keyWord || res.data.mostDeeplyWork) {\r\n                            if (res.data.submissionStatus) {\r\n                                setSubmit(!submit);\r\n                                document.body.style.overflow = \"hidden\";\r\n                            } else {\r\n                                setItIsTemp(!itIsTemp);\r\n                                document.body.style.overflow = \"hidden\";\r\n                            }\r\n                        } else {\r\n                            dispatch(saveIndex({ userName: name, userID: id, userPhone: phone, userEmail: email, userPosition: position, userDepartment: department }));\r\n                            navigate('/common');\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    /* 일반 기본 정보를 다 채우는 과정으로 입력했을 경우, 임시 저장에 따른 계속 작성하기에 관련된 함수 */\r\n    const continueApply = async () => {\r\n        setTempCount((prev) => (prev + 1))\r\n        if (position === \"백엔드\") {\r\n            await axios.get(`/backendApplication?sid=${id}`)\r\n                .then(async (res) => {\r\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: position, userDepartment: res.data.department }));\r\n                    await dispatch(saveBackEnd({ userDifficultAndOvercoming: res.data.difficultAndOvercoming, userImportantGroup: res.data.importantGroup, userPortfolioLinkBack: res.data.portfolioLink, userStudyFramework: res.data.studyFramework }));\r\n                    await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\r\n                    await navigate('/common');\r\n                })\r\n        }\r\n\r\n        if (position === \"프론트엔드\") {\r\n            await axios.get(`/frontendApplication?sid=${id}`)\r\n                .then(async (res) => {\r\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: position, userDepartment: res.data.department }));\r\n                    await dispatch(saveFrontEnd({ userWhyFrontend: res.data.whyFrontend, userUsingStack: res.data.usingStack, userTeamProject: res.data.teamProject, userAchieve: res.data.achieve, userPortfolioLinkFront: res.data.portfolioLink }));;\r\n                    await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\r\n                    await navigate('/common');\r\n                })\r\n        }\r\n\r\n        if (position === \"디자인\") {\r\n            await axios.get(`/designApplication?sid=${id}`)\r\n                .then(async (res) => {\r\n                    // console.log(\"design :\", res.data);\r\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: position, userDepartment: res.data.department }));\r\n                    await dispatch(saveDesign({ userWhyDesign: res.data.whyDesign, userToolExperience: res.data.toolExperience, userTeamworkExperience: res.data.teamworkExperience, userPortfolioLinkDesign: res.data.portfolioLink, userDesignGrowth: res.data.designGrowth, }));\r\n                    await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\r\n                    await navigate('/common');\r\n                })\r\n        }\r\n    }\r\n\r\n    /* 학번만 입력했을 경우, 임시 저장에 따른 작성하기에 관련된 함수 */\r\n    const tempContinueApply = async () => {\r\n        setTempCount((prev) => (prev + 1))\r\n        if (tempPosition === \"백엔드\") {\r\n            await axios.get(`/backendApplication?sid=${tempId}`)\r\n                .then(async (res) => {\r\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: tempPosition, userDepartment: res.data.department }));\r\n                    await dispatch(saveBackEnd({ userDifficultAndOvercoming: res.data.difficultAndOvercoming, userImportantGroup: res.data.importantGroup, userPortfolioLinkBack: res.data.portfolioLink, userStudyFramework: res.data.studyFramework }));\r\n                    await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\r\n                    await navigate('/common');\r\n                })\r\n        }\r\n\r\n        if (tempPosition === \"프론트엔드\") {\r\n            await axios.get(`/frontendApplication?sid=${tempId}`)\r\n                .then(async (res) => {\r\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: tempPosition, userDepartment: res.data.department }));\r\n                    await dispatch(saveFrontEnd({ userWhyFrontend: res.data.whyFrontend, userUsingStack: res.data.usingStack, userTeamProject: res.data.teamProject, userAchieve: res.data.achieve, userPortfolioLinkFront: res.data.portfolioLink }));;\r\n                    await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\r\n                    await navigate('/common');\r\n                })\r\n        }\r\n\r\n        if (tempPosition === \"디자인\") {\r\n            await axios.get(`/designApplication?sid=${tempId}`)\r\n                .then(async (res) => {\r\n                    // console.log(\"design :\", res.data);\r\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: tempPosition, userDepartment: res.data.department }));\r\n                    await dispatch(saveDesign({ userWhyDesign: res.data.whyDesign, userToolExperience: res.data.toolExperience, userTeamworkExperience: res.data.teamworkExperience, userPortfolioLinkDesign: res.data.portfolioLink, userDesignGrowth: res.data.designGrowth, }));\r\n                    await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\r\n                    await navigate('/common');\r\n                })\r\n        }\r\n    }\r\n\r\n    /* 학번으로만 임시 저장 여부를 확인할 때, submit 함수 */\r\n    const tempClick = async () => {\r\n        if (tempPosition) {\r\n            setSubmitCount((prev) => (prev + 1))\r\n            setLoad(false)\r\n            if (tempPosition === \"백엔드\") {\r\n                await axios.get(`/backendApplication/getBackendApplicationWithEmail?email=${tempEmail}&sid=${tempId}`)\r\n                    .then(async (res) => {\r\n                        // console.log(\"백엔드\", res.data);\r\n                        if (res.data.motive || res.data.hardWork || res.data.keyWord || res.data.mostDeeplyWork) {\r\n                            if (res.data.submissionStatus) {\r\n                                setSubmit(!submit);\r\n                                document.body.style.overflow = \"hidden\";\r\n                            } else {\r\n                                setTemp(!temp);\r\n                                document.body.style.overflow = \"hidden\";\r\n                            }\r\n                        } else {\r\n                            setIsNotTempState(!isNotTempState);\r\n                            document.body.style.overflow = \"hidden\";\r\n                        }\r\n                    })\r\n            }\r\n\r\n            if (tempPosition === \"프론트엔드\") {\r\n                await axios.get(`/frontendApplication/getFrontendApplicationWithEmail?email=${tempEmail}&sid=${tempId}`)\r\n                    .then(async (res) => {\r\n                        // console.log(\"임시저장 프론트엔드\", res.data);\r\n                        if (res.data.motive || res.data.hardWork || res.data.keyWord || res.data.mostDeeplyWork) {\r\n                            if (res.data.submissionStatus === true) {\r\n                                setSubmit(!submit);\r\n                                document.body.style.overflow = \"hidden\";\r\n                            } else {\r\n                                setTemp(!temp);\r\n                                document.body.style.overflow = \"hidden\";\r\n                            }\r\n                        } else {\r\n                            setIsNotTempState(!isNotTempState);\r\n                            document.body.style.overflow = \"hidden\";\r\n                        }\r\n                    })\r\n            }\r\n\r\n            if (tempPosition === \"디자인\") {\r\n                await axios.get(`/designApplication/getDesignApplicationWithEmail?email=${tempEmail}&sid=${tempId}`)\r\n                    .then(async (res) => {\r\n                        // console.log(\"임시저장 디자인\", res.data);\r\n                        if (res.data.motive || res.data.hardWork || res.data.keyWord || res.data.mostDeeplyWork) {\r\n                            if (res.data.submissionStatus) {\r\n                                setSubmit(!submit);\r\n                                document.body.style.overflow = \"hidden\";\r\n                            } else {\r\n                                setTemp(!temp);\r\n                                document.body.style.overflow = \"hidden\";\r\n                            }\r\n                        } else {\r\n                            setIsNotTempState(!isNotTempState);\r\n                            document.body.style.overflow = \"hidden\";\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    /* 저장된 글이 발견되고, 새로 작성하기를 누를 경우 기본 정보를 Redux에 저장시키고, 기존 Redux 정보를 새롭게 리셋 시킨다. */\r\n    const newApply = async () => {\r\n        await setTempCount((prev) => (prev + 1))\r\n        await dispatch(saveIndex({ userName: name, userID: id, userPhone: phone, userEmail: email, userPosition: position, userDepartment: department }));\r\n        if (position === \"프론트엔드\") {\r\n            await dispatch(saveFrontEnd({\r\n                userWhyFrontend: '',\r\n                userUsingStack: '',\r\n                userAchieve: '',\r\n                userPortfolioLinkFront: '',\r\n                userTeamProject: '',\r\n            }));\r\n        }\r\n        if (position === \"디자인\") {\r\n            await dispatch(saveDesign({\r\n                userWhyDesign: '',\r\n                userToolExperience: '',\r\n                userTeamworkExperience: '',\r\n                userPortfolioLinkDesign: '',\r\n                userDesignGrowth: '',\r\n            }));\r\n        }\r\n\r\n        if (position === \"백엔드\") {\r\n            await dispatch(saveBackEnd({\r\n                userDifficultAndOvercoming: '',\r\n                userImportantGroup: '',\r\n                userPortfolioLink: '',\r\n                userStudyFramework: '',\r\n            }));\r\n        }\r\n\r\n        await dispatch(saveCommon({\r\n            userMotiv: '',\r\n            userHardWork: '',\r\n            userKeyWord: '',\r\n            userMostDeeplyWork: '',\r\n        }))\r\n        navigate('/common');\r\n    }\r\n\r\n    /* 임시 저장 여부를 확인하고, 바로 새로 작성을 할 경우 공통 질문과, 파트별 질문은 초기화하되, 사용자의 기본 정보는 초기화해서는 안됨 */\r\n    const tempNewApply = async () => {\r\n        await setTempCount((prev) => (prev + 1))\r\n\r\n        if (tempPosition === \"백엔드\") {\r\n            await axios.get(`/backendApplication?sid=${tempId}`)\r\n                .then(async (res) => {\r\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: tempPosition, userDepartment: res.data.department }));\r\n                    await dispatch(saveBackEnd({ userDifficultAndOvercoming: '', userImportantGroup: '', userPortfolioLink: '', userStudyFramework: '' }));\r\n                })\r\n        }\r\n\r\n        if (tempPosition === \"프론트엔드\") {\r\n            await axios.get(`/frontendApplication?sid=${tempId}`)\r\n                .then(async (res) => {\r\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: tempPosition, userDepartment: res.data.department }));\r\n                    await dispatch(saveFrontEnd({ userWhyFrontend: '', userUsingStack: '', userAchieve: '', userPortfolioLinkFront: '', userTeamProject: '' }));\r\n                })\r\n        }\r\n\r\n        if (tempPosition === \"디자인\") {\r\n            await axios.get(`/designApplication?sid=${tempId}`)\r\n                .then(async (res) => {\r\n                    // console.log(\"design :\", res.data);\r\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: tempPosition, userDepartment: res.data.department }));\r\n                    await dispatch(saveDesign({ userWhyDesign: '', userToolExperience: '', userTeamworkExperience: '', userPortfolioLinkDesign: '', userDesignGrowth: '', }));\r\n                })\r\n        }\r\n\r\n        await dispatch(saveCommon({\r\n            userMotiv: '',\r\n            userHardWork: '',\r\n            userKeyWord: '',\r\n            userMostDeeplyWork: '',\r\n        }))\r\n\r\n        await navigate('/common');\r\n    }\r\n\r\n    /* 일반 페이지에서 포지션을 체크하는 함수 */\r\n    function CheckPosition(event: React.MouseEvent<HTMLButtonElement>): void {\r\n        const name = (event.target as HTMLButtonElement).name;\r\n        setPosition(name);\r\n    }\r\n\r\n    /* 불러오기 버튼을 누르고 포지션을 체크하는 함수 */\r\n    function TempCheckPosition(event: React.MouseEvent<HTMLButtonElement>): void {\r\n        const name = (event.target as HTMLButtonElement).name;\r\n        setTempPosition(name);\r\n    }\r\n\r\n    const checking = (event: React.MouseEvent<HTMLImageElement | HTMLElement>): void => {\r\n        const name = (event.target as HTMLImageElement).alt;\r\n        const id = (event.target as HTMLImageElement).id;\r\n\r\n        if (name === \"주의사항\") {\r\n            setPrecautions(!precautions);\r\n        }\r\n        if (name === \"개인정보\") {\r\n            setPrivacy(!privacy);\r\n        }\r\n        if (id === \"주의사항\") {\r\n            setPrecautions(!precautions);\r\n        }\r\n        if (id === \"개인정보\") {\r\n            setPrivacy(!privacy);\r\n        }\r\n    }\r\n\r\n    /* 학과를 검색하고 누르면, 해당 값들을 참으로 넘겨줍니다. */\r\n    const SearchCheck = async (item: string) => {\r\n        await setDepartment(item)\r\n        await setOpenSearch(true);\r\n        await setUserDepartmentCheck(true);\r\n    }\r\n\r\n\r\n    /* 학과를 검색하고, 사용자가 재검색을 하고 싶을 경우 해당 버튼을 누르면 기존 값들을 다시 false 값으로 바꿔줍니다 */\r\n    const RevertDepartment = async () => {\r\n        await setDepartment('');\r\n        await setOpenSearch(false);\r\n        await setUserDepartmentCheck(false);\r\n    }\r\n\r\n    const changeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.name === \"이름\") {\r\n            const eventName = event.target.value.replace(/[_/]|[0-9]|[ \\[\\]{}()<>?|`~!@#$%^&*-+=,.;:\\\"'\\\\]/g, '');\r\n            if (eventName.length === 1) {\r\n                setUserNameCheck(false);\r\n            }\r\n            else if (eventName.length >= 2) {\r\n                setUserNameCheck(true);\r\n            }\r\n            else if (eventName.length === 0) {\r\n                setUserNameCheck(null);\r\n            }\r\n            setName(eventName);\r\n        }\r\n        if (event.target.name === \"학번\") {\r\n            const eventID = event.target.value.replace(/[^0-9]/g, '');\r\n            if (eventID.length === 9) {\r\n                setUserIDCheck(true);\r\n            }\r\n            else if (eventID.length >= 1) {\r\n                setUserIDCheck(false);\r\n            }\r\n            else if (eventID.length === 0) {\r\n                setUserIDCheck(null);\r\n            }\r\n            setID(eventID);\r\n        }\r\n        if (event.target.name === \"이메일\") {\r\n            if (event.target.value.match(EMAIL_REGEX)) {\r\n                setUserEmailCheck(true);\r\n            }\r\n            else if (!event.target.value.match(EMAIL_REGEX) && event.target.value.length >= 1) {\r\n                setUserEmailCheck(false);\r\n            }\r\n            else if (event.target.value.length === 0) {\r\n                setUserEmailCheck(null);\r\n            }\r\n\r\n            setEmail(event.target.value);\r\n        }\r\n        if (event.target.name === \"연락처\") {\r\n            const eventPhone = event.target.value.replace(/[^0-9]/g, '');\r\n            if (eventPhone.length === 11) {\r\n                setUserPhoneCheck(true);\r\n            }\r\n            else if (eventPhone.length >= 1) {\r\n                setUserPhoneCheck(false);\r\n            }\r\n            else if (eventPhone.length === 0) {\r\n                setUserPhoneCheck(null);\r\n            }\r\n            setPhone(eventPhone);\r\n        }\r\n        if (event.target.name === \"학과\") {\r\n            const eventDepartment = event.target.value.replace(/[_/]|[0-9]|[\\[\\]{}()<>?|`~!@#$%^&*-+=,.;:\\\"'\\\\]/g, '');\r\n            setDepartment(eventDepartment);\r\n\r\n            // if (event.target.value.length === 0) {\r\n            //     setIsDepartment(false);\r\n            // }\r\n        }\r\n\r\n        if (event.target.name === \"저장된_학번\") {\r\n            const eventID = event.target.value.replace(/[^0-9]/g, '');\r\n            setTempId(eventID);\r\n        }\r\n\r\n        if (event.target.name === \"저장된_이메일\") {\r\n            setTempEmail(event.target.value);\r\n        }\r\n    }\r\n\r\n    /* 메인 화면의 임시 저장을 누를 때의 함수 */\r\n    const isSave = () => {\r\n        setLoad(true)\r\n        setTabIndex(-1);\r\n        document.body.style.overflow = \"hidden\";\r\n    }\r\n\r\n    /* 이미 제출된 지원서가 있을 때의 함수 */\r\n    const isSubmit = () => {\r\n        setSubmit(false);\r\n        setTabIndex(0);\r\n        window.location.replace(\"/\")\r\n    }\r\n\r\n    /* 불러오기 모달을 띄우고, 취소 버튼을 눌렀을 때 */\r\n    const TempModalQuit = () => {\r\n        setTempPosition('');\r\n        setTempId('');\r\n        setTempEmail('');\r\n        setLoad(false);\r\n        setTabIndex(0);\r\n    }\r\n\r\n    if (timeState) {\r\n        return <NotTime />\r\n    }\r\n    else {\r\n        return (\r\n            <Section>\r\n                {itIsTemp ?\r\n                    <Modal text=\"이미 지원한 지원서가 존재해요, 불러오기 버튼을 눌러주세요!\" imgSrc={human} alt=\"불러오기\">\r\n                        <Button name=\"제출하기\" onClick={isSubmit}>메인 화면으로 이동</Button>\r\n                    </Modal>\r\n                    : null\r\n                }\r\n                {isNotTempState ?\r\n                    <Modal text=\"정보를 제대로 입력해주세요, 발견된 지원서가 없어요!\" imgSrc={human} alt=\"불러오기\">\r\n                        <Button name=\"제출하기\" onClick={isSubmit}>메인 화면으로 이동</Button>\r\n                    </Modal>\r\n                    : null\r\n                }\r\n                {load ?\r\n                    <Modal text=\"작성하신 지원서의 이메일과 학번을 통해 지원서를 불러올 수 있어요\" imgSrc={isTemp} alt=\"찾기\">\r\n                        <div css={css`\r\n                        display: flex;\r\n                        flex-direction: column;\r\n                        align-items:center;\r\n                    `}>\r\n                            <ButtonBox alt=\"임시저장_모달\">\r\n                                <div css={css`\r\n                                display: flex;\r\n                                flex-direction: column;\r\n                                width: 100%;\r\n                                align-items: center;\r\n                                row-gap: 1em;\r\n                            `}>\r\n                                    <ModalInput type=\"text\" placeholder=\"학번 전체를 입력해주세요\" name=\"저장된_학번\" maxLength={9} onChange={changeValue} value={tempId} />\r\n                                    <ModalInput type=\"text\" placeholder=\"이메일 전체를 입력해주세요\" name=\"저장된_이메일\" onChange={changeValue} value={tempEmail} />\r\n                                    <PositionBox alt=\"모달\">\r\n                                        <Position name=\"백엔드\" onClick={TempCheckPosition} state={tempPosition} alt=\"모달\">백엔드</Position>\r\n                                        <Position name=\"프론트엔드\" onClick={TempCheckPosition} state={tempPosition} alt=\"모달\">프론트엔드</Position>\r\n                                        <Position name=\"디자인\" onClick={TempCheckPosition} state={tempPosition} alt=\"모달\">디자인</Position>\r\n                                    </PositionBox>\r\n                                    <Quit onClick={TempModalQuit} alt=\"찾기\" />\r\n                                    <Button name=\"제출하기\" alt=\"불러오기\" disabled={isTempState} onClick={tempClick}>불러오기</Button>\r\n                                </div>\r\n                            </ButtonBox>\r\n                        </div>\r\n                    </Modal>\r\n                    : null\r\n                }\r\n                {submit ?\r\n                    <Modal text=\"이미 제출한 지원서가 있어요, 결과 발표를 위해 조금만 기다려주세요!\" imgSrc={human} alt=\"불러오기\">\r\n                        <Button name=\"제출하기\" onClick={isSubmit} >메인 화면으로 이동</Button>\r\n                    </Modal>\r\n                    : null\r\n                }\r\n                {temp ?\r\n                    <Modal text=\"앗, 저장된 지원서가 발견되었어요 계속 작성할까요?\" imgSrc={human} alt=\"불러오기\">\r\n                        <Button name=\"임시저장\" onClick={id.length === 9 ? newApply : tempNewApply} disabled={tempButtonState}>{tempCount >= 1 ? `잠시만 기다려주세요...` : `새로 작성하기`}</Button>\r\n                        <Button name=\"제출하기\" onClick={id.length === 9 ? continueApply : tempContinueApply} disabled={tempButtonState}>{tempCount >= 1 ? `잠시만 기다려주세요...` : `이어서 작성하기`}</Button>\r\n                    </Modal>\r\n                    : null\r\n                }\r\n                <Banner />\r\n                <Article>\r\n                    <InputTitle>이름 <Require /> </InputTitle>\r\n                    <InputBox type=\"text\" placeholder=\"이름을 입력해주세요 (예시 : 김멋사)\" name=\"이름\" maxLength={15} onChange={changeValue} value={name} tabIndex={tabIndex} />\r\n                    {userNameCheck === false && <ErrorDescription>이름을 제대로 입력해주세요</ErrorDescription>}\r\n                    {userNameCheck && <CollectDescription>이름이 정상적으로 입력되었습니다</CollectDescription>}\r\n                </Article>\r\n                <Article>\r\n                    <InputTitle>학번 <Require /> </InputTitle>\r\n                    <InputBox type=\"text\" placeholder=\"학번 전체를 입력해주세요 (예시 : 201704027)\" name=\"학번\" maxLength={9} onChange={changeValue} value={id} tabIndex={tabIndex} />\r\n                    {userIDCheck === false && <ErrorDescription>학번을 제대로 입력해주세요</ErrorDescription>}\r\n                    {userIDCheck && <CollectDescription>학번이 정상적으로 입력되었습니다</CollectDescription>}\r\n                </Article>\r\n                <Article>\r\n                    <InputTitle>학과 <Require />\r\n                        {openSearch && <span css={css`\r\n                                margin-left: 1em;\r\n                                color: #6b7684;\r\n                                font-family: 'Pretendard-Regular';\r\n                                font-size: 14px;\r\n                                letter-spacing: -0.03em;\r\n                                // text-decoration: underline;\r\n                                // text-underline-offset: 0.2em;\r\n                                cursor: pointer;\r\n                                margin-right: .8em;\r\n                                transition: 0.4s all;\r\n                                float: right;\r\n\r\n                                &:hover {\r\n                                    opacity: 80%;\r\n                                }\r\n                            `} onClick={RevertDepartment}>학과 재설정</span>}\r\n                    </InputTitle>\r\n                    <InputBox type=\"text\" placeholder=\"학과를 입력해주세요 (예시 : 교육학과)\" name=\"학과\" onChange={changeValue} maxLength={10} value={department} disabled={openSearch} tabIndex={tabIndex} />\r\n                    {!openSearch && department.length >= 1 && <SearchDepartment>\r\n                        {classList.map((item, key) => {\r\n                            if (department.length >= 1 && item.slice(0, department.length) === department) {\r\n                                return (\r\n                                    <div css={css`\r\n                                        cursor: pointer;\r\n                                        transition: 0.4s all;\r\n                                        font-family: 'Pretendard-Regular';\r\n                                        @media all and (min-width:768px) and (max-width:1099px) { \r\n                                            span {\r\n                                                font-size: 13px;\r\n                                            }\r\n                                            font-size: 13px;\r\n                                        }; \r\n                                        font-size: 14.5px;\r\n                                        letter-spacing: -0.05em;\r\n                                        &:hover {\r\n                                            opacity: 80%;\r\n                                        }\r\n                                    `} onClick={() => SearchCheck(item)} key={key}>\r\n                                        <span css={css`\r\n                                            color: #4F85E8;\r\n                                            font-family: 'Pretendard-Medium';\r\n                                        `}>{item.slice(0, department.length)}</span>\r\n                                        <span css={css`\r\n                                            color: #8B95A1;\r\n                                        `}>{item.slice(department.length, item.length)}</span>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        })}\r\n                    </SearchDepartment>}\r\n                    {openSearch &&\r\n                        <CollectDescription>\r\n                            학과가 정상적으로 입력되었습니다\r\n                        </CollectDescription>}\r\n\r\n                    {/* {/* <ErrorDescription>학과를 제대로 입력해주세요!</ErrorDescription> */}\r\n                </Article>\r\n                <Article>\r\n                    <InputTitle>이메일 <Require /> </InputTitle>\r\n                    <InputBox type=\"email\" placeholder=\"이메일을 입력해주세요 (예시 : kangnam@likelion.org)\" name=\"이메일\" maxLength={30} onChange={changeValue} value={email} tabIndex={tabIndex} />\r\n                    {userEmailCheck === false && <ErrorDescription>이메일을 제대로 입력해주세요</ErrorDescription>}\r\n                    {userEmailCheck && <CollectDescription>이메일이 정상적으로 입력되었습니다</CollectDescription>}\r\n\r\n                </Article>\r\n                <Article>\r\n                    <InputTitle>연락처 (하이픈을 제외한 숫자만 입력)<Require /> </InputTitle>\r\n                    <InputBox type=\"text\" placeholder=\"연락 가능한 번호를 입력해주세요 (예시 : 01012345678)\" name=\"연락처\" maxLength={11} onChange={changeValue} value={phone} tabIndex={tabIndex} />\r\n                    {userPhoneCheck === false && <ErrorDescription>연락처를 제대로 입력해주세요</ErrorDescription>}\r\n                    {userPhoneCheck && <CollectDescription>연락처가 정상적으로 입력되었습니다</CollectDescription>}\r\n                </Article>\r\n                <Article>\r\n                    <InputTitle>지원 포지션 <Require /> </InputTitle>\r\n                    <PositionBox>\r\n                        <Position name=\"백엔드\" onClick={CheckPosition} state={position}>백엔드</Position>\r\n                        <Position name=\"프론트엔드\" onClick={CheckPosition} state={position}>프론트엔드</Position>\r\n                        <Position name=\"디자인\" onClick={CheckPosition} state={position}>디자인</Position>\r\n                    </PositionBox>\r\n                </Article>\r\n                <Article>\r\n                    <Precautions />\r\n                </Article>\r\n                <Article>\r\n                    <ArgreeBox>\r\n                        <Argree name=\"주의사항\" src={precautions ? checkedBox : checkBox} text=\"위의 주의사항을 확인하였습니다\" onClick={checking} />\r\n                        <Argree name=\"개인정보\" src={privacy ? checkedBox : checkBox} text=\"개인 정보 수집 및 이용에 동의합니다 (모집 종료 후 개인정보는 자동으로 파기됩니다)\" onClick={checking} />\r\n                    </ArgreeBox>\r\n                </Article>\r\n                <ButtonBox>\r\n                    <Button name=\"임시저장\" onClick={isSave}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `지원서 불러오기`}</Button>\r\n                    <Button name=\"제출하기\" disabled={buttonState} onClick={handleClick}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `공통문항 작성하기`}</Button>\r\n                </ButtonBox>\r\n            </Section>\r\n        )\r\n    }\r\n}\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Frontend.tsx",["209","210","211","212","213"],[],"import React, { ChangeEvent } from 'react'\r\nimport { ButtonBox, Section, Button, Require, Article, InputTitle, TextAreaBox, InputBox, Banner, WordLength, Modal, Footer } from '../emotion/component'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch, TestState } from '../../app/store';\r\nimport { saveCommon, saveIndex, view, saveFrontEnd } from '../../features/fetcherSlice';\r\nimport { useEffect, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport tempImg from '../../images/temp.png';\r\nimport completeImg from '../../images/complete.png';\r\nimport Confetti from '../../hooks/Confetti';\r\nimport { currentTime, endTime } from '../time/time';\r\n\r\nexport default function Frontend() {\r\n\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch<AppDispatch>();\r\n\r\n    const [buttonState, setButtonState] = useState(false);\r\n    const [submitCount, setSubmitCount] = useState<number>(0);\r\n    const [tempState, setTempState] = useState<boolean>(false);\r\n    const [temp, setTemp] = useState<boolean>(false);\r\n    const [complete, setComplete] = useState<boolean>(false);\r\n\r\n    const [whyFrontend, setWhyFrontend] = useState('');\r\n    const [usingStack, setUsingStack] = useState('');\r\n    const [teamProject, setTeamProject] = useState('');\r\n    const [achieve, setAchieve] = useState('');\r\n    const [portfolioLink, setPortfolioLink] = useState('');\r\n\r\n    const [name, setName] = useState<string>('');\r\n\r\n\r\n    const userName = useSelector((state: TestState) => state.fetcher.userName);\r\n    const userID = useSelector((state: TestState) => state.fetcher.userID);\r\n    const userPhone = useSelector((state: TestState) => state.fetcher.userPhone);\r\n    const userEmail = useSelector((state: TestState) => state.fetcher.userEmail);\r\n    const userPosition = useSelector((state: TestState) => state.fetcher.userPosition);\r\n    const userDepartment = useSelector((state: TestState) => state.fetcher.userDepartment);\r\n\r\n    const userMotiv = useSelector((state: TestState) => state.fetcher.userMotiv);\r\n    const userHardWork = useSelector((state: TestState) => state.fetcher.userHardWork);\r\n    const userKeyWord = useSelector((state: TestState) => state.fetcher.userKeyWord);\r\n    const userMostDeeplyWork = useSelector((state: TestState) => state.fetcher.userMostDeeplyWork);\r\n\r\n    const userWhyFrontend = useSelector((state: TestState) => state.fetcher.userWhyFrontend);\r\n    const userUsingStack = useSelector((state: TestState) => state.fetcher.userUsingStack);\r\n    const userTeamProject = useSelector((state: TestState) => state.fetcher.userTeamProject);\r\n    const userAchieve = useSelector((state: TestState) => state.fetcher.userAchieve);\r\n    const userPortfolioLink = useSelector((state: TestState) => state.fetcher.userPortfolioLinkFront);\r\n\r\n    useEffect(() => {\r\n        document.body.style.overflow = \"unset\";\r\n        if (!userName && !userID && !userPhone && !userEmail && !userPosition) {\r\n            navigate('/404')\r\n        }\r\n\r\n        if (currentTime > endTime) {\r\n            alert(\"제출 기간이 마감되었습니다!\");\r\n            navigate('/notTime');\r\n        }\r\n\r\n        // 이전 값들을 저장하기 위해서 Redux 사용\r\n\r\n        if (userWhyFrontend) {\r\n            setWhyFrontend(userWhyFrontend)\r\n        }\r\n        if (userUsingStack) {\r\n            setUsingStack(userUsingStack)\r\n        }\r\n        if (userTeamProject) {\r\n            setTeamProject(userTeamProject)\r\n        }\r\n        if (userAchieve) {\r\n            setAchieve(userAchieve)\r\n        }\r\n        if (userPortfolioLink) {\r\n            setPortfolioLink(userPortfolioLink)\r\n        }\r\n\r\n        if (userName) {\r\n            setName(userName)\r\n        }\r\n    }, [])\r\n\r\n    useMemo(() => {\r\n\r\n        // 프론트엔드 파트로 들어왔을 때는 공통 질문이 하나라도 작성된 상태이기 때문에 바로 임시저장이 가능함\r\n        if (userMotiv || userHardWork || userKeyWord || userMostDeeplyWork) {\r\n            setTempState(false);\r\n        } else {\r\n            setTempState(true);\r\n        }\r\n\r\n        if (whyFrontend && usingStack && teamProject && achieve) {\r\n            setButtonState(false)\r\n        } else {\r\n            setButtonState(true)\r\n        }\r\n        if (submitCount >= 1) {\r\n            setButtonState(true);\r\n        }\r\n    }, [whyFrontend, usingStack, teamProject, achieve, submitCount])\r\n\r\n\r\n    const Back = () => {\r\n        setSubmitCount((prev) => (prev + 1))\r\n        dispatch(saveFrontEnd({ userWhyFrontend: whyFrontend, userUsingStack: usingStack, userTeamProject: teamProject, userAchieve: achieve, userPortfolioLinkFront: portfolioLink }));\r\n        navigate('/common');\r\n    }\r\n\r\n\r\n    const TempSave = () => {\r\n        setSubmitCount((prev) => (prev + 1));\r\n        if (userPosition === \"프론트엔드\") {\r\n            axios.post('/frontendApplication', JSON.stringify({\r\n                department: userDepartment,\r\n                whyFrontend: whyFrontend,\r\n                email: userEmail,\r\n                hardWork: userHardWork,\r\n                usingStack: usingStack,\r\n                keyWord: userKeyWord,\r\n                mostDeeplyWork: userMostDeeplyWork,\r\n                motive: userMotiv,\r\n                name: userName,\r\n                passOrNot: false,\r\n                sendMail: false,\r\n                phoneNumber: userPhone,\r\n                portfolioFile: \"\",\r\n                portfolioLink: portfolioLink,\r\n                sid: userID,\r\n                teamProject: teamProject,\r\n                achieve: achieve,\r\n                submissionStatus: false,\r\n            }),\r\n                {\r\n                    headers: {\r\n                        \"Content-type\": \"application/json\",\r\n                    }\r\n                }\r\n            )\r\n                .then((res) => {\r\n                    setTemp(!temp);\r\n                    document.body.style.overflow = \"hidden\";\r\n                })\r\n        }\r\n    }\r\n\r\n    const OpenSubmit = () => {\r\n        setComplete(!complete);\r\n    }\r\n\r\n    const Submit = () => {\r\n\r\n        const time = new Date();\r\n\r\n        if (time > endTime) {\r\n            alert(\"제출 기간이 마감되었습니다!\");\r\n            navigate('/notTime');\r\n        }\r\n\r\n        else if (window.confirm(\"최중 제출을 하면 수정이 불가해요, 제출하시겠어요?\")) {\r\n            setSubmitCount((prev) => (prev + 1))\r\n            axios.post('/frontendApplication', JSON.stringify({\r\n                department: userDepartment,\r\n                whyFrontend: whyFrontend,\r\n                email: userEmail,\r\n                hardWork: userHardWork,\r\n                usingStack: usingStack,\r\n                keyWord: userKeyWord,\r\n                mostDeeplyWork: userMostDeeplyWork,\r\n                motive: userMotiv,\r\n                name: userName,\r\n                passOrNot: false,\r\n                sendMail: false,\r\n                phoneNumber: userPhone,\r\n                portfolioFile: \"\",\r\n                portfolioLink: portfolioLink,\r\n                sid: userID,\r\n                teamProject: teamProject,\r\n                achieve: achieve,\r\n                submissionStatus: true,\r\n            }),\r\n                {\r\n                    headers: {\r\n                        \"Content-type\": \"application/json\",\r\n                    }\r\n                }\r\n            )\r\n                .then((res) => {\r\n                    dispatch(saveFrontEnd({\r\n                        userWhyFrontend: '',\r\n                        userUsingStack: '',\r\n                        userAchieve: '',\r\n                        userPortfolioLinkFront: '',\r\n                        userTeamProject: '',\r\n                    }));\r\n                    dispatch(saveCommon({\r\n                        userMotiv: '',\r\n                        userHardWork: '',\r\n                        userKeyWord: '',\r\n                        userMostDeeplyWork: '',\r\n                    }))\r\n                    dispatch(saveIndex({\r\n                        userName: '',\r\n                        userID: '',\r\n                        userDepartment: '',\r\n                        userEmail: '',\r\n                        userPhone: '',\r\n                        userPosition: '',\r\n                    }))\r\n                    setComplete(!complete)\r\n                    document.body.style.overflow = \"hidden\";\r\n                })\r\n        }\r\n    }\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement> | ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.name === \"동기\") {\r\n            if (event.target.value.length <= 1000) {\r\n                setWhyFrontend(event.target.value);\r\n            }\r\n        }\r\n\r\n        if (event.target.name === \"프레임워크\") {\r\n            if (event.target.value.length <= 1000) {\r\n\r\n                setUsingStack(event.target.value);\r\n            }\r\n        }\r\n\r\n        if (event.target.name === \"경험\") {\r\n            if (event.target.value.length <= 1000) {\r\n                setTeamProject(event.target.value);\r\n            }\r\n        }\r\n\r\n        if (event.target.name === \"성장\") {\r\n            if (event.target.value.length <= 1000) {\r\n                setAchieve(event.target.value);\r\n            }\r\n        }\r\n\r\n        if (event.target.name === \"포트폴리오\") {\r\n            setPortfolioLink(event.target.value);\r\n        }\r\n    }\r\n\r\n    const TempBack = async () => {\r\n        setTemp(false);\r\n        setSubmitCount(0);\r\n        setTempState(false);\r\n        setButtonState(false);\r\n        document.body.style.overflow = \"unset\";\r\n    }\r\n\r\n    /* 처음에는 임시 저장에서 메인화면으로 가는 용도로 만들었지만, 최종 제출 후 redux를 초기화하는 로직이 동일해 최종 제출 후 홈으로 갈 때도 같이 사용*/\r\n    const TempHome = async () => {\r\n        await dispatch(saveFrontEnd({\r\n            userWhyFrontend: '',\r\n            userUsingStack: '',\r\n            userAchieve: '',\r\n            userPortfolioLinkFront: '',\r\n            userTeamProject: '',\r\n        }));\r\n        await dispatch(saveCommon({\r\n            userMotiv: '',\r\n            userHardWork: '',\r\n            userKeyWord: '',\r\n            userMostDeeplyWork: '',\r\n        }))\r\n        await dispatch(saveIndex({\r\n            userName: '',\r\n            userID: '',\r\n            userDepartment: '',\r\n            userEmail: '',\r\n            userPhone: '',\r\n            userPosition: '',\r\n        }))\r\n        await navigate('/');\r\n    }\r\n\r\n    return (\r\n        <Section>\r\n            {complete && <Confetti />}\r\n            {complete ?\r\n                <Modal text={`${name}님의 소중한 지원서가 정상적으로 제출되었어요!`} imgSrc={completeImg} alt=\"최종제출\">\r\n                    <Button name=\"제출하기\" onClick={TempHome}>메인 화면으로 이동</Button>\r\n                </Modal>\r\n                : null\r\n            }\r\n            {temp ?\r\n                <Modal text=\"지원하신 학번으로 지원서가 저장이 되었어요!\" imgSrc={tempImg}>\r\n                    <Button name=\"임시저장\" onClick={TempHome}>메인 화면으로 이동</Button>\r\n                    <Button name=\"제출하기\" onClick={TempBack}>이어서 작성하기</Button>\r\n                </Modal>\r\n                : null\r\n            }\r\n            <Banner />\r\n            <Article>\r\n                <InputTitle>프론트엔드 트랙을 선택하게 된 이유를 구체적으로 서술해주세요<Require /> </InputTitle>\r\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"동기\" onChange={handleChange} value={whyFrontend} />\r\n                <WordLength>{whyFrontend.length}</WordLength>\r\n            </Article>\r\n            <Article>\r\n                <InputTitle>프론트엔드 개발과 관련된 프레임워크나 HTML, CSS, JavaScript 등의 언어를 사용해보신 경험에 대해 구체적으로 적어주세요<Require /> </InputTitle>\r\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"프레임워크\" onChange={handleChange} value={usingStack} />\r\n                <WordLength>{usingStack.length}</WordLength>\r\n            </Article>\r\n            <Article>\r\n                <InputTitle>팀 활동이나 프로젝트를 경험해본 내용과 이를 통해 자신의 성장 경험에 대해서 서술해주세요<Require /> </InputTitle>\r\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"경험\" onChange={handleChange} value={teamProject} />\r\n                <WordLength>{teamProject.length}</WordLength>\r\n            </Article>\r\n            <Article>\r\n                <InputTitle>멋사 프론트엔드 아기사자로 활동하면서 얻어 가고 싶은 것은 무엇인가요?<Require /> </InputTitle>\r\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"성장\" onChange={handleChange} value={achieve} />\r\n                <WordLength>{achieve.length}</WordLength>\r\n            </Article>\r\n            <Article>\r\n                <InputTitle>깃허브 또는 포트폴리오 링크가 있다면 첨부해주세요 </InputTitle>\r\n                <InputBox type=\"text\" placeholder=\"https 또는 http를 포함하는 링크 전체를 입력해주세요\" maxLength={200} name=\"포트폴리오\" onChange={handleChange} value={portfolioLink} />\r\n            </Article>\r\n            <ButtonBox>\r\n                <Button name=\"임시저장\" onClick={TempSave} disabled={tempState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `임시저장`}</Button>\r\n                <Button name=\"제출하기\" onClick={Back}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `뒤로가기`}</Button>\r\n                <Button name=\"제출하기\" onClick={Submit} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `제출하기`}</Button>\r\n            </ButtonBox>\r\n        </Section>\r\n    )\r\n}","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\Index.tsx",["214","215"],[],"import React, { useState } from 'react'\r\nimport { Button, Img, Input, LoginBox, Section } from './emotion/component'\r\nimport person from '../../images/logo.png';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Loading } from '../emotion/component';\r\nimport axios from 'axios';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TestState } from '../../app/store';\r\nimport { saveAdminState } from '../../features/fetcherSlice';\r\n\r\nexport default function Index() {\r\n\r\n    const navigate = useNavigate();\r\n    const [id, setId] = useState('');\r\n    const [pw, setPw] = useState('');\r\n    const dispatch = useDispatch();\r\n    const adminState = useSelector((state: TestState) => (state.fetcher.adminState));\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.name === \"아이디\") {\r\n            setId(event.target.value);\r\n        }\r\n\r\n        if (event.target.name === \"비밀번호\") {\r\n            setPw(event.target.value);\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        axios.post(`/adminLogin?id=${id}&pw=${pw}`)\r\n            .then(async (res) => {\r\n                console.log(res);\r\n                if (res.data === true) {\r\n                    await dispatch(saveAdminState({ adminState: true }));\r\n                    await navigate('/admin/main');\r\n                } else {\r\n                    alert(\"잘못된 접근입니다!\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                alert(error!);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <Section>\r\n            <LoginBox>\r\n                <Img src={person} />\r\n                <Input type=\"text\" placeholder='아이디를 입력해주세요' name=\"아이디\" onChange={handleChange} value={id} />\r\n                <Input type=\"password\" placeholder='비밀번호를 입력해주세요' name=\"비밀번호\" onChange={handleChange} value={pw} />\r\n                <Button onClick={handleClick}>강남멋사 관리자 로그인</Button>\r\n            </LoginBox>\r\n        </Section>\r\n    )\r\n}\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Design.tsx",["216","217","218","219"],[],"import React, { ChangeEvent } from 'react'\r\nimport { ButtonBox, Section, Button, Require, Article, InputTitle, TextAreaBox, InputBox, Banner, WordLength, Modal, Footer } from '../emotion/component'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch, TestState } from '../../app/store';\r\nimport { saveCommon, saveIndex, view, saveDesign } from '../../features/fetcherSlice';\r\nimport { useEffect, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport tempImg from '../../images/temp.png';\r\nimport completeImg from '../../images/complete.png';\r\nimport Confetti from '../../hooks/Confetti';\r\nimport { currentTime, endTime } from '../time/time';\r\n\r\n\r\nexport default function Design() {\r\n\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const [whyDesign, setWhyDesign] = useState('');\r\n    const [toolExperience, setToolExperience] = useState('');\r\n    const [teamworkExperience, setTeamworkExperience] = useState('');\r\n    const [designGrowth, setDesignGrowth] = useState('');\r\n    const [buttonState, setButtonState] = useState(false);\r\n    const [portfolioLink, setPortfolioLink] = useState('');\r\n    const [submitCount, setSubmitCount] = useState<number>(0);\r\n    const [tempState, setTempState] = useState<boolean>(false);\r\n    const [temp, setTemp] = useState<boolean>(false);\r\n    const [complete, setComplete] = useState<boolean>(false);\r\n\r\n    const userName = useSelector((state: TestState) => state.fetcher.userName);\r\n    const userID = useSelector((state: TestState) => state.fetcher.userID);\r\n    const userPhone = useSelector((state: TestState) => state.fetcher.userPhone);\r\n    const userEmail = useSelector((state: TestState) => state.fetcher.userEmail);\r\n    const userPosition = useSelector((state: TestState) => state.fetcher.userPosition);\r\n    const userDepartment = useSelector((state: TestState) => state.fetcher.userDepartment);\r\n\r\n    const userMotiv = useSelector((state: TestState) => state.fetcher.userMotiv);\r\n    const userHardWork = useSelector((state: TestState) => state.fetcher.userHardWork);\r\n    const userKeyWord = useSelector((state: TestState) => state.fetcher.userKeyWord);\r\n    const userMostDeeplyWork = useSelector((state: TestState) => state.fetcher.userMostDeeplyWork);\r\n\r\n    const userWhyDesign = useSelector((state: TestState) => state.fetcher.userWhyDesign);\r\n    const userToolExperience = useSelector((state: TestState) => state.fetcher.userToolExperience);\r\n    const userTeamworkExperience = useSelector((state: TestState) => state.fetcher.userTeamworkExperience);\r\n    const userDesignGrowth = useSelector((state: TestState) => state.fetcher.userDesignGrowth);\r\n    const userPortfolioLink = useSelector((state: TestState) => state.fetcher.userPortfolioLinkDesign);\r\n\r\n    const [name, setName] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        document.body.style.overflow = \"unset\";\r\n        if (!userName && !userID && !userPhone && !userEmail && !userPosition) {\r\n            navigate('/404')\r\n        }\r\n\r\n        if (currentTime > endTime) {\r\n            alert(\"제출 기간이 마감되었습니다!\");\r\n            navigate('/notTime');\r\n        }\r\n\r\n        // 이전 값들을 저장하기 위해서 Redux 사용\r\n        if (userWhyDesign) {\r\n            setWhyDesign(userWhyDesign);\r\n        }\r\n\r\n        if (userToolExperience) {\r\n            setToolExperience(userToolExperience);\r\n        }\r\n\r\n        if (userTeamworkExperience) {\r\n            setTeamworkExperience(userTeamworkExperience);\r\n        }\r\n\r\n        if (userDesignGrowth) {\r\n            setDesignGrowth(userDesignGrowth);\r\n        }\r\n\r\n        if (userPortfolioLink) {\r\n            setPortfolioLink(userPortfolioLink)\r\n        }\r\n\r\n        if (userName) {\r\n            setName(userName)\r\n        }\r\n\r\n    }, [])\r\n\r\n    useMemo(() => {\r\n        // 디자인 파트로 들어왔을 때는 공통 질문이 하나라도 작성된 상태이기 때문에 바로 임시저장이 가능함\r\n        if (userMotiv || userHardWork || userKeyWord || userMostDeeplyWork) {\r\n            setTempState(false);\r\n        } else {\r\n            setTempState(true);\r\n        }\r\n\r\n        if (whyDesign && toolExperience && teamworkExperience && designGrowth) {\r\n            setButtonState(false)\r\n        } else {\r\n            setButtonState(true)\r\n        }\r\n        if (submitCount >= 1) {\r\n            setButtonState(true);\r\n        }\r\n    }, [whyDesign, toolExperience, teamworkExperience, designGrowth, submitCount])\r\n\r\n\r\n    const Back = () => {\r\n        setSubmitCount((prev) => (prev + 1))\r\n        dispatch(saveDesign({ userWhyDesign: whyDesign, userToolExperience: toolExperience, userTeamworkExperience: teamworkExperience, userDesignGrowth: designGrowth, userPortfolioLinkDesign: portfolioLink }));\r\n        navigate('/common');\r\n    }\r\n\r\n    const TempSave = () => {\r\n        setSubmitCount((prev) => (prev + 1))\r\n        axios.post('/designApplication', JSON.stringify({\r\n            department: userDepartment,\r\n            whyDesign: whyDesign,\r\n            email: userEmail,\r\n            hardWork: userHardWork,\r\n            toolExperience: toolExperience,\r\n            keyWord: userKeyWord,\r\n            mostDeeplyWork: userMostDeeplyWork,\r\n            motive: userMotiv,\r\n            name: userName,\r\n            passOrNot: false,\r\n            sendMail: false,\r\n            phoneNumber: userPhone,\r\n            portfolioFile: \"\",\r\n            portfolioLink: portfolioLink,\r\n            sid: userID,\r\n            teamworkExperience: teamworkExperience,\r\n            designGrowth: designGrowth,\r\n            submissionStatus: false,\r\n        }),\r\n            {\r\n                headers: {\r\n                    \"Content-type\": \"application/json\",\r\n                }\r\n            }\r\n        )\r\n            .then((res) => {\r\n                setTemp(!temp);\r\n                document.body.style.overflow = \"hidden\";\r\n            })\r\n    }\r\n\r\n    const Submit = async () => {\r\n\r\n        const time = new Date();\r\n\r\n        if (time > endTime) {\r\n            alert(\"제출 기간이 마감되었습니다!\");\r\n            navigate('/notTime');\r\n        }\r\n        else if (window.confirm(\"최중 제출을 하면 수정이 불가해요, 제출하시겠어요?\")) {\r\n            setSubmitCount((prev) => (prev + 1))\r\n            axios.post('/designApplication', JSON.stringify({\r\n                department: userDepartment,\r\n                whyDesign: whyDesign,\r\n                email: userEmail,\r\n                hardWork: userHardWork,\r\n                toolExperience: toolExperience,\r\n                keyWord: userKeyWord,\r\n                mostDeeplyWork: userMostDeeplyWork,\r\n                motive: userMotiv,\r\n                name: userName,\r\n                passOrNot: false,\r\n                sendMail: false,\r\n                phoneNumber: userPhone,\r\n                portfolioFile: \"\",\r\n                portfolioLink: portfolioLink,\r\n                sid: userID,\r\n                teamworkExperience: teamworkExperience,\r\n                designGrowth: designGrowth,\r\n                submissionStatus: true,\r\n            }),\r\n                {\r\n                    headers: {\r\n                        \"Content-type\": \"application/json\",\r\n                    }\r\n                }\r\n            )\r\n                .then((res) => {\r\n                    dispatch(saveDesign({\r\n                        userWhyDesign: '',\r\n                        userToolExperience: '',\r\n                        userTeamworkExperience: '',\r\n                        userPortfolioLinkDesign: '',\r\n                        userDesignGrowth: '',\r\n                    }));\r\n                    dispatch(saveCommon({\r\n                        userMotiv: '',\r\n                        userHardWork: '',\r\n                        userKeyWord: '',\r\n                        userMostDeeplyWork: '',\r\n                    }))\r\n                    dispatch(saveIndex({\r\n                        userName: '',\r\n                        userID: '',\r\n                        userDepartment: '',\r\n                        userEmail: '',\r\n                        userPhone: '',\r\n                        userPosition: '',\r\n                    }))\r\n                    setComplete(!complete)\r\n                    document.body.style.overflow = \"hidden\";\r\n                })\r\n        }\r\n    }\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement> | ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.name === \"동기\") {\r\n            if (event.target.value.length <= 1000) {\r\n                setWhyDesign(event.target.value);\r\n            }\r\n        }\r\n\r\n        if (event.target.name === \"경험\") {\r\n            if (event.target.value.length <= 1000) {\r\n                setToolExperience(event.target.value);\r\n            }\r\n        }\r\n\r\n        if (event.target.name === \"팀워크\") {\r\n            if (event.target.value.length <= 1000) {\r\n                setTeamworkExperience(event.target.value);\r\n            }\r\n        }\r\n\r\n        if (event.target.name === \"성장\") {\r\n            if (event.target.value.length <= 1000) {\r\n                setDesignGrowth(event.target.value);\r\n            }\r\n        }\r\n\r\n        if (event.target.name === \"포트폴리오\") {\r\n            setPortfolioLink(event.target.value);\r\n        }\r\n    }\r\n\r\n    const TempBack = async () => {\r\n        setTemp(false);\r\n        setSubmitCount(0);\r\n        setTempState(false);\r\n        setButtonState(false);\r\n        document.body.style.overflow = \"unset\";\r\n    }\r\n\r\n    /* 처음에는 임시 저장에서 메인화면으로 가는 용도로 만들었지만, 최종 제출 후 redux를 초기화하는 로직이 동일해 최종 제출 후 홈으로 갈 때도 같이 사용*/\r\n    const TempHome = async () => {\r\n        await dispatch(saveDesign({\r\n            userWhyDesign: '',\r\n            userToolExperience: '',\r\n            userTeamworkExperience: '',\r\n            userPortfolioLinkDesign: '',\r\n            userDesignGrowth: '',\r\n        }));\r\n        await dispatch(saveCommon({\r\n            userMotiv: '',\r\n            userHardWork: '',\r\n            userKeyWord: '',\r\n            userMostDeeplyWork: '',\r\n        }))\r\n        await dispatch(saveIndex({\r\n            userName: '',\r\n            userID: '',\r\n            userDepartment: '',\r\n            userEmail: '',\r\n            userPhone: '',\r\n            userPosition: '',\r\n        }))\r\n        await navigate('/');\r\n    }\r\n\r\n    return (\r\n        <Section>\r\n            {complete && <Confetti />}\r\n            {complete ?\r\n                <Modal text={`${name}님의 소중한 지원서가 정상적으로 제출되었어요!`} imgSrc={completeImg} alt=\"최종제출\">\r\n                    <Button name=\"제출하기\" onClick={TempHome}>메인 화면으로 이동</Button>\r\n                </Modal>\r\n                : null\r\n            }\r\n            {temp ?\r\n                <Modal text=\"지원하신 학번으로 지원서가 저장이 되었어요!\" imgSrc={tempImg}>\r\n                    <Button name=\"임시저장\" onClick={TempHome}>메인 화면으로 이동</Button>\r\n                    <Button name=\"제출하기\" onClick={TempBack}>이어서 작성하기</Button>\r\n                </Modal>\r\n                : null\r\n            }\r\n            <Banner />\r\n            <Article>\r\n                <InputTitle>디자인 트랙을 선택하게 된 이유를 구체적으로 서술해주세요<Require /> </InputTitle>\r\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"동기\" onChange={handleChange} value={whyDesign} />\r\n                <WordLength>{whyDesign.length}</WordLength>\r\n            </Article>\r\n            <Article>\r\n                <InputTitle>피그마나 Adobe XD와 같은 목업 툴에 관련된 경험을 해본 적이 있다면 그 경험에 대해 자세히 설명을 해주세요<Require /> </InputTitle>\r\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"경험\" onChange={handleChange} value={toolExperience} />\r\n                <WordLength>{toolExperience.length}</WordLength>\r\n            </Article>\r\n            <Article>\r\n                <InputTitle>본인이 협업과 팀워크를 진행해 보았던 경험과, 그 경험을 멋쟁이 사자처럼 대학에서 어떻게 적용시킬 수 있는지 알려주세요<Require /> </InputTitle>\r\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"팀워크\" onChange={handleChange} value={teamworkExperience} />\r\n                <WordLength>{teamworkExperience.length}</WordLength>\r\n            </Article>\r\n            <Article>\r\n                <InputTitle>디자인 트랙을 통해 어떠한 성장을 희망하시는지 구체적으로 서술해주세요<Require /> </InputTitle>\r\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"성장\" onChange={handleChange} value={designGrowth} />\r\n                <WordLength>{designGrowth.length}</WordLength>\r\n            </Article>\r\n            <Article>\r\n                <InputTitle>포트폴리오 링크가 있다면 첨부해주세요 </InputTitle>\r\n                <InputBox type=\"text\" placeholder=\"포트폴리오 링크를 입력해주세요\" maxLength={200} name=\"포트폴리오\" onChange={handleChange} value={portfolioLink} />\r\n            </Article>\r\n            <ButtonBox>\r\n                <Button name=\"임시저장\" onClick={TempSave} disabled={tempState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `임시저장`}</Button>\r\n                <Button name=\"제출하기\" onClick={Back}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `뒤로가기`}</Button>\r\n                <Button name=\"제출하기\" onClick={Submit} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `제출하기`}</Button>\r\n            </ButtonBox>\r\n        </Section>\r\n    )\r\n}\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\partition\\Pass.tsx",["220","221","222","223","224","225","226","227","228","229","230","231"],[],"/** @jsxImportSource @emotion/react */\r\n\r\nimport React from 'react'\r\nimport { Content, List, NotData, PassMailSend, PassUser, PassUserContent, Section, onModalType } from '../emotion/component'\r\nimport { Position, PositionBox } from '../emotion/component';\r\nimport { frontendDummy, backendDummy, designDummy } from './dummy';\r\nimport { useState } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Button, ButtonBox, Loading, Modal, ModalInput, Quit } from '../../emotion/component';\r\nimport { emailType, mailUserType, userType } from './Type';\r\nimport Header from '../common/Header';\r\nimport { css, keyframes } from \"@emotion/react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TestState } from '../../../app/store';\r\nimport { renderNewList, saveModalState, updatePassMailList } from '../../../features/fetcherSlice';\r\nimport Detail from '../detail/Detail';\r\nimport checkBox from '../images/checkBox.svg';\r\nimport checkedBox from '../images/checkedBox.svg';\r\nimport mailLoading from '../../../images/mailLoading.gif';\r\n\r\nexport default function Pass() {\r\n\r\n\r\n    const [position, setPosition] = useState<string>('백엔드');\r\n    const [frontend, setFrontend] = useState<[]>([]);\r\n    const [backend, setBackend] = useState<[]>([]);\r\n    const [design, setDesign] = useState<[]>([]);\r\n\r\n    const [mailState, setMailState] = useState<boolean>(false);\r\n    const [pendingState, setPendingState] = useState<boolean>(false);\r\n    const [mailMessage, setMailMessage] = useState<string>(\"메일 전송 중입니다..\");\r\n    const [mailButtonState, setMailButtonState] = useState<boolean>(false);\r\n    const [inputMail, setInputMail] = useState<boolean>(true);\r\n\r\n    const [time, setTime] = useState<string>('');\r\n    const [place, setPlace] = useState<string>('');\r\n    const [playTime, setPlayTime] = useState<string>('');\r\n\r\n    const [backendState, setBackendState] = useState<boolean | null>(true);\r\n    const [frontendState, setFrontendState] = useState<boolean | null>(true);\r\n    const [designState, setDesignState] = useState<boolean | null>(true);\r\n    const [sid, setSid] = useState<string>('');\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const userModalState = useSelector((state: TestState) => state.fetcher.userModalState);\r\n    const adminState = useSelector((state: TestState) => (state.fetcher.adminState));\r\n    const passMailList = useSelector((state: TestState) => (state.fetcher.passMailList));\r\n    const newList = useSelector((state: TestState) => (state.fetcher.newList));\r\n\r\n    useEffect(() => {\r\n        if (adminState === false) {\r\n            navigate('/error');\r\n        }\r\n\r\n        dispatch(saveModalState(false));\r\n        axios.get('/backendApplication/getApplicationWithPassOrNotAndSubmission?passOrNot=true&submission=true')\r\n            .then((res) => {\r\n                setBackend(() => {\r\n                    return res.data\r\n                });\r\n\r\n                if (res.data.length < 1) {\r\n                    setBackendState(false);\r\n                } else {\r\n                    setBackendState(null);\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(updatePassMailList([]));\r\n        if (position === \"백엔드\") {\r\n            axios.get('/backendApplication/getApplicationWithPassOrNotAndSubmission?passOrNot=true&submission=true')\r\n                .then((res) => {\r\n                    setBackend(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setBackendState(false);\r\n                    } else {\r\n                        setBackendState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n        if (position === \"프론트엔드\") {\r\n            axios.get('/frontendApplication/getApplicationsWithPassOrNotAndSubmission?passOrNot=true&submission=true')\r\n                .then((res) => {\r\n                    setFrontend(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setFrontendState(false);\r\n                    } else {\r\n                        setFrontendState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n        if (position === \"디자인\") {\r\n            axios.get('/designApplication/getApplicationsWithPassOrNotAndSubmission?passOrNot=true&submission=true')\r\n                .then((res) => {\r\n                    setDesign(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setDesignState(false);\r\n                    } else {\r\n                        setDesignState(null);\r\n                    }\r\n                })\r\n        }\r\n    }, [userModalState, newList])\r\n\r\n    function CheckPosition(event: React.MouseEvent<HTMLButtonElement>): void {\r\n        const name = (event.target as HTMLButtonElement).name;\r\n        dispatch(updatePassMailList([]));\r\n        setPosition(name);\r\n\r\n        if (name === \"백엔드\") {\r\n            axios.get('/backendApplication/getApplicationWithPassOrNotAndSubmission?passOrNot=true&submission=true')\r\n                .then((res) => {\r\n                    setBackend(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setBackendState(false);\r\n                    } else {\r\n                        setBackendState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n        if (name === \"프론트엔드\") {\r\n            axios.get('/frontendApplication/getApplicationsWithPassOrNotAndSubmission?passOrNot=true&submission=true')\r\n                .then((res) => {\r\n                    setFrontend(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setFrontendState(false);\r\n                    } else {\r\n                        setFrontendState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n        if (name === \"디자인\") {\r\n            axios.get('/designApplication/getApplicationsWithPassOrNotAndSubmission?passOrNot=true&submission=true')\r\n                .then((res) => {\r\n                    setDesign(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setDesignState(false);\r\n                    } else {\r\n                        setDesignState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    const onModal: onModalType = async (userID: string) => {\r\n        await dispatch(updatePassMailList([]));\r\n        await setSid(userID);\r\n        await dispatch(saveModalState({ userModalState: true }))\r\n    }\r\n\r\n    const Send = async () => {\r\n        if (window.confirm(\"정말로 메일 전송을 하시겠어요?\")) {\r\n            if (passMailList.length >= 1) {\r\n                setMailState(!mailState);\r\n            } else if (passMailList.length === 0) {\r\n                alert(\"먼저 리스트를 체크해주세요!\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const SendMail = async () => {\r\n        setMailState(false);\r\n        setPendingState(!pendingState);\r\n        await passMailList.map(async (data: emailType) => {\r\n            await axios.post(`/emailSender/sendAcceptMail`, JSON.stringify([{\r\n                email: data.email,\r\n                interviewDate: time,\r\n                interviewLocation: place,\r\n                interviewTime: playTime,\r\n                name: data.name,\r\n            }]),\r\n                {\r\n                    headers: {\r\n                        \"Content-type\": \"application/json\",\r\n                    }\r\n                })\r\n                .then(async (res) => {\r\n                    if (position === \"디자인\") {\r\n                        await passMailList.map(async (data: emailType) => {\r\n                            axios.put(`/designApplication/changeSendMail?sid=${data.id}`)\r\n                                .then(async (res) => {\r\n                                    await setMailMessage(`${data.name}님에게 합격 메일 전송 완료!`);\r\n                                    await setMailButtonState(true);\r\n                                })\r\n                                .catch(async (error) => {\r\n                                    await setMailMessage(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                    alert(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                    await setMailButtonState(true);\r\n                                })\r\n                        })\r\n                    } else if (position === \"프론트엔드\") {\r\n                        await passMailList.map(async (data: emailType) => {\r\n                            axios.put(`/frontendApplication/changeSendMail?sid=${data.id}`)\r\n                                .then(async (res) => {\r\n                                    await setMailMessage(`${data.name}님에게 합격 메일 전송 완료!`);\r\n                                    await setMailButtonState(true);\r\n                                })\r\n                                .catch(async (error) => {\r\n                                    await setMailMessage(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                    alert(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                    await setMailButtonState(true);\r\n                                })\r\n                        })\r\n\r\n                    } else if (position === \"백엔드\") {\r\n                        await passMailList.map(async (data: emailType) => {\r\n                            axios.put(`/backendApplication/changeSendMail?sid=${data.id}`)\r\n                                .then(async (res) => {\r\n                                    await setMailMessage(`${data.name}님에게 합격 메일 전송 완료!`);\r\n                                    await setMailButtonState(true);\r\n                                })\r\n                                .catch(async (error) => {\r\n                                    await setMailMessage(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                    alert(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                    await setMailButtonState(true);\r\n                                })\r\n                        })\r\n                    }\r\n                })\r\n                .catch(async (error) => {\r\n                    alert(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                    await setMailMessage(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                    await setMailButtonState(true);\r\n                })\r\n        })\r\n    }\r\n\r\n    // 메일 전송이 완료되면, 이 버튼을 통해 모달을 종료합니다.\r\n    const ClearMail = async () => {\r\n        await setMailState(false);\r\n        await setPendingState(false);\r\n        await setTime(\"\");\r\n        await setPlayTime(\"\");\r\n        await setPlace(\"\");\r\n        await setMailButtonState(false);\r\n        await setMailMessage(`메일 전송 중입니다..`);\r\n        await dispatch(renderNewList({ newList: !newList }))\r\n    }\r\n\r\n    const ChangeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.name === \"인터뷰_시간\") {\r\n            setTime(event.target.value);\r\n        }\r\n        if (event.target.name === \"인터뷰_장소\") {\r\n            setPlace(event.target.value);\r\n        }\r\n\r\n        if (event.target.name === \"인터뷰_소요시간\") {\r\n            setPlayTime(event.target.value);\r\n        }\r\n\r\n        // time, place, playTime에 정보가 들어와야 버튼이 활성화 됩니다!\r\n        if (time && place && playTime) {\r\n            setInputMail(false);\r\n        } else {\r\n            setInputMail(true);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {pendingState ?\r\n                <Modal text={mailMessage} imgSrc={mailLoading} alt=\"최종제출\">\r\n                    {mailButtonState && <Button name=\"제출하기\" onClick={ClearMail}>\r\n                        돌아가기\r\n                    </Button>}\r\n                </Modal>\r\n                : null\r\n            }\r\n            {mailState ?\r\n                <Modal text=\"면접에 관한 내용을 시간, 장소, 소요시간으로 자세히 입력해주세요\" alt=\"메일_합격\">\r\n                    <ButtonBox alt=\"임시저장_모달\">\r\n                        <div css={css`\r\n                                display: flex;\r\n                                flex-direction: column;\r\n                                width: 100%;\r\n                                align-items: center;\r\n                                row-gap: 1em;\r\n                            `}>\r\n                            <PassUser>\r\n                                {passMailList.map((item: mailUserType) => {\r\n                                    return (\r\n                                        <PassUserContent>\r\n                                            {item.name}\r\n                                        </PassUserContent>\r\n                                    )\r\n                                })}\r\n                            </PassUser>\r\n                            <ModalInput type=\"text\" placeholder=\"인터뷰 시간을 입력해주세요 (예시 : 2023년 01월 20일)\" name=\"인터뷰_시간\" onChange={ChangeValue} value={time} />\r\n                            <ModalInput type=\"text\" placeholder=\"인터뷰 장소를 입력해주세요 (예시 : 이공관 B106호)\" name=\"인터뷰_장소\" onChange={ChangeValue} value={place} />\r\n                            <ModalInput type=\"text\" placeholder=\"인터뷰 소요 시간을 입력해주세요 (예시 : 30분 또는 15분 ~ 30분 소요)\" name=\"인터뷰_소요시간\" maxLength={9} onChange={ChangeValue} value={playTime} />\r\n                            <div css={css`\r\n                                margin-top: 1em;\r\n                                display: flex;\r\n                                width: 100%;\r\n                                align-items: center;\r\n                                column-gap: 1em;\r\n                                align-items: center;\r\n                                justify-content: center;\r\n                            `}>\r\n                                <Button name=\"임시저장\" onClick={ClearMail}>닫기</Button>\r\n                                <Button name=\"제출하기\" onClick={SendMail} disabled={inputMail}>메일 전송</Button>\r\n                            </div>\r\n                        </div>\r\n                    </ButtonBox>\r\n                </Modal>\r\n                : null\r\n            }\r\n            {\r\n                !userModalState ?\r\n                    <Content>\r\n                        <PositionBox>\r\n                            <Position name=\"백엔드\" onClick={CheckPosition} state={position}>백엔드</Position>\r\n                            <Position name=\"프론트엔드\" onClick={CheckPosition} state={position}>프론트엔드</Position>\r\n                            <Position name=\"디자인\" onClick={CheckPosition} state={position}>디자인</Position>\r\n                        </PositionBox >\r\n                        <PassMailSend position={position} onClick={Send} />\r\n                        <List check=\"전송 체크\" name=\"이름\" position=\"트랙\" department=\"학과\" id=\"학번\" email=\"이메일\" />\r\n                        {/* 백엔드 로직 */}\r\n                        {position === '백엔드' && backendState && <Loading />}\r\n                        {\r\n                            position === '백엔드' && backend.length >= 1 && backend.map((item: userType) => {\r\n                                return (\r\n                                    <List key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} mailState={item.sendMail} onClick={() => onModal(item.sid)} />\r\n                                )\r\n                            })\r\n                        }\r\n                        {position === '백엔드' && backendState === false && <NotData />}\r\n\r\n                        {/* 프론트엔드 로직 */}\r\n                        {position === '프론트엔드' && frontendState && <Loading />}\r\n                        {\r\n                            position === '프론트엔드' && frontend.length >= 1 && frontend.map((item: userType) => {\r\n                                return (\r\n                                    <List key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} mailState={item.sendMail} onClick={() => onModal(item.sid)} />\r\n                                )\r\n                            })\r\n                        }\r\n                        {position === '프론트엔드' && frontendState === false && <NotData />}\r\n\r\n                        {/* 디자인 로직 */}\r\n                        {position === '디자인' && designState && <Loading />}\r\n                        {\r\n                            position === '디자인' && design.length >= 1 && design.map((item: userType) => {\r\n                                return (\r\n                                    <List key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} mailState={item.sendMail} onClick={() => onModal(item.sid)} />\r\n                                )\r\n                            })\r\n                        }\r\n                        {position === '디자인' && designState === false && <NotData />}\r\n                    </Content >\r\n                    : <Detail position={position} sid={sid} />\r\n            }\r\n        </>\r\n    )\r\n}","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Backend.tsx",["232","233","234","235"],[],"import React, { ChangeEvent } from 'react'\r\nimport { ButtonBox, Section, Button, Require, Article, InputTitle, TextAreaBox, InputBox, Banner, WordLength, Modal, Footer } from '../emotion/component'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch, TestState } from '../../app/store';\r\nimport { saveCommon, saveIndex, view, saveBackEnd } from '../../features/fetcherSlice';\r\nimport { useEffect, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport tempImg from '../../images/temp.png';\r\nimport completeImg from '../../images/complete.png';\r\nimport Confetti from '../../hooks/Confetti';\r\nimport { currentTime, endTime } from '../time/time';\r\n\r\nexport default function Backend() {\r\n\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const [difficultAndOvercoming, setDifficultAndOvercoming] = useState('');\r\n    const [studyFramework, setStudyFramework] = useState('');\r\n    const [importantGroup, setImportantGroup] = useState('');\r\n    const [portfolioLink, setPortfolioLink] = useState('');\r\n    const [buttonState, setButtonState] = useState(false);\r\n    const [backButtonState, setBackButtonState] = useState(false);\r\n    const [submitCount, setSubmitCount] = useState<number>(0);\r\n    const [tempState, setTempState] = useState<boolean>(false);\r\n    const [temp, setTemp] = useState<boolean>(false);\r\n    const [complete, setComplete] = useState<boolean>(false);\r\n\r\n    const userName = useSelector((state: TestState) => state.fetcher.userName);\r\n    const userID = useSelector((state: TestState) => state.fetcher.userID);\r\n    const userPhone = useSelector((state: TestState) => state.fetcher.userPhone);\r\n    const userEmail = useSelector((state: TestState) => state.fetcher.userEmail);\r\n    const userPosition = useSelector((state: TestState) => state.fetcher.userPosition);\r\n    const userDepartment = useSelector((state: TestState) => state.fetcher.userDepartment);\r\n\r\n    const userMotiv = useSelector((state: TestState) => state.fetcher.userMotiv);\r\n    const userHardWork = useSelector((state: TestState) => state.fetcher.userHardWork);\r\n    const userKeyWord = useSelector((state: TestState) => state.fetcher.userKeyWord);\r\n    const userMostDeeplyWork = useSelector((state: TestState) => state.fetcher.userMostDeeplyWork);\r\n\r\n    const userDifficultAndOvercoming = useSelector((state: TestState) => state.fetcher.userDifficultAndOvercoming);\r\n    const userStudyFramework = useSelector((state: TestState) => state.fetcher.userStudyFramework);\r\n    const userImportantGroup = useSelector((state: TestState) => state.fetcher.userImportantGroup);\r\n    const userPortfolioLink = useSelector((state: TestState) => state.fetcher.userPortfolioLinkBack);\r\n\r\n    const [name, setName] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        document.body.style.overflow = \"unset\";\r\n\r\n        if (!userName && !userID && !userPhone && !userEmail && !userPosition) {\r\n            navigate('/404')\r\n        }\r\n\r\n        if (currentTime > endTime) {\r\n            alert(\"제출 기간이 마감되었습니다!\");\r\n            navigate('/notTime');\r\n        }\r\n\r\n        // 이전 값들을 저장하기 위해서 Redux 사용\r\n        if (userDifficultAndOvercoming) {\r\n            setDifficultAndOvercoming(userDifficultAndOvercoming);\r\n        }\r\n\r\n        if (userStudyFramework) {\r\n            setStudyFramework(userStudyFramework);\r\n        }\r\n\r\n        if (userImportantGroup) {\r\n            setImportantGroup(userImportantGroup);\r\n        }\r\n\r\n        if (userPortfolioLink) {\r\n            setPortfolioLink(userPortfolioLink)\r\n        }\r\n\r\n        if (userName) {\r\n            setName(userName)\r\n        }\r\n    }, [])\r\n\r\n    useMemo(() => {\r\n\r\n        // 백엔드 파트로 들어왔을 때는 공통 질문이 하나라도 작성된 상태이기 때문에 바로 임시저장이 가능함\r\n        if (userMotiv || userHardWork || userKeyWord || userMostDeeplyWork) {\r\n            setTempState(false);\r\n        } else {\r\n            setTempState(true);\r\n        }\r\n\r\n        if (difficultAndOvercoming && studyFramework && importantGroup) {\r\n            setButtonState(false)\r\n        } else {\r\n            setButtonState(true)\r\n        }\r\n        if (submitCount >= 1) {\r\n            setButtonState(true);\r\n            setBackButtonState(true);\r\n        }\r\n    }, [difficultAndOvercoming, studyFramework, importantGroup, submitCount])\r\n\r\n\r\n    const Back = () => {\r\n        setSubmitCount((prev) => (prev + 1))\r\n        dispatch(saveBackEnd({ userDifficultAndOvercoming: difficultAndOvercoming, userStudyFramework: studyFramework, userImportantGroup: importantGroup, userPortfolioLinkBack: portfolioLink }));\r\n        navigate('/common');\r\n    }\r\n\r\n    const TempSave = () => {\r\n        setSubmitCount((prev) => (prev + 1))\r\n        axios.post('/backendApplication', JSON.stringify({\r\n            department: userDepartment,\r\n            difficultAndOvercoming: difficultAndOvercoming,\r\n            email: userEmail,\r\n            hardWork: userHardWork,\r\n            importantGroup: importantGroup,\r\n            keyWord: userKeyWord,\r\n            mostDeeplyWork: userMostDeeplyWork,\r\n            motive: userMotiv,\r\n            name: userName,\r\n            passOrNot: false,\r\n            sendMail: false,\r\n            phoneNumber: userPhone,\r\n            portfolioFile: \"\",\r\n            portfolioLink: portfolioLink,\r\n            sid: userID,\r\n            studyFramework: studyFramework,\r\n            submissionStatus: false,\r\n        }),\r\n            {\r\n                headers: {\r\n                    \"Content-type\": \"application/json\",\r\n                }\r\n            }\r\n        )\r\n            .then((res) => {\r\n                dispatch(saveBackEnd({\r\n                    userDifficultAndOvercoming: '',\r\n                    userImportantGroup: '',\r\n                    userPortfolioLink: '',\r\n                    userStudyFramework: '',\r\n                }));\r\n                dispatch(saveCommon({\r\n                    userMotiv: '',\r\n                    userHardWork: '',\r\n                    userKeyWord: '',\r\n                    userMostDeeplyWork: '',\r\n                }))\r\n                dispatch(saveIndex({\r\n                    userName: '',\r\n                    userID: '',\r\n                    userDepartment: '',\r\n                    userEmail: '',\r\n                    userPhone: '',\r\n                    userPosition: '',\r\n                }))\r\n                setTemp(!temp);\r\n                document.body.style.overflow = \"hidden\";\r\n            })\r\n    }\r\n\r\n    const Submit = () => {\r\n\r\n        const time = new Date();\r\n\r\n        if (time > endTime) {\r\n            alert(\"제출 기간이 마감되었습니다!\");\r\n            navigate('/notTime');\r\n        }\r\n\r\n        else if (window.confirm(\"최중 제출을 하면 수정이 불가해요, 제출하시겠어요?\")) {\r\n            setSubmitCount((prev) => (prev + 1))\r\n            axios.post('/backendApplication', JSON.stringify({\r\n                department: userDepartment,\r\n                difficultAndOvercoming: difficultAndOvercoming,\r\n                email: userEmail,\r\n                hardWork: userHardWork,\r\n                importantGroup: importantGroup,\r\n                keyWord: userKeyWord,\r\n                mostDeeplyWork: userMostDeeplyWork,\r\n                motive: userMotiv,\r\n                name: userName,\r\n                passOrNot: false,\r\n                sendMail: false,\r\n                phoneNumber: userPhone,\r\n                portfolioFile: \"\",\r\n                portfolioLink: portfolioLink,\r\n                sid: userID,\r\n                studyFramework: studyFramework,\r\n                submissionStatus: true,\r\n            }),\r\n                {\r\n                    headers: {\r\n                        \"Content-type\": \"application/json\",\r\n                    }\r\n                }\r\n            )\r\n                .then((res) => {\r\n                    setComplete(!complete);\r\n                    document.body.style.overflow = \"hidden\";\r\n                })\r\n        }\r\n    }\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement> | ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.name === \"극복\") {\r\n            if (event.target.value.length <= 1000) {\r\n                setDifficultAndOvercoming(event.target.value);\r\n            }\r\n        }\r\n\r\n        if (event.target.name === \"경험\") {\r\n            if (event.target.value.length <= 1000) {\r\n                setStudyFramework(event.target.value);\r\n            }\r\n        }\r\n\r\n        if (event.target.name === \"팀워크\") {\r\n            if (event.target.value.length <= 1000) {\r\n                setImportantGroup(event.target.value);\r\n            }\r\n        }\r\n\r\n        if (event.target.name === \"포트폴리오\") {\r\n            setPortfolioLink(event.target.value);\r\n        }\r\n    }\r\n\r\n    const TempBack = async () => {\r\n        setTemp(false);\r\n        setSubmitCount(0);\r\n        setTempState(false);\r\n        setButtonState(false);\r\n        document.body.style.overflow = \"unset\";\r\n    }\r\n\r\n    /* 처음에는 임시 저장에서 메인화면으로 가는 용도로 만들었지만, 최종 제출 후 redux를 초기화하는 로직이 동일해 최종 제출 후 홈으로 갈 때도 같이 사용*/\r\n    const TempHome = async () => {\r\n        await dispatch(saveBackEnd({\r\n            userDifficultAndOvercoming: '',\r\n            userImportantGroup: '',\r\n            userPortfolioLink: '',\r\n            userStudyFramework: '',\r\n        }));\r\n        await dispatch(saveCommon({\r\n            userMotiv: '',\r\n            userHardWork: '',\r\n            userKeyWord: '',\r\n            userMostDeeplyWork: '',\r\n        }))\r\n        await dispatch(saveIndex({\r\n            userName: '',\r\n            userID: '',\r\n            userDepartment: '',\r\n            userEmail: '',\r\n            userPhone: '',\r\n            userPosition: '',\r\n        }))\r\n        await navigate('/');\r\n    }\r\n\r\n    return (\r\n        <Section>\r\n            {complete && <Confetti />}\r\n            {complete ?\r\n                <Modal text={`${name}님의 소중한 지원서가 정상적으로 제출되었어요!`} imgSrc={completeImg} alt=\"최종제출\">\r\n                    <Button name=\"제출하기\" onClick={TempHome}>메인 화면으로 이동</Button>\r\n                </Modal>\r\n                : null\r\n            }\r\n            {temp ?\r\n                <Modal text=\"소중한 지원서가 학번으로 지원서가 저장이 되었어요!\" imgSrc={tempImg}>\r\n                    <Button name=\"임시저장\" onClick={TempHome}>메인 화면으로 이동</Button>\r\n                    <Button name=\"제출하기\" onClick={TempBack}>이어서 작성하기</Button>\r\n                </Modal>\r\n                : null\r\n            }\r\n            <Banner />\r\n            <Article>\r\n                <InputTitle>개발 관련 공부를 하며 개인적으로 힘들었던 경험과 그걸 극복했던 자신만의 방법이 있나요?<Require /> </InputTitle>\r\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"극복\" onChange={handleChange} value={difficultAndOvercoming} />\r\n                <WordLength>{difficultAndOvercoming.length}</WordLength>\r\n            </Article>\r\n            <Article>\r\n                <InputTitle>웹 백앤드 프레임워크를 공부해보신적 있으신가요? 있으시다면 어디까지 공부해보셨나요?<Require /> </InputTitle>\r\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"경험\" onChange={handleChange} value={studyFramework} />\r\n                <WordLength>{studyFramework.length}</WordLength>\r\n            </Article>\r\n            <Article>\r\n                <InputTitle>단체생활에서 가장 중요하다고 생각하는 것은 무엇인가요?<Require /> </InputTitle>\r\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"팀워크\" onChange={handleChange} value={importantGroup} />\r\n                <WordLength>{importantGroup.length}</WordLength>\r\n            </Article>\r\n            <Article>\r\n                <InputTitle>깃허브 또는 포트폴리오 링크가 있다면 첨부해주세요 </InputTitle>\r\n                <InputBox type=\"text\" placeholder=\"https 또는 http를 포함하는 링크 전체를 입력해주세요\" maxLength={200} name=\"포트폴리오\" onChange={handleChange} value={portfolioLink} />\r\n            </Article>\r\n            <ButtonBox>\r\n                <Button name=\"임시저장\" onClick={TempSave} disabled={tempState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `임시저장`}</Button>\r\n                <Button name=\"제출하기\" onClick={Back} disabled={backButtonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `뒤로가기`}</Button>\r\n                <Button name=\"제출하기\" onClick={Submit} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `제출하기`}</Button>\r\n            </ButtonBox>\r\n        </Section>\r\n    )\r\n}\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\partition\\Temp.tsx",["236","237","238","239","240","241","242","243","244","245","246","247","248"],[],"import React, { useMemo } from 'react'\r\nimport { Content, List, ListType, NotData, Section, onModalType } from '../emotion/component'\r\nimport { Position, PositionBox } from '../emotion/component';\r\nimport { frontendDummy, backendDummy, designDummy } from './dummy';\r\nimport { useState } from 'react';\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { userType } from './Type';\r\nimport { Loading, Modal } from '../../emotion/component';\r\nimport Header from '../common/Header';\r\nimport Detail from '../detail/Detail';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TestState } from '../../../app/store';\r\nimport { saveModalState } from '../../../features/fetcherSlice';\r\n\r\nexport default function Temp() {\r\n\r\n    const [position, setPosition] = useState<string>('백엔드');\r\n    const [frontend, setFrontend] = useState<[]>([]);\r\n    const [backend, setBackend] = useState<[]>([]);\r\n    const [design, setDesign] = useState<[]>([]);\r\n\r\n    const [backendState, setBackendState] = useState<boolean | null>(true);\r\n    const [frontendState, setFrontendState] = useState<boolean | null>(true);\r\n    const [designState, setDesignState] = useState<boolean | null>(true);\r\n    const [clickState, setClickState] = useState<boolean>(false);\r\n    const [sid, setSid] = useState<string>('');\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const userModalState = useSelector((state: TestState) => state.fetcher.userModalState);\r\n    const adminState = useSelector((state: TestState) => (state.fetcher.adminState));\r\n\r\n    useEffect(() => {\r\n\r\n        if (adminState === false) {\r\n            navigate('/error');\r\n        }\r\n\r\n        dispatch(saveModalState(false));\r\n        axios.get('/backendApplication/getSubmissionApplications?bool=false')\r\n            .then((res) => {\r\n                setBackend(() => {\r\n                    return res.data\r\n                });\r\n\r\n                if (res.data.length < 1) {\r\n                    setBackendState(false);\r\n                } else {\r\n                    setBackendState(null);\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    function CheckPosition(event: React.MouseEvent<HTMLButtonElement>): void {\r\n        const name = (event.target as HTMLButtonElement).name;\r\n        setPosition(name);\r\n\r\n        if (name === \"백엔드\") {\r\n            axios.get('/backendApplication/getSubmissionApplications?bool=false')\r\n                .then((res) => {\r\n                    setBackend(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setBackendState(false);\r\n                    } else {\r\n                        setBackendState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n        if (name === \"프론트엔드\") {\r\n            axios.get('/frontendApplication/getSubmissionApplications?bool=false')\r\n                .then((res) => {\r\n                    setFrontend(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setFrontendState(false);\r\n                    } else {\r\n                        setFrontendState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n        if (name === \"디자인\") {\r\n            axios.get('/designApplication/getSubmissionApplications?bool=false')\r\n                .then((res) => {\r\n                    setDesign(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setDesignState(false);\r\n                    } else {\r\n                        setDesignState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    const onModal: onModalType = async (userID: string) => {\r\n        await setSid(userID);\r\n        await dispatch(saveModalState({ userModalState: true }))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !userModalState ?\r\n                    <Content>\r\n                        < PositionBox >\r\n                            <Position name=\"백엔드\" onClick={CheckPosition} state={position}>백엔드</Position>\r\n                            <Position name=\"프론트엔드\" onClick={CheckPosition} state={position}>프론트엔드</Position>\r\n                            <Position name=\"디자인\" onClick={CheckPosition} state={position}>디자인</Position>\r\n                        </PositionBox >\r\n                        <List check=\"체크 없음\" name=\"이름\" position=\"트랙\" department=\"학과\" id=\"학번\" email=\"이메일\" />\r\n                        {/* 백엔드 로직 */}\r\n                        {position === '백엔드' && backendState && <Loading />}\r\n                        {\r\n                            position === '백엔드' && backend.length >= 1 && backend.map((item: userType) => {\r\n                                return (\r\n                                    <List check=\"체크 없음\" key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} onClick={() => onModal(item.sid)} />\r\n                                )\r\n                            })\r\n                        }\r\n                        {position === '백엔드' && backendState === false && <NotData />}\r\n\r\n                        {/* 프론트엔드 로직 */}\r\n                        {position === '프론트엔드' && frontendState && <Loading />}\r\n                        {\r\n                            position === '프론트엔드' && frontend.length >= 1 && frontend.map((item: userType) => {\r\n                                return (\r\n                                    <List check=\"체크 없음\" key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} onClick={() => onModal(item.sid)} />\r\n                                )\r\n                            })\r\n                        }\r\n                        {position === '프론트엔드' && frontendState === false && <NotData />}\r\n\r\n                        {/* 디자인 로직 */}\r\n                        {position === '디자인' && designState && <Loading />}\r\n                        {\r\n                            position === '디자인' && design.length >= 1 && design.map((item: userType) => {\r\n                                return (\r\n                                    <List check=\"체크 없음\" key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} onClick={() => onModal(item.sid)} />\r\n                                )\r\n                            })\r\n                        }\r\n                        {position === '디자인' && designState === false && <NotData />}\r\n                    </Content >\r\n                    : <Detail position={position} sid={sid} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\partition\\Main.tsx",["249","250","251","252","253","254","255","256","257","258","259","260","261"],[],"import React, { useMemo } from 'react'\r\nimport { Content, List, ListType, NotData, Section, onModalType } from '../emotion/component'\r\nimport { Position, PositionBox } from '../emotion/component';\r\nimport { frontendDummy, backendDummy, designDummy } from './dummy';\r\nimport { useState } from 'react';\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { userType } from './Type';\r\nimport { Loading, Modal } from '../../emotion/component';\r\nimport Header from '../common/Header';\r\nimport Detail from '../detail/Detail';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TestState } from '../../../app/store';\r\nimport { saveModalState } from '../../../features/fetcherSlice';\r\n\r\nexport default function Main() {\r\n\r\n    const [position, setPosition] = useState<string>('백엔드');\r\n    const [frontend, setFrontend] = useState<[]>([]);\r\n    const [backend, setBackend] = useState<[]>([]);\r\n    const [design, setDesign] = useState<[]>([]);\r\n\r\n    const [backendState, setBackendState] = useState<boolean | null>(true);\r\n    const [frontendState, setFrontendState] = useState<boolean | null>(true);\r\n    const [designState, setDesignState] = useState<boolean | null>(true);\r\n    const [clickState, setClickState] = useState<boolean>(false);\r\n    const [sid, setSid] = useState<string>('');\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const userModalState = useSelector((state: TestState) => state.fetcher.userModalState);\r\n    const adminState = useSelector((state: TestState) => (state.fetcher.adminState));\r\n\r\n    useEffect(() => {\r\n\r\n        if (adminState === false) {\r\n            navigate('/error');\r\n        }\r\n\r\n        dispatch(saveModalState(false));\r\n        axios.get('/backendApplication/getSubmissionApplications?bool=true')\r\n            .then((res) => {\r\n                setBackend(() => {\r\n                    return res.data\r\n                });\r\n\r\n                if (res.data.length < 1) {\r\n                    setBackendState(false);\r\n                } else {\r\n                    setBackendState(null);\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    function CheckPosition(event: React.MouseEvent<HTMLButtonElement>): void {\r\n        const name = (event.target as HTMLButtonElement).name;\r\n        setPosition(name);\r\n\r\n        if (name === \"백엔드\") {\r\n            axios.get('/backendApplication/getSubmissionApplications?bool=true')\r\n                .then((res) => {\r\n                    setBackend(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setBackendState(false);\r\n                    } else {\r\n                        setBackendState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n        if (name === \"프론트엔드\") {\r\n            axios.get('/frontendApplication/getSubmissionApplications?bool=true')\r\n                .then((res) => {\r\n                    setFrontend(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setFrontendState(false);\r\n                    } else {\r\n                        setFrontendState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n        if (name === \"디자인\") {\r\n            axios.get('/designApplication/getSubmissionApplications?bool=true')\r\n                .then((res) => {\r\n                    setDesign(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setDesignState(false);\r\n                    } else {\r\n                        setDesignState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    const onModal: onModalType = async (userID: string) => {\r\n        await setSid(userID);\r\n        await dispatch(saveModalState({ userModalState: true }))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !userModalState ?\r\n                    <Content>\r\n                        < PositionBox >\r\n                            <Position name=\"백엔드\" onClick={CheckPosition} state={position}>백엔드</Position>\r\n                            <Position name=\"프론트엔드\" onClick={CheckPosition} state={position}>프론트엔드</Position>\r\n                            <Position name=\"디자인\" onClick={CheckPosition} state={position}>디자인</Position>\r\n                        </PositionBox >\r\n                        <List check=\"체크 없음\" name=\"이름\" position=\"트랙\" department=\"학과\" id=\"학번\" email=\"이메일\" />\r\n                        {/* 백엔드 로직 */}\r\n                        {position === '백엔드' && backendState && <Loading />}\r\n                        {\r\n                            position === '백엔드' && backend.length >= 1 && backend.map((item: userType) => {\r\n                                return (\r\n                                    <List check=\"체크 없음\" key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} onClick={() => onModal(item.sid)} />\r\n                                )\r\n                            })\r\n                        }\r\n                        {position === '백엔드' && backendState === false && <NotData />}\r\n\r\n                        {/* 프론트엔드 로직 */}\r\n                        {position === '프론트엔드' && frontendState && <Loading />}\r\n                        {\r\n                            position === '프론트엔드' && frontend.length >= 1 && frontend.map((item: userType) => {\r\n                                return (\r\n                                    <List check=\"체크 없음\" key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} onClick={() => onModal(item.sid)} />\r\n                                )\r\n                            })\r\n                        }\r\n                        {position === '프론트엔드' && frontendState === false && <NotData />}\r\n\r\n                        {/* 디자인 로직 */}\r\n                        {position === '디자인' && designState && <Loading />}\r\n                        {\r\n                            position === '디자인' && design.length >= 1 && design.map((item: userType) => {\r\n                                return (\r\n                                    <List check=\"체크 없음\" key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} onClick={() => onModal(item.sid)} />\r\n                                )\r\n                            })\r\n                        }\r\n                        {position === '디자인' && designState === false && <NotData />}\r\n                    </Content >\r\n                    : <Detail position={position} sid={sid} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\partition\\Fail.tsx",["262","263","264","265","266","267","268","269","270","271","272","273"],[],"import React from 'react'\r\nimport { Content, FailMailSend, List, NotData, Section, onModalType } from '../emotion/component'\r\nimport Header from '../common/Header';\r\nimport { Position, PositionBox } from '../emotion/component';\r\nimport { frontendDummy, backendDummy, designDummy } from './dummy';\r\nimport { useState } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Button, Loading, Modal } from '../../emotion/component';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TestState } from '../../../app/store';\r\nimport { renderNewList, saveModalState } from '../../../features/fetcherSlice';\r\nimport Detail from '../detail/Detail';\r\nimport { emailType, userType } from './Type';\r\nimport mailLoading from '../../../images/mailLoading.gif';\r\n\r\nexport default function Fail() {\r\n\r\n\r\n    const [position, setPosition] = useState<string>('백엔드');\r\n    const [frontend, setFrontend] = useState<[]>([]);\r\n    const [backend, setBackend] = useState<[]>([]);\r\n    const [design, setDesign] = useState<[]>([]);\r\n    const [failList, setFailList] = useState<[]>([]);\r\n    const [mailState, setMailState] = useState<boolean>(false);\r\n    const [mailMessage, setMailMessage] = useState<string>(\"메일 전송 중입니다..\");\r\n    const [mailButtonState, setMailButtonState] = useState<boolean>(false);\r\n\r\n    const [backendState, setBackendState] = useState<boolean | null>(true);\r\n    const [frontendState, setFrontendState] = useState<boolean | null>(true);\r\n    const [designState, setDesignState] = useState<boolean | null>(true);\r\n    const [clickState, setClickState] = useState<boolean>(false);\r\n    const [sid, setSid] = useState<string>('');\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    const userModalState = useSelector((state: TestState) => state.fetcher.userModalState);\r\n    const adminState = useSelector((state: TestState) => (state.fetcher.adminState));\r\n    const newList = useSelector((state: TestState) => (state.fetcher.newList));\r\n\r\n    useEffect(() => {\r\n\r\n        if (adminState === false) {\r\n            navigate('/error');\r\n        }\r\n\r\n        dispatch(saveModalState(false));\r\n        axios.get('/backendApplication/getApplicationWithPassOrNotAndSubmission?passOrNot=false&submission=true')\r\n            .then((res) => {\r\n                // console.log(res);\r\n                setBackend(() => {\r\n                    return res.data\r\n                });\r\n\r\n                if (res.data.length < 1) {\r\n                    setBackendState(false);\r\n                } else {\r\n                    setBackendState(null);\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (position === \"백엔드\") {\r\n            axios.get('/backendApplication/getApplicationWithPassOrNotAndSubmission?passOrNot=false&submission=true')\r\n                .then((res) => {\r\n                    setBackend(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setBackendState(false);\r\n                    } else {\r\n                        setBackendState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n        if (position === \"프론트엔드\") {\r\n            axios.get('/frontendApplication/getApplicationsWithPassOrNotAndSubmission?passOrNot=false&submission=true')\r\n                .then((res) => {\r\n                    setFrontend(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setFrontendState(false);\r\n                    } else {\r\n                        setFrontendState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n        if (position === \"디자인\") {\r\n            axios.get('/designApplication/getApplicationsWithPassOrNotAndSubmission?passOrNot=false&submission=true')\r\n                .then((res) => {\r\n                    setDesign(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setDesignState(false);\r\n                    } else {\r\n                        setDesignState(null);\r\n                    }\r\n                })\r\n        }\r\n    }, [userModalState, newList])\r\n\r\n    /* 포지션을 체크하는 함수 */\r\n    function CheckPosition(event: React.MouseEvent<HTMLButtonElement>): void {\r\n        const name = (event.target as HTMLButtonElement).name;\r\n        setPosition(name);\r\n\r\n        if (name === \"백엔드\") {\r\n            axios.get('/backendApplication/getApplicationWithPassOrNotAndSubmission?passOrNot=false&submission=true')\r\n                .then((res) => {\r\n                    setBackend(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setBackendState(false);\r\n                    } else {\r\n                        setBackendState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n        if (name === \"프론트엔드\") {\r\n            axios.get('/frontendApplication/getApplicationsWithPassOrNotAndSubmission?passOrNot=false&submission=true')\r\n                .then((res) => {\r\n                    setFrontend(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setFrontendState(false);\r\n                    } else {\r\n                        setFrontendState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n        if (name === \"디자인\") {\r\n            axios.get('/designApplication/getApplicationsWithPassOrNotAndSubmission?passOrNot=false&submission=true')\r\n                .then((res) => {\r\n                    setDesign(res.data);\r\n\r\n                    if (res.data.length < 1) {\r\n                        setDesignState(false);\r\n                    } else {\r\n                        setDesignState(null);\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    // sid 값을 Detail 페이지로 넘겨주면서 모달창으로 연결해주는 함수\r\n    const onModal: onModalType = async (userID: string) => {\r\n        await setSid(userID);\r\n        await dispatch(saveModalState({ userModalState: true }))\r\n    }\r\n\r\n    const SendMail = async () => {\r\n        if (window.confirm(\"정말로 메일 전체 전송을 하시겠어요?\")) {\r\n            setMailState(!mailState);\r\n            if (position === \"백엔드\") {\r\n                if (backend.length >= 1) {\r\n                    backend.map(async (data: emailType) => {\r\n                        await axios.post(`/emailSender/sendFailMail`, JSON.stringify([{\r\n                            email: data.email,\r\n                            interviewDate: \"string\",\r\n                            interviewLocation: \"string\",\r\n                            interviewTime: \"string\",\r\n                            name: data.name,\r\n                        }]),\r\n                            {\r\n                                headers: {\r\n                                    \"Content-type\": \"application/json\",\r\n                                }\r\n                            })\r\n                            .then(async (res) => {\r\n                                await backend.map(async (data: emailType) => {\r\n                                    axios.put(`/backendApplication/changeSendMail?sid=${data.sid}`)\r\n                                        .then(async (res) => {\r\n                                            await setMailMessage(`${data.name}님에게 합격 메일 전송 완료!`);\r\n                                            await setMailButtonState(true);\r\n                                        })\r\n                                        .catch(async (error) => {\r\n                                            alert(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                            await setMailMessage(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                            await setMailButtonState(true);\r\n                                        })\r\n                                })\r\n                            })\r\n                            .catch(async (error) => {\r\n                                alert(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                await setMailMessage(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                await setMailButtonState(true);\r\n                            })\r\n                    }\r\n                    )\r\n                } else if (backend.length === 0) {\r\n                    alert(\"보낼 지원자가 존재하지 않아요!\");\r\n                }\r\n            }\r\n\r\n            if (position === \"프론트엔드\") {\r\n                if (frontend.length >= 1) {\r\n                    frontend.map(async (data: emailType) => {\r\n                        await axios.post(`/emailSender/sendFailMail`, JSON.stringify([{\r\n                            email: data.email,\r\n                            interviewDate: \"string\",\r\n                            interviewLocation: \"string\",\r\n                            interviewTime: \"string\",\r\n                            name: data.name,\r\n                        }]),\r\n                            {\r\n                                headers: {\r\n                                    \"Content-type\": \"application/json\",\r\n                                }\r\n                            })\r\n                            .then(async (res) => {\r\n                                await frontend.map(async (data: emailType) => {\r\n                                    axios.put(`/frontendApplication/changeSendMail?sid=${data.sid}`)\r\n                                        .then(async (res) => {\r\n                                            await setMailMessage(`${data.name}님에게 합격 메일 전송 완료!`);\r\n                                            await setMailButtonState(true);\r\n                                        })\r\n                                        .catch(async (error) => {\r\n                                            alert(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                            await setMailMessage(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                            await setMailButtonState(true);\r\n                                        })\r\n                                })\r\n                            })\r\n                            .catch(async (error) => {\r\n                                alert(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                await setMailMessage(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                await setMailButtonState(true);\r\n                            })\r\n                    }\r\n                    )\r\n                } else if (frontend.length === 0) {\r\n                    alert(\"보낼 지원자가 존재하지 않아요!\");\r\n                }\r\n            }\r\n\r\n            if (position === \"디자인\") {\r\n                if (design.length >= 1) {\r\n                    design.map(async (data: emailType) => {\r\n                        await axios.post(`/emailSender/sendFailMail`, JSON.stringify([{\r\n                            email: data.email,\r\n                            interviewDate: \"string\",\r\n                            interviewLocation: \"string\",\r\n                            interviewTime: \"string\",\r\n                            name: data.name,\r\n                        }]),\r\n                            {\r\n                                headers: {\r\n                                    \"Content-type\": \"application/json\",\r\n                                }\r\n                            })\r\n                            .then(async (res) => {\r\n                                await design.map(async (data: emailType) => {\r\n                                    axios.put(`/designApplication/changeSendMail?sid=${data.sid}`)\r\n                                        .then(async (res) => {\r\n                                            await setMailMessage(`${data.name}님에게 합격 메일 전송 완료!`);\r\n                                            await setMailButtonState(true);\r\n                                        })\r\n                                        .catch(async (error) => {\r\n                                            alert(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                            await setMailMessage(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                            await setMailButtonState(true);\r\n                                        })\r\n                                })\r\n                            })\r\n                            .catch(async (error) => {\r\n                                alert(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                await setMailMessage(`${data.name}님에게 메일을 보내는 과정에서 에러가 발생했어요!`);\r\n                                await setMailButtonState(true);\r\n                            })\r\n                    }\r\n                    )\r\n                } else if (design.length === 0) {\r\n                    alert(\"보낼 지원자가 존재하지 않아요!\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 메일 전송이 완료되면, 이 버튼을 통해 모달을 종료합니다.\r\n    const ClearMail = async () => {\r\n        await setMailState(false);\r\n        await setMailButtonState(false);\r\n        await setMailMessage(`메일 전송 중입니다..`);\r\n        await dispatch(renderNewList({ newList: !newList }))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {mailState ?\r\n                <Modal text={mailMessage} imgSrc={mailLoading} alt=\"최종제출\">\r\n                    {mailButtonState && <Button name=\"제출하기\" onClick={ClearMail}>\r\n                        돌아가기\r\n                    </Button>}\r\n                </Modal>\r\n                : null\r\n            }\r\n            {\r\n                !userModalState ?\r\n                    <Content>\r\n                        <PositionBox >\r\n                            <Position name=\"백엔드\" onClick={CheckPosition} state={position}>백엔드</Position>\r\n                            <Position name=\"프론트엔드\" onClick={CheckPosition} state={position}>프론트엔드</Position>\r\n                            <Position name=\"디자인\" onClick={CheckPosition} state={position}>디자인</Position>\r\n                        </PositionBox >\r\n                        <FailMailSend position={position} onClick={SendMail} />\r\n                        <List check=\"체크 없음\" name=\"이름\" position=\"트랙\" department=\"학과\" id=\"학번\" email=\"이메일\" />\r\n                        {/* 백엔드 로직 */}\r\n                        {position === '백엔드' && backendState && <Loading />}\r\n                        {\r\n                            position === '백엔드' && backend.length >= 1 && backend.map((item: userType) => {\r\n                                return (\r\n                                    <List check=\"체크 없음\" key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} mailState={item.sendMail} onClick={() => onModal(item.sid)} />\r\n                                )\r\n                            })\r\n                        }\r\n                        {position === '백엔드' && backendState === false && <NotData />}\r\n\r\n                        {/* 프론트엔드 로직 */}\r\n                        {position === '프론트엔드' && frontendState && <Loading />}\r\n                        {\r\n                            position === '프론트엔드' && frontend.length >= 1 && frontend.map((item: userType) => {\r\n                                return (\r\n                                    <List check=\"체크 없음\" key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} mailState={item.sendMail} onClick={() => onModal(item.sid)} />\r\n                                )\r\n                            })\r\n                        }\r\n                        {position === '프론트엔드' && frontendState === false && <NotData />}\r\n\r\n                        {/* 디자인 로직 */}\r\n                        {position === '디자인' && designState && <Loading />}\r\n                        {\r\n                            position === '디자인' && design.length >= 1 && design.map((item: userType) => {\r\n                                return (\r\n                                    <List check=\"체크 없음\" key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} mailState={item.sendMail} onClick={() => onModal(item.sid)} />\r\n                                )\r\n                            })\r\n                        }\r\n                        {position === '디자인' && designState === false && <NotData />}\r\n                    </Content >\r\n                    : <Detail position={position} sid={sid} />\r\n            }\r\n        </>\r\n    )\r\n}","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\404\\Error.tsx",["274","275","276","277"],[],"/** @jsxImportSource @emotion/react */\r\nimport { css, keyframes } from \"@emotion/react\";\r\nimport React from 'react'\r\nimport { Button, Modal, Section } from '../emotion/component'\r\nimport oops from '../../images/oops.png';\r\nimport { Link } from \"react-router-dom\";\r\nimport { fadeUp } from \"../../styles/Keyframes\";\r\n\r\nexport default function Error() {\r\n    return (\r\n        <div css={css`\r\n            position: absolute;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n        `}>\r\n            <img alt=\"404\" src={oops} css={css`\r\n                width: 8.5em;\r\n                animation: ${fadeUp} 1s ease-in-out;\r\n            `} />\r\n            <span css={css`\r\n                font-family: 'Pretendard-Bold';\r\n                letter-spacing: -0.03em;\r\n                color: #333d4b;\r\n                margin-top: 1em;\r\n                font-size: 15px;\r\n                animation: ${fadeUp} 1s ease-in-out;\r\n            `}>웁스웁스, 잘못된 접근을 하셨어요!</span>\r\n            <Link to='/'>\r\n                <button css={css`\r\n                font-family: 'Pretendard-Bold';\r\n                letter-spacing: -0.03em;\r\n                font-size: 14px;\r\n                width: 16em;\r\n                height: 3.5em;\r\n                border: none;\r\n                border-radius: 7px;\r\n                color: white;\r\n                background-color: #4F85E8;\r\n                cursor: pointer;\r\n                transition: 0.5s all;\r\n                margin-top: 2em;\r\n                animation: ${fadeUp} 1s ease-in-out;\r\n\r\n                &:hover {\r\n                    opacity: 80%;\r\n                }\r\n            `}> 메인화면으로 </button>\r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\emotion\\component.tsx",["278","279","280","281","282","283","284","285","286","287","288"],[],"/** @jsxImportSource @emotion/react */\r\nimport { css, keyframes } from \"@emotion/react\";\r\nimport React, { ChangeEvent, useEffect, useRef, useState } from 'react'\r\nimport banner from '../../images/banner.png';\r\nimport loading from '../../images/loading.gif';\r\nimport axios from 'axios';\r\nimport checkBox from '../images/checkBox.svg';\r\nimport checkedBox from '../images/checkedBox.svg';\r\nimport { useMemo } from 'react';\r\nimport { fadeLeft, fadeUp, fadeIn } from \"../../styles/Keyframes\";\r\nimport { WrapperProps } from \"../../App\"\r\nimport { ImgClickType } from \"../admin/detail/Type\";\r\nimport back from '../../images/back.png';\r\nimport oops from '../../images/oops.png';\r\nimport logo from '../../images/logo.png';\r\nimport { Link, Outlet, useNavigate } from \"react-router-dom\";\r\nimport NotWidth from \"../404/NotWidth\";\r\nimport { KeyboardIOS } from \"../../hooks/KeyboardIOS\";\r\n\r\n\r\n// 공통 질문, 각 포지션별 질문에 해당하는 textarea 태그\r\nexport const TextAreaBox = (props: TextAreaType) => {\r\n    return (\r\n        <textarea css={css`\r\n        font-family: 'Pretendard-Regular';\r\n        letter-spacing: -0.03em;\r\n        line-height: 1.5em;\r\n        padding: 0;\r\n        padding-left: 1em;\r\n        padding-bottom: 1em;\r\n        padding-right: 1em;\r\n        padding-top: 1em;\r\n        width: 46.88vw;\r\n        height: 15em;\r\n        border: solid;\r\n        border-radius: 1.07em;\r\n        border-color: #e6e8ea;\r\n        border-width: 0.0714em;\r\n        @media all and (min-width:768px) and (max-width:1099px) { \r\n            font-size: 14px;\r\n        }; \r\n        @media all and (min-width:1100px) and (max-width:2000px) { \r\n            font-size: 14px;\r\n        }; \r\n        box-sizing: border-box;\r\n        resize: none;\r\n\r\n        // 익스플로러, 파이어폭스에서 우측 스크롤 없애기\r\n        -ms-overflow-style: none;\r\n        scrollbar-width: none;\r\n\r\n        &:focus {\r\n            outline-color: #4F85E8;\r\n        }\r\n\r\n        &::placeholder {\r\n            font-family: 'Pretendard-Regular';\r\n            color: #8B95A1;\r\n            margin-left: 0.4em;\r\n        }\r\n\r\n        // 크롬에서 우측 스크롤 없애기\r\n        &::-webkit-scrollbar {\r\n            display: none;\r\n          }\r\n\r\n        `} {...props} maxLength={1000} />\r\n    )\r\n}\r\n\r\n// 공통적인 헤더를 나타내주는 컴포넌트\r\nexport const IndexHeader = () => {\r\n\r\n    const [scrollState, setScrollState] = useState<boolean>(false);\r\n\r\n    const handleScroll = () => {\r\n        if (window.scrollY || document.documentElement.scrollTop > 0) {\r\n            setScrollState(true);\r\n        } else {\r\n            setScrollState(false);\r\n        }\r\n    };\r\n\r\n    useMemo(() => {\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', handleScroll); //clean up\r\n        };\r\n    }, [window.scrollY || document.documentElement.scrollTop])\r\n\r\n    return (\r\n        <>\r\n            <div css={css`\r\n                position: fixed;\r\n                z-index: 999;\r\n                width: 100%;\r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n                padding-top: 1.2em;\r\n                padding-bottom: 1.2em;\r\n                @media (max-width: 1099px) {\r\n                    display: none;\r\n                }\r\n                @media all and (min-width:768px) and (max-width:1099px) { \r\n                    font-size: 18px;\r\n                }; \r\n                @media all and (min-width:1100px) and (max-width:2000px) { \r\n                    font-size: 18px;\r\n                }; \r\n                column-gap: 30em;\r\n                background-color: white;\r\n\r\n                ${scrollState && css`\r\n                    border:solid;\r\n                    border-top: 0;\r\n                    border-left: 0;\r\n                    border-right: 0;\r\n                    border-bottom: 1;\r\n                    border-color: #e6e8ea;\r\n                    border-width: 1px;\r\n                `}\r\n\r\n                a {\r\n                    @media all and (min-width:768px) and (max-width:1099px) { \r\n                        font-size: 14.8px;\r\n                    }; \r\n                    @media all and (min-width:1100px) and (max-width:2000px) { \r\n                        font-size: 14.8px;\r\n                    }; \r\n                    color: #4e5968;\r\n                    font-family: 'Pretendard-Regular';\r\n                    letter-spacing: -0.03em;\r\n                }\r\n            `}>\r\n                <img alt=\"로고\" src={logo} css={css`\r\n                    height: auto;\r\n                    width: 155px;\r\n                    transition: 0.4s all;\r\n\r\n                    &:hover {\r\n                        opacity : 70%;\r\n                    }\r\n                `} />\r\n                <nav css={css`\r\n                    height: 100%;\r\n                    display: flex;\r\n                    column-gap: 2.5em;\r\n                    transition: 0.4s all;\r\n                `}>\r\n                    <a href=\"https://ripe-launch-04b.notion.site/88de609dd84e4fcab616b1cf2cf491e2\" target=\"_blank\" tabIndex={-1}>조직 소개</a>\r\n                    <a href=\"https://ripe-launch-04b.notion.site/24b3c0a0d41d4162b1c458055fe86dd8\" target=\"_blank\" tabIndex={-1}>합류 여정</a>\r\n                    <a href=\"https://ripe-launch-04b.notion.site/2bde1551815e455ab4306ab5ca190519\" target=\"_blank\" tabIndex={-1}>강남멋사 조직도</a>\r\n                </nav>\r\n\r\n\r\n            </div>\r\n            <Outlet />\r\n        </>\r\n    )\r\n}\r\n\r\n// 업로드 기능이 생기면 쓰려고 만들어놓은 업로드 컴포넌트\r\nexport const UploadButton = () => {\r\n    return (\r\n        <div css={css`\r\n            position: absolute;\r\n            font-family: 'Pretendard-Bold';\r\n            letter-spacing: -0.03em;\r\n            font-size: 15px;\r\n            border: none;\r\n            border-radius: 7px;\r\n            width: 5.8em;\r\n            height: 2em;       \r\n            background-color: #4F85E8;     \r\n            margin-left: 59em;\r\n\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n\r\n            cursor: pointer;\r\n            transition: 0.5s all;\r\n\r\n            &:hover {\r\n                opacity: 80%;\r\n            }\r\n        `}>\r\n            <span css={css`\r\n                color: white;\r\n            `}>업로드</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n// 기본적인 입력 정보를 받기 위한 input 박스\r\nexport const InputBox = (props: InputType) => {\r\n    return (\r\n        <input css={css`\r\n        @media all and (min-width:768px) and (max-width:1099px) { \r\n            font-size: 13px;\r\n        }; \r\n        @media all and (min-width:1100px) and (max-width:2000px) { \r\n            font-size: 14.5px;\r\n        }; \r\n        font-family: 'Pretendard-Regular';\r\n        letter-spacing: -0.03em;\r\n        padding: 0;\r\n        padding-left: 1em;\r\n        width: 46.88vw; // 900px;\r\n        height: 3.7em; // 51.8px\r\n        border: solid;\r\n        border-radius: 0.614em; // 0.8596px;\r\n        border-color: #e6e8ea;\r\n        border-width: 0.0614em; // 1px \r\n        box-sizing: border-box;\r\n        transition: .2s all;\r\n        outline-color: #4F85E8;\r\n\r\n        &::-webkit-outer-spin-button,\r\n        &::-webkit-inner-spin-button {\r\n            -webkit-appearance: none;\r\n            margin: 0;\r\n        }\r\n\r\n        &:focus {\r\n            outline-color: #4F85E8;\r\n\r\n            &:hover {\r\n                box-shadow: none;\r\n            }\r\n            // box-shadow: inset 0 0 0 2px #4F85E8;\r\n        }\r\n\r\n        &:hover {\r\n            box-shadow: inset 0 0 0 2px #90c2ff;\r\n        }\r\n\r\n        &::placeholder {\r\n            font-family: 'Pretendard-Regular';\r\n            color: #8B95A1;\r\n            margin-left: 0.4em;\r\n        }\r\n        `} {...props} maxLength={props.maxLength} tabIndex={props.tabIndex} />\r\n    )\r\n}\r\n\r\n// 추후 리팩토링에서 Type.ts 파일로 모아서 export 시키도록 하자\r\nexport interface PositionType {\r\n    name?: string;\r\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n    children?: React.ReactNode;\r\n    state?: string;\r\n    alt?: string;\r\n}\r\n\r\n// 사용자가 포지션을 선택하기 위해 만들어놓은 포지션 컴포넌트\r\nexport const Position = (props: PositionType) => {\r\n    return (\r\n        <button css={css`\r\n            font-family: 'Pretendard-Medium';\r\n            letter-spacing: -0.03em;\r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 13px;\r\n                height: 40px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 14px;\r\n            };  \r\n            height: 56px;\r\n            ${props.alt === \"모달\" && css`height: 3em;`} \r\n            ${props.alt === \"모달\" && css`\r\n                @media all and (min-width:768px) and (max-width:1099px) { \r\n                    font-size: 12px;\r\n                }; \r\n                @media all and (min-width:1100px) and (max-width:2000px) { \r\n                    font-size: 14px;\r\n                }; \r\n            `} \r\n            border-radius: 3.57em;\r\n            border: solid;\r\n            border-width: 0.0714em;\r\n            border-color: #e6e8ea;\r\n            transition: 0.5s all;\r\n            cursor: pointer;\r\n\r\n            ${props.name === props.state ? css`\r\n            color: white;\r\n            background-color: #4F85E8;\r\n            border: none;\r\n            ` : css`\r\n            background-color: white;\r\n            color: #707070;\r\n\r\n            &:hover {\r\n                border-color: #4F85E8;\r\n                color:  #4F85E8;\r\n            }\r\n            &:focus {\r\n                outline: none;\r\n                border-color: #4F85E8;\r\n                color:  #4F85E8;\r\n            }\r\n            `}\r\n        `}{...props} tabIndex={-1}>{props.children}</button>\r\n    )\r\n}\r\n\r\n// 모달의 기본적인 프레임 틀을 짜놓은 컴포넌트\r\nexport const ModalFrame = ({ children }: WrapperProps) => {\r\n    return (\r\n        <div css={css`\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 100%;\r\n        top: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        right: 0;\r\n        background-color: rgba(0, 0, 0, 0.4);\r\n        z-index: 999;\r\n        cursor: pointer;\r\n        padding-bottom: 10em;\r\n        `}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\n// 모달을 띄울 때 사용하는 모달 컴포넌트\r\nexport const Modal = (props: WrapperProps) => {\r\n\r\n    const ModalRef = useRef<HTMLDivElement>(null);\r\n\r\n    useEffect(() => {\r\n        if (ModalRef.current != null) {\r\n            // console.log(\"모달 등장!\", ModalRef.current.style);\r\n            ModalRef.current.style.top = `${(window.screen.height - 480) / 4 + window.scrollY}px`;\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <ModalFrame>\r\n            <div css={css`\r\n                position: absolute;\r\n                width: 100%;\r\n                height: 100%;\r\n                border: none;\r\n                \r\n                display: flex;\r\n                justify-content: center;\r\n                align-items: center;\r\n            `}>\r\n                <div css={css`\r\n                    position: absolute;  \r\n                    // top: ${(window.screen.height - 480) / 4 + window.scrollY}px;\r\n                    -webkit-overflow-scrolling:touch;\r\n\r\n                    font-family: 'Pretendard-Bold';\r\n                    letter-spacing: -0.03em;\r\n                    border-radius: 1.25em;\r\n                    background-color: white;\r\n                    @media (max-width:768px) { \r\n                        font-size: 11px;\r\n                        width: ${window.screen.width / 2 + 140}px;\r\n                        height: 15em;\r\n                        padding-top: 6em;\r\n                        padding-bottom: 6em;\r\n                    }; \r\n                    @media all and (min-width:768px) and (max-width:1099px) { \r\n                        font-size: 13.5px;\r\n                    }; \r\n                    @media all and (min-width:1100px) and (max-width:2000px) { \r\n                        font-size: 18px;\r\n                    }; \r\n                    width: 38em;\r\n                    height: 30em;\r\n                    color: #333d4b;\r\n                    ${props.alt === \"찾기\" && css`height: 35em`}\r\n                    ${props.alt === \"메일_합격\" &&\r\n                    css`\r\n                        @media (max-width:768px) { \r\n                            font-size: 13px;\r\n                            width: ${window.screen.width / 2 + 140}px;\r\n                            height: 15em;\r\n                            padding-top: 6em;\r\n                            padding-bottom: 6em;\r\n                        }; \r\n                            padding-top: 6em;\r\n                            padding-bottom: 6em;\r\n                        `\r\n                    }\r\n                    display: flex;\r\n                    justify-content: center;    \r\n                    align-items: center;\r\n                    animation: ${fadeIn} 0.5s ease-in-out;\r\n                `} ref={ModalRef}>\r\n                    <div css={css`\r\n                        display: flex;\r\n                        flex-direction: column;\r\n                        align-items: center;\r\n                        justify-content: center;\r\n                    `}>\r\n                        {props.imgSrc &&\r\n                            <img alt=\"사람\" src={props.imgSrc}\r\n                                css={css`\r\n                            width: 9.4em;\r\n                            ${props.alt === \"찾기\" &&\r\n                                    'width: 9.5em;'\r\n                                    }\r\n                            ${props.alt === \"최종제출\" &&\r\n                                    'width: 7.5em;'\r\n                                    }\r\n                            ${props.alt === \"불러오기\" &&\r\n                                    'width: 7.5em;'\r\n                                    }\r\n                            margin-bottom: 2em;\r\n                        `} />\r\n                        }\r\n                        <span css={css`\r\n                            @media (max-width:768px) { \r\n                                padding: 1em;\r\n                                font-size: 11px;\r\n                                width: 100%;\r\n                                margin-bottom: -2em;\r\n                            }; \r\n                            @media all and (min-width:768px) and (max-width:1099px) { \r\n                                font-size: 14px;\r\n                            }; \r\n                            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                                font-size: 18px;\r\n                            }; \r\n                            ${props.alt === \"찾기\" && css`margin-bottom: -1em;`}\r\n                        `}>\r\n                            {props.text}\r\n                        </span>\r\n                        <ButtonBox>\r\n                            {props.children}\r\n                        </ButtonBox>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ModalFrame>\r\n    )\r\n}\r\n\r\nexport const ModalInput = (props: InputType) => {\r\n    return (\r\n        <input css={css`\r\n        font-family: 'Pretendard-Medium';\r\n        letter-spacing: -0.03em;\r\n        @media all and (min-width:768px) and (max-width:1099px) { \r\n            font-size: 14px;\r\n        }; \r\n        @media all and (min-width:1100px) and (max-width:2000px) { \r\n            font-size: 18px;\r\n        }; \r\n        padding: 0;\r\n        padding-left: 1em;\r\n        width: 22.5em;\r\n        border: solid;\r\n        border-radius: 0.43em;\r\n        border-color: #e6e8ea;\r\n        border-width: 0.0625em;\r\n        ${props.name === \"인터뷰_시간\" && css`\r\n        @media (max-width:768px) { \r\n            font-size: 8px;\r\n        }; \r\n        @media all and (min-width:768px) and (max-width:1099px) { \r\n            font-size: 11px;\r\n        }; \r\n        @media all and (min-width:1100px) and (max-width:2000px) { \r\n            font-size: 15px;\r\n        }; \r\n        width: 33.5em;\r\n        height: 3.5em;\r\n        `}\r\n        ${props.name === \"인터뷰_장소\" && css`\r\n        @media (max-width:768px) { \r\n            font-size: 8px;\r\n        }; \r\n        @media all and (min-width:768px) and (max-width:1099px) { \r\n            font-size: 11px;\r\n        }; \r\n        @media all and (min-width:1100px) and (max-width:2000px) { \r\n            font-size: 15px;\r\n        }; \r\n        width: 33.5em;\r\n        height: 3.5em;\r\n        `}\r\n        ${props.name === \"인터뷰_소요시간\" && css`\r\n        @media (max-width:768px) { \r\n            font-size: 8px;\r\n        }; \r\n        @media all and (min-width:768px) and (max-width:1099px) { \r\n            font-size: 11px;\r\n        }; \r\n        @media all and (min-width:1100px) and (max-width:2000px) { \r\n            font-size: 15px;\r\n        }; \r\n        width: 33.5em;\r\n        height: 3.5em;\r\n        `}\r\n        ${props.name === \"저장된_학번\" && css`\r\n        @media all and (min-width:768px) and (max-width:1099px) { \r\n            font-size: 12px;\r\n        }; \r\n        @media all and (min-width:1100px) and (max-width:2000px) { \r\n            font-size: 15px;\r\n        }; \r\n        width: 37em;\r\n        height: 3.5em;\r\n        `}\r\n        ${props.name === \"저장된_이메일\" && css`\r\n        @media all and (min-width:768px) and (max-width:1099px) { \r\n            font-size: 12px;\r\n        }; \r\n        @media all and (min-width:1100px) and (max-width:2000px) { \r\n            font-size: 15px;\r\n        }; \r\n        width: 37em;\r\n        height: 3.5em;\r\n        `}\r\n        box-sizing: border-box;\r\n\r\n        &::-webkit-outer-spin-button,\r\n        &::-webkit-inner-spin-button {\r\n            -webkit-appearance: none;\r\n            margin: 0;\r\n        }\r\n\r\n\r\n        &:focus {\r\n            outline-color: #4F85E8;\r\n\r\n            &:hover {\r\n                box-shadow: none;\r\n            }\r\n            // box-shadow: inset 0 0 0 2px #4F85E8;\r\n        }\r\n\r\n        &:hover {\r\n            box-shadow: inset 0 0 0 2px #90c2ff;\r\n        }\r\n\r\n        &::placeholder {\r\n            font-family: 'Pretendard-Regular';\r\n            color: #8B95A1;\r\n            margin-left: 0.4em;\r\n        }\r\n        `}{...props} onClick={() => { return false }} />\r\n    )\r\n}\r\n\r\n// 지원 시간이 끝났을 때 사용자에게 나타내는 주의사항 컴포넌트\r\nexport const EndTime = () => {\r\n    return (\r\n        <section css={css`\r\n            position: absolute;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n        `}>\r\n            <div css={css`\r\n                background-color: white;\r\n                width: 30em;\r\n                height: 25em;\r\n                border-radius: 0.714em;\r\n                border: none;\r\n                @media all and (min-width:768px) and (max-width:1099px) { \r\n                    font-size: 16px;\r\n                }; \r\n                @media all and (min-width:1100px) and (max-width:2000px) { \r\n                    font-size: 16px;\r\n                }; \r\n                letter-spacing: -0.03em;\r\n                line-height: 1.5em;\r\n\r\n                display: flex;\r\n                flex-direction: column;\r\n                justify-content: center;\r\n                align-items: center;\r\n                row-gap: 2em;\r\n            `}>\r\n                <img alt=\"낫 지원기간\" src={oops} css={css`\r\n                    width: 8em;\r\n                `} />\r\n                <span css={css`\r\n                    @media all and (min-width:768px) and (max-width:1099px) { \r\n                        font-size: 17px;\r\n                    }; \r\n                    @media all and (min-width:1100px) and (max-width:2000px) { \r\n                        font-size: 17px;\r\n                    }; \r\n                    letter-spacing: -0.03em;\r\n                    \r\n                    font-family: 'Pretendard-Medium';\r\n                `}>\r\n                    지원이 마감되었습니다<br />결과 발표를 위해 잠시만 기다려주세요\r\n                </span>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\n// 주의사항 컴포넌트\r\nexport const Precautions = () => {\r\n    return (\r\n        <div css={css`\r\n            font-family: 'Pretendard-Medium';\r\n            letter-spacing: -0.03em;\r\n            display: flex;\r\n            flex-direction: column;\r\n            text-align: left;\r\n            width: 46.88vw;\r\n\r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 14px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 14px;\r\n            };\r\n\r\n\r\n            span {\r\n                @media all and (min-width:768px) and (max-width:1099px) { \r\n                    font-size: 14.5px;\r\n                }; \r\n                @media all and (min-width:1100px) and (max-width:2000px) { \r\n                    font-size: 14.5px;\r\n                }; \r\n            }\r\n        `}>\r\n            <InputTitle>주의사항 <Require /> </InputTitle>\r\n            <div css={css`\r\n                display: flex;\r\n\r\n                @media all and (min-width:768px) and (max-width:1099px) { \r\n                    span {\r\n                        font-size: 13px;\r\n                    }\r\n                    font-size: 14px;\r\n                }; \r\n                @media all and (min-width:1100px) and (max-width:2000px) { \r\n                    font-size: 14px;\r\n                }; \r\n\r\n                flex-direction: column;\r\n                row-gap: 0.5em;\r\n                flex-wrap: wrap;\r\n                color: #333d4b;\r\n            `}>\r\n                <span>· 지원서 최종 제출 후에는 지원서의 수정이 불가능합니다.</span>\r\n                <span>· 작성 중인 지원서는 임시저장 버튼을 통해 실시간으로 저장이 가능합니다.</span>\r\n                <span>· 지원서 접수 마감일에는 지원자가 몰려 지원이 어려울 수 있으니, 여유있게 미리 제출해주시기 바랍니다.</span>\r\n                <span>· 문항에 따른 올바른 입력을 해주셔야 지원서의 다음 단계로 이동하실 수 있습니다.</span>\r\n                <span>· 지원서의 내용이 사실과 다를 경우, 합격이 취소되거나 전형 상의 불이익을 받을 수 있습니다.</span>\r\n                <span>· 지원서는 문항별 최대 1000자의 제한을 두고 있으나, 문항을 다 채우실 필요는 없습니다.</span>\r\n                <span>· 문의사항은 우측 하단 채널 톡으로 문의해주시면 최대한 빠르게 도와드리겠습니다.</span>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\n// 포지션 컴포넌트의 컨테이너 틀\r\nexport const PositionBox = (props: WrapperProps) => {\r\n    return (\r\n        <div css={css`\r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 12.7px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 16px;\r\n            };  \r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr 1fr;\r\n            column-gap: 2em; // 32px\r\n            width: 46.88vw; // 900px\r\n            ${props.alt === \"모달\" && css`width: 35em;`} \r\n        `}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n// 로딩중을 표시하는 컴포넌트\r\nexport const Loading = () => {\r\n    return (\r\n        <img alt=\"로딩 이미지\" src={loading} css={css`\r\n            @media (max-width:768px) { \r\n                font-size: 6px;\r\n            }; \r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 12.7px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 14px;\r\n            };  \r\n\r\n            width: 12em;\r\n        `} />\r\n    )\r\n}\r\n\r\n// 뒤로가기 및 취소\r\nexport const Quit = (props: ImgClickType) => {\r\n    return (\r\n        <img alt=\"뒤로가기\" onClick={props.onClick} src={back} css={css`\r\n            width: .9em;\r\n            transition: 0.4s all;\r\n            margin-top: 2em;\r\n            margin-bottom: 1em;\r\n            cursor: pointer;\r\n\r\n            ${props.alt === \"찾기\" && css`\r\n                @media all and (min-width:768px) and (max-width:1099px) { \r\n                    font-size: 13px;\r\n                    margin-top: -16.8em;\r\n                }; \r\n                @media all and (min-width:1100px) and (max-width:2000px) { \r\n                    font-size: 17.5px;\r\n                }; \r\n\r\n                position: absolute;\r\n                margin-top: -17em;\r\n                margin-left: 35em;\r\n            `}\r\n\r\n            &:hover {\r\n                opacity: 60%;\r\n            }\r\n        `} />\r\n    )\r\n}\r\n\r\n// textarea를 입력했을 때, 사용자가 몇자를 입력했는지 나타내주는 컴포넌트\r\nexport const WordLength = ({ children }: WrapperProps) => {\r\n    return (\r\n        <div css={css`\r\n            width: 10em;\r\n            position: relative;\r\n            text-align:center;\r\n            font-family: 'Pretendard-Medium';\r\n            letter-spacing: -0.03em;\r\n\r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 13px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 13px;\r\n            }; \r\n\r\n            color: #4F85E8;\r\n            margin-left: auto;\r\n            margin-top: -2.2em;\r\n            margin-bottom: .5em;\r\n\r\n            display:flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n        `}>\r\n            <div css={css`\r\n                width: 1.69vw;\r\n                border-box: box-sizing;\r\n            `}>\r\n                {children}\r\n            </div>\r\n            <span css={css`\r\n                margin-right: 0.3em;\r\n            `}>/</span>\r\n            <span css={css`\r\n                @media all and (min-width:768px) and (max-width:1099px) { \r\n                    font-size: 13px;\r\n                }; \r\n                @media all and (min-width:1100px) and (max-width:2000px) { \r\n                    font-size: 13px;\r\n                }; \r\n            `}>1000</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n// 필수로 작성해야하는 질문지를 표시해주는 컴포넌트\r\nexport const Require = () => {\r\n    return (\r\n        <span css={css`\r\n            margin-left: 0.4em;\r\n            font-family: 'Pretendard-Medium';\r\n            letter-spacing: -0.02em;\r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 14px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 14px;\r\n            }; \r\n            color: #ff0000;\r\n        `}>* </span>\r\n    )\r\n}\r\n\r\n// 주의사항 확인을 했음에 동의를 구하는 컴포넌트\r\nexport const ArgreeBox = ({ children }: WrapperProps) => {\r\n    return (\r\n        <div css={css`\r\n            display: flex;\r\n            flex-direction: column;\r\n            margin-top: 1.3em;\r\n            row-gap: 0.6em;\r\n        `}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport interface AgreeType {\r\n    src: string;\r\n    text: string;\r\n    onClick: (event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void;\r\n    name: string;\r\n}\r\n\r\n// 체크박스 컴포넌트\r\nexport const Argree = ((props: AgreeType) => {\r\n    return (\r\n        <div css={css`\r\n            display: flex;\r\n            flex-direction: column;\r\n            width: 46.88vw;\r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 14.5px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 14.5px;\r\n            };\r\n        `}>\r\n            <div css={css`\r\n                display: flex;\r\n                align-items: center;\r\n            `}>\r\n                <img alt={props.name} onClick={props.onClick} src={props.src} css={css`\r\n                    width: 1.1em;\r\n                    cursor: pointer;\r\n                `} />\r\n                <span css={css`\r\n                    @media all and (min-width:768px) and (max-width:1099px) { \r\n                        font-size: 13px;\r\n                    }; \r\n                    @media all and (min-width:1100px) and (max-width:2000px) { \r\n                        font-size: 14.5px;\r\n                    }; \r\n                    font-family: 'Pretendard-Medium';\r\n                    letter-spacing: -0.03em;\r\n                    margin-left: 0.4em;\r\n                    cursor: pointer;\r\n                    color: #333d4b;\r\n                `} onClick={props.onClick} id={props.name} >{props.text}<Require /></span>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n// 푸터 컴포넌트\r\nexport const Footer = () => {\r\n    return (\r\n        <section css={css`\r\n            margin-top: 5em;\r\n            width: 100%;\r\n            height: 100%;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            background-color: #f9fafb;\r\n            padding-top: 4em;\r\n            padding-bottom: 4em;\r\n        `}>\r\n            <div css={css`\r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 14px;\r\n\r\n                span {\r\n                    font-size: 12px;\r\n                }\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 14px;\r\n            }; \r\n            width: 46.88vw;\r\n            height: 100%;\r\n            font-family: 'Pretendard-Regular';\r\n            letter-spacing: -0.03em;\r\n            margin-left: 0.4em;\r\n            color: #8b95a1;\r\n\r\n            text-align: left;\r\n\r\n            display: flex;\r\n            flex-direction: column;\r\n            row-gap: .4em;\r\n\r\n        `}>\r\n                <span css={css`\r\n                font-family: 'Pretendard-Bold';\r\n                color: #333d4b;\r\n                @media all and (min-width:768px) and (max-width:1099px) { \r\n                    font-size: 14.5px !important;\r\n\r\n                }; \r\n                @media all and (min-width:1100px) and (max-width:2000px) { \r\n                    font-size: 15.7px !important;\r\n                }; \r\n                margin-bottom: 0.6em;\r\n            `}> 멋쟁이사자처럼 강남대학교 11기</span>\r\n                <span>경기도 용인시 기흥구 강남로 40 강남대학교 이공관</span>\r\n                <span>개발 팀 : 성창규 · 김현우</span>\r\n                <span>QA 팀 : 배채은 · 이수아 · 이진아 · 이지현 · 구보선</span>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport const Banner = () => {\r\n\r\n    return (\r\n        <img alt=\"배너 이미지\" src={banner} css={css`\r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 15px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 15px;\r\n            }; \r\n            margin-top: 8em;\r\n            width: 22em;  // 테스트\r\n            height: auto;\r\n            margin-bottom: 1em;\r\n            // animation: ${fadeLeft} 1.8s ease-in-out;\r\n        `} loading=\"lazy\" />\r\n    )\r\n}\r\n\r\n// 전체적인 내용이 섹션 안으로 들어가게 됩니다, 전체적인 틀 컴포넌트\r\nexport const Section = ({ children }: WrapperProps) => {\r\n    return (\r\n        <>\r\n            <section css={css`\r\n            position: absolute;\r\n            left: 50%;\r\n            transform: translate(-50%);\r\n            // max-width: 73em;\r\n            width: 100%;\r\n            background-color: white;\r\n\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            row-gap: 1.5em;\r\n\r\n            @media (max-width: 1024px) {\r\n                display: none;\r\n            }\r\n\r\n        `}>\r\n                {children}\r\n                <Footer />\r\n            </section>\r\n            <NotWidth />\r\n        </>\r\n    )\r\n}\r\n\r\n// 기본 인적사항에서 input이 무엇을 받을지 알려주는 제목 컴포넌트\r\nexport const InputTitle = ({ children }: WrapperProps) => {\r\n    return (\r\n        <p css={css`\r\n            font-family: 'Pretendard-Medium';\r\n            letter-spacing: -0.03em;\r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 14px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 15px;\r\n            }; \r\n            color: #4e5968;\r\n            width: 46.88vw;\r\n            align-items: center;\r\n            \r\n            \r\n        `}>\r\n            {children}\r\n        </p>\r\n    )\r\n}\r\n\r\n// 학과를 검색할 때 네이버 검색창 처럼 보여주는 컴포넌트\r\nexport const SearchDepartment = ({ children }: WrapperProps) => {\r\n    return (\r\n        <div css={css`\r\n            font-family: 'Pretendard-Regular';\r\n            letter-spacing: -0.03em;\r\n            background-color: white;\r\n            border: none;\r\n            border-radius: 0.769em;\r\n            @media all and (min-width:768px) and (max-width:1099px) {\r\n                margin-top: 0.18em; \r\n                font-size: 15px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 15px;\r\n            }; \r\n            padding: 1em;\r\n            row-gap: 0.5em;\r\n            box-shadow: 0.15em 0.23em 0.38em 0em #707070;\r\n            display: flex;\r\n            flex-direction: column;\r\n            height: 5em;\r\n        `}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\n// 각 인적사항 별로 보기 쉽게 만들어놓은 컨테이너 틀\r\nexport const Article = ({ children }: WrapperProps) => {\r\n    return (\r\n        <article css={css`\r\n            display: flex;\r\n            flex-direction: column;\r\n            text-align: left;\r\n            justify-content: center;\r\n            // animation: ${fadeUp} 2s ease-in-out;\r\n        `}>\r\n            {children}\r\n        </article>\r\n    )\r\n}\r\n\r\n// 사용자가 잘못된 입력을 했을 때 나타내주는 컴포넌트\r\nexport const ErrorDescription = ({ children }: WrapperProps) => {\r\n    return (\r\n        <span css={css`\r\n            position: absolute;\r\n            font-family: 'Pretendard-Regular';\r\n            letter-spacing: -0.03em;\r\n            font-size:13px;\r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 13px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 13px;\r\n            }; \r\n            margin-top: 10.2em;\r\n            margin-left: .5em;\r\n            color: red;\r\n        `}>\r\n            {children}\r\n        </span>\r\n    )\r\n}\r\n\r\n// 사용자가 정확한 입력을 했을 때 나타내주는 컴포넌트\r\nexport const CollectDescription = ({ children }: WrapperProps) => {\r\n    return (\r\n        <span css={css`\r\n            position: absolute;\r\n            font-family: 'Pretendard-Regular';\r\n            letter-spacing: -0.03em;\r\n            font-size: 13px;\r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 13px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 13px;\r\n            }; \r\n            margin-top: 10.2em;\r\n            margin-left: .5em;\r\n            color: #11BD7E;\r\n        `}>\r\n            {children}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport interface ButtonType {\r\n    name?: string;\r\n    children?: React.ReactNode;\r\n    disabled?: boolean;\r\n    onClick?: () => void;\r\n    alt?: string;\r\n}\r\n\r\n// 기본 버튼 컴포넌트\r\nexport const Button = (props: ButtonType) => {\r\n    return (\r\n        <button css={css`\r\n            font-family: 'Pretendard-Bold';\r\n            letter-spacing: -0.03em;\r\n            @media (max-width:768px) { \r\n                font-size: 6px;\r\n                border-radius: 4px;\r\n            }; \r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 11.5px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 15.5px;\r\n            }; \r\n            width: 15em;\r\n            height: 3.5em;\r\n            border: none;\r\n            border-radius: 8px;\r\n            ${props.alt === \"불러오기\" && css`\r\n                width: 40em;\r\n\r\n                @media all and (min-width:768px) and (max-width:1099px) { \r\n                    font-size: 11px;\r\n                }; \r\n                @media all and (min-width:1100px) and (max-width:2000px) { \r\n                    font-size: 14px;\r\n                }; \r\n                height: 3.8em;\r\n                border-radius: 0.58em;\r\n            `}\r\n            color: white;\r\n            transition: 0.5s all;\r\n            ${props.name === \"임시저장\" && `background-color : #2F353E;`}\r\n            ${props.name === \"제출하기\" && `background-color : #4F85E8;`}\r\n            ${props.disabled ?\r\n                css`\r\n                    cursor: auto;\r\n                    filter: grayscale(100%);\r\n                    background-color: #828282;\r\n                ` :\r\n                css`\r\n                    cursor: pointer;\r\n                    &:hover {\r\n                        opacity: 80%;\r\n                    }\r\n                    `\r\n            }\r\n        `} {...props} tabIndex={-1}>\r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\n\r\n// flex 속성의 버튼을 모아주는 큰 틀의 컨테이너 틀 \r\nexport const ButtonBox = (props: WrapperProps) => {\r\n    return (\r\n        <div css={css`\r\n            display: flex;\r\n            column-gap: 1em;\r\n            margin-top: 3em;\r\n            width: 46.88vw;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            ${props.alt === \"임시저장_모달\" && css`margin-top: 0em;`}\r\n        `}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport interface InputType {\r\n    type?: string;\r\n    placeholder?: string;\r\n    value?: string | number;\r\n    disabled?: boolean;\r\n    maxLength?: number;\r\n    name?: string;\r\n    tabIndex?: number;\r\n    onChange?: (event: ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport interface TextAreaType {\r\n    type?: string;\r\n    placeholder?: string;\r\n    value?: string;\r\n    disabled?: boolean;\r\n    maxLength?: number;\r\n    name?: string;\r\n    onChange?: (event: ChangeEvent<HTMLTextAreaElement>) => void;\r\n}\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\404\\NotTime.tsx",["289","290","291","292","293"],[],"/** @jsxImportSource @emotion/react */\r\nimport { css, keyframes } from \"@emotion/react\";\r\nimport React from 'react'\r\nimport { Button, Modal, Section } from '../emotion/component'\r\nimport oops from '../../images/oops.png';\r\nimport { Link } from \"react-router-dom\";\r\nimport { fadeUp } from \"../../styles/Keyframes\";\r\n\r\nexport default function NotTime() {\r\n    return (\r\n        <div css={css`\r\n            position: absolute;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            width: 60%;\r\n\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n        `}>\r\n            <img alt=\"404\" src={oops} css={css`\r\n                width: 8.5em;\r\n                animation: ${fadeUp} 1s ease-in-out;\r\n            `} />\r\n            <span css={css`\r\n                font-family: 'Pretendard-Bold';\r\n                letter-spacing: -0.03em;\r\n                color: #333d4b;\r\n                margin-top: 1em;\r\n                font-size: 15px;\r\n                animation: ${fadeUp} 1s ease-in-out;\r\n            `}>현재는 예비 사자 모집 기간이 아니에요!</span>\r\n        </div>\r\n    )\r\n}\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\common\\Header.tsx",["294","295","296","297"],[],"/** @jsxImportSource @emotion/react */\r\nimport { css, keyframes } from \"@emotion/react\";\r\nimport React, { useState } from 'react'\r\nimport { useEffect } from 'react';\r\nimport { HeaderDescription, HeaderType } from '../emotion/component';\r\nimport { Outlet, useLocation } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport { HeaderText } from '../emotion/component';\r\n\r\nexport default function Header() {\r\n\r\n    const location = useLocation();\r\n\r\n    return (\r\n        <>\r\n            <div css={css`\r\n\r\n        @media (max-width:768px) { \r\n            width: 100%;\r\n            font-size: 11px;\r\n            column-gap: .2em;\r\n        }; \r\n\r\n\r\n        width: 100%;\r\n        height: 7em;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        column-gap: 4em;\r\n    `}>\r\n                <Link to=\"/admin/main\" tabIndex={-1}>\r\n                    <HeaderText path={location.pathname} url={\"/admin/main\"}>전체 지원서</HeaderText>\r\n                </Link>\r\n                <Link to=\"/admin/temp\" tabIndex={-1}>\r\n                    <HeaderText path={location.pathname} url={\"/admin/temp\"}>임시 지원서</HeaderText>\r\n                </Link>\r\n                <Link to=\"/admin/pass\" tabIndex={-1}>\r\n                    <HeaderText path={location.pathname} url={\"/admin/pass\"}>합격 지원서</HeaderText>\r\n                </Link>\r\n                <Link to=\"/admin/fail\" tabIndex={-1}>\r\n                    <HeaderText path={location.pathname} url={\"/admin/fail\"}>불합 지원서</HeaderText>\r\n                </Link>\r\n            </div>\r\n            <p css={css`\r\n            font-size: 24.5px;\r\n\r\n            @media (max-width:768px) { \r\n                font-size: 14.5px;\r\n            }; \r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 21px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 24.5px;\r\n            }; \r\n\r\n            font-family: 'Pretendard-Bold';\r\n            letter-spacing: -0.03em;\r\n            color: rgb(51, 61, 75);\r\n        `}> 멋쟁이사자처럼과 함께할 인재들을 선정해주세요 </p>\r\n            <div css={css`\r\n                margin-top: -1em;\r\n                display: flex;\r\n                flex-direction: column;\r\n                row-gap: 0.2em;\r\n                margin-bottom: 1em;\r\n\r\n                @media (max-width:768px) { \r\n                    margin-top: -.5em;\r\n                }; \r\n                \r\n            `}>\r\n                <HeaderDescription> 정직함으로 올바른 멋쟁이사자처럼 합류 여정을 만들어주세요 </HeaderDescription>\r\n                {location.pathname === \"/admin/main\" && <HeaderDescription> 현재 페이지는 지원자분들의 최종 제출된 지원서를 볼 수 있어요 </HeaderDescription>}\r\n                {location.pathname === \"/admin/temp\" && <HeaderDescription> 현재 페이지는 지원자분들의 임시 저장된 지원서를 볼 수 있어요 </HeaderDescription>}\r\n                {location.pathname === \"/admin/pass\" && <HeaderDescription> 현재 페이지는 지원자분들의 합격된 지원서를 볼 수 있어요 </HeaderDescription>}\r\n                {location.pathname === \"/admin/fail\" && <HeaderDescription> 현재 페이지는 지원자분들의 불합격된 지원서를 볼 수 있어요 </HeaderDescription>}\r\n            </div>\r\n            <Outlet />\r\n        </>\r\n    )\r\n}\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\class.ts",[],[],"C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\time\\time.ts",[],[],"C:\\apply-page-backend\\src\\main\\frontend\\src\\hooks\\Confetti.tsx",["298"],[],"import React, { useCallback, useEffect, useRef } from \"react\";\r\nimport ReactCanvasConfetti from \"react-canvas-confetti\";\r\nimport { type IProps } from \"react-canvas-confetti\";\r\n\r\nconst canvasStyles = {\r\n    position: \"fixed\",\r\n    pointerEvents: \"none\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    top: 0,\r\n    left: 0\r\n} as React.CSSProperties;\r\n\r\ntype CreateConfetti = NonNullable<Parameters<NonNullable<IProps[\"refConfetti\"]>>[0]>;\r\n\r\nexport default function Confetti() {\r\n\r\n    const refAnimationInstance = useRef<CreateConfetti | null>(null);\r\n\r\n    useEffect(() => {\r\n        fire();\r\n    }, []);\r\n\r\n    const getInstance = useCallback((instance: any) => {\r\n        refAnimationInstance.current = instance;\r\n    }, []);\r\n\r\n    const makeShot = useCallback((particleRatio: any, opts: any) => {\r\n        refAnimationInstance.current &&\r\n            refAnimationInstance.current({\r\n                ...opts,\r\n                origin: { y: 0.7 },\r\n                particleCount: Math.floor(200 * particleRatio)\r\n            });\r\n    }, []);\r\n\r\n    const fire = useCallback(() => {\r\n        makeShot(0.25, {\r\n            spread: 26,\r\n            startVelocity: 55\r\n        });\r\n\r\n        makeShot(0.2, {\r\n            spread: 60\r\n        });\r\n\r\n        makeShot(0.35, {\r\n            spread: 100,\r\n            decay: 0.91,\r\n            scalar: 0.8\r\n        });\r\n\r\n        makeShot(0.1, {\r\n            spread: 120,\r\n            startVelocity: 25,\r\n            decay: 0.92,\r\n            scalar: 1.2\r\n        });\r\n\r\n        makeShot(0.1, {\r\n            spread: 120,\r\n            startVelocity: 45\r\n        });\r\n    }, [makeShot]);\r\n\r\n    return (\r\n        <>\r\n            <ReactCanvasConfetti refConfetti={getInstance} style={canvasStyles} />\r\n        </>\r\n    );\r\n}","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\detail\\Detail.tsx",["299","300","301","302","303","304","305","306","307"],[],"/** @jsxImportSource @emotion/react */\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Answer, Article, Quit, Section } from './emotion/component'\r\nimport { ButtonBox, Button } from './emotion/component'\r\nimport { useLocation, useNavigate, useParams } from 'react-router-dom'\r\nimport axios from 'axios';\r\nimport { Loading } from '../../emotion/component';\r\nimport { DetailType } from './Type';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TestState } from '../../../app/store';\r\nimport { onModalType } from '../emotion/component';\r\nimport { saveModalState } from '../../../features/fetcherSlice';\r\nimport { css, keyframes } from \"@emotion/react\";\r\n\r\nexport default function Detail(props: DetailType) {\r\n\r\n    const [name, setName] = useState<string>('');\r\n    const [sid, setSid] = useState<string>('');\r\n    const [department, setDepartment] = useState<string>('');\r\n    const [track, setTrack] = useState<string>('');\r\n    const [phone, setPhone] = useState<string>('');\r\n    const [state, setState] = useState<boolean>(false);\r\n    const [email, setEmail] = useState<string>('');\r\n\r\n    const [motive, setMotive] = useState('');\r\n    const [hardwork, setHardwork] = useState('');\r\n    const [keyword, setKeyword] = useState('');\r\n    const [mostDeeplyWork, setMostDeeplyWork] = useState('');\r\n    const [buttonState, setButtonState] = useState<boolean>(false);\r\n    const [buttonCount, setButtonCount] = useState<number>(0);\r\n\r\n    const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n\r\n    // 프론트엔드\r\n    const [whyFrontend, setWhyFrontend] = useState('');\r\n    const [usingStack, setUsingStack] = useState('');\r\n    const [teamProject, setTeamProject] = useState('');\r\n    const [achieve, setAchieve] = useState('');\r\n    const [portfolioLink, setPortfolioLink] = useState('');\r\n\r\n    // 백엔드\r\n    const [difficultAndOvercoming, setDifficultAndOvercoming] = useState('');\r\n    const [studyFramework, setStudyFramework] = useState('');\r\n    const [importantGroup, setImportantGroup] = useState('');\r\n\r\n    // 디자인\r\n    const [whyDesign, setWhyDesign] = useState('');\r\n    const [toolExperience, setToolExperience] = useState('');\r\n    const [teamworkExperience, setTeamworkExperience] = useState('');\r\n    const [designGrowth, setDesignGrowth] = useState('');\r\n\r\n    const userModalState = useSelector((state: TestState) => state.fetcher.userModalState);\r\n    const adminState = useSelector((state: TestState) => (state.fetcher.adminState));\r\n\r\n\r\n    useEffect(() => {\r\n        // console.log(position);\r\n        // console.log(location);\r\n        // console.log(userSid);\r\n\r\n        if (adminState === false) {\r\n            navigate('/error');\r\n        }\r\n\r\n        if (props.position === '프론트엔드') {\r\n            setTrack(\"프론트엔드\")\r\n            axios.get(`/frontendApplication?sid=${props.sid}`)\r\n                .then((res) => {\r\n                    // console.log(res);\r\n                    setName(res.data.name);\r\n                    setSid(res.data.sid);\r\n                    setDepartment(res.data.department);\r\n                    setPhone(res.data.phoneNumber);\r\n                    setState(res.data.passOrNot);\r\n                    setEmail(res.data.email);\r\n\r\n                    setMotive(res.data.motive);\r\n                    setHardwork(res.data.hardWork);\r\n                    setKeyword(res.data.keyWord);\r\n                    setMostDeeplyWork(res.data.mostDeeplyWork);\r\n\r\n                    setWhyFrontend(res.data.whyFrontend);\r\n                    setUsingStack(res.data.usingStack);\r\n                    setTeamProject(res.data.teamProject);\r\n                    setAchieve(res.data.achieve);\r\n                    setPortfolioLink(res.data.portfolioLink);\r\n                })\r\n        }\r\n\r\n        if (props.position === '백엔드') {\r\n            setTrack(\"백엔드\")\r\n            axios.get(`/backendApplication?sid=${props.sid}`)\r\n                .then((res) => {\r\n                    // console.log(res);\r\n                    setName(res.data.name);\r\n                    setSid(res.data.sid);\r\n                    setDepartment(res.data.department);\r\n                    setPhone(res.data.phoneNumber);\r\n                    setState(res.data.passOrNot);\r\n                    setEmail(res.data.email);\r\n\r\n                    setMotive(res.data.motive);\r\n                    setHardwork(res.data.hardWork);\r\n                    setKeyword(res.data.keyWord);\r\n                    setMostDeeplyWork(res.data.mostDeeplyWork);\r\n\r\n                    setDifficultAndOvercoming(res.data.difficultAndOvercoming);\r\n                    setStudyFramework(res.data.studyFramework);\r\n                    setImportantGroup(res.data.importantGroup);\r\n                    setPortfolioLink(res.data.portfolioLink);\r\n                })\r\n        }\r\n\r\n        if (props.position === '디자인') {\r\n            setTrack(\"디자인\")\r\n            axios.get(`/designApplication?sid=${props.sid}`)\r\n                .then((res) => {\r\n                    // console.log(\"디자인\", res);\r\n                    setName(res.data.name);\r\n                    setSid(res.data.sid);\r\n                    setDepartment(res.data.department);\r\n                    setPhone(res.data.phoneNumber);\r\n                    setState(res.data.passOrNot);\r\n                    setEmail(res.data.email);\r\n\r\n                    setMotive(res.data.motive);\r\n                    setHardwork(res.data.hardWork);\r\n                    setKeyword(res.data.keyWord);\r\n                    setMostDeeplyWork(res.data.mostDeeplyWork);\r\n\r\n                    setWhyDesign(res.data.whyDesign);\r\n                    setToolExperience(res.data.toolExperience);\r\n                    setTeamworkExperience(res.data.teamworkExperience);\r\n                    setDesignGrowth(res.data.designGrowth);\r\n                    setPortfolioLink(res.data.portfolioLink);\r\n                })\r\n        }\r\n    }, []);\r\n\r\n    const PassLogic = () => {\r\n        if (props.position === '백엔드') {\r\n            if (state === false) {\r\n                if (window.confirm(`${name}님을 정말 합격처리 하시겠어요?`)) {\r\n                    axios.put(`/backendApplication/changePassOrNot?sid=${props.sid}`)\r\n                        .then((res) => {\r\n                            alert(`${name}님의 합격처리가 되었습니다!`)\r\n                            setState(true);\r\n                            setButtonCount(0);\r\n                            setButtonState(false);\r\n                        })\r\n                } else {\r\n                    setButtonCount(0);\r\n                    setButtonState(false);\r\n                }\r\n            } else {\r\n                alert(\"이미 합격된 사용자입니다!\");\r\n                setButtonCount(0);\r\n                setButtonState(false);\r\n            }\r\n        }\r\n        if (props.position === '프론트엔드') {\r\n            if (state === false) {\r\n                if (window.confirm(`${name}님을 정말 합격처리 하시겠어요?`)) {\r\n                    axios.put(`/frontendApplication/changePassOrNot?sid=${props.sid}`)\r\n                        .then((res) => {\r\n                            alert(`${name}님의 합격처리가 되었습니다!`)\r\n                            setState(true);\r\n                            setButtonCount(0);\r\n                            setButtonState(false);\r\n                        })\r\n                } else {\r\n                    setButtonCount(0);\r\n                    setButtonState(false);\r\n                }\r\n            } else {\r\n                alert(\"이미 합격된 사용자입니다!\");\r\n                setButtonCount(0);\r\n                setButtonState(false);\r\n            }\r\n        }\r\n        if (props.position === '디자인') {\r\n            if (state === false) {\r\n                if (window.confirm(`${name}님을 정말 합격처리 하시겠어요?`)) {\r\n                    axios.put(`/designApplication/changePassOrNot?sid=${props.sid}`)\r\n                        .then((res) => {\r\n                            alert(`${name}님의 합격처리가 되었습니다!`)\r\n                            setState(true);\r\n                            setButtonCount(0);\r\n                            setButtonState(false);\r\n                        })\r\n                } else {\r\n                    setButtonCount(0);\r\n                    setButtonState(false);\r\n                }\r\n            } else {\r\n                alert(\"이미 합격된 사용자입니다!\");\r\n                setButtonCount(0);\r\n                setButtonState(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const changePass = async () => {\r\n        await setButtonCount((prev) => (prev + 1));\r\n        await setButtonState(true);\r\n        await PassLogic();\r\n    }\r\n\r\n    const FailLogic = () => {\r\n        if (props.position === '백엔드') {\r\n            if (state === true) {\r\n                if (window.confirm(`${name}님을 정말 불합격처리 하시겠어요?`)) {\r\n                    axios.put(`/backendApplication/changePassOrNot?sid=${props.sid}`)\r\n                        .then((res) => {\r\n                            alert(`${name}님의 불합격처리가 되었습니다!`)\r\n                            setState(false);\r\n                            setButtonCount(0);\r\n                            setButtonState(false);\r\n                        })\r\n                } else {\r\n                    setButtonCount(0);\r\n                    setButtonState(false);\r\n                }\r\n            } else {\r\n                alert(\"이미 불합격된 사용자입니다!\");\r\n                setButtonCount(0);\r\n                setButtonState(false);\r\n            }\r\n        }\r\n        if (props.position === '프론트엔드') {\r\n            if (state === true) {\r\n                if (window.confirm(`${name}님을 정말 불합격처리 하시겠어요?`)) {\r\n                    axios.put(`/frontendApplication/changePassOrNot?sid=${props.sid}`)\r\n                        .then((res) => {\r\n                            alert(`${name}님의 불합격처리가 되었습니다!`)\r\n                            setState(false);\r\n                            setButtonCount(0);\r\n                            setButtonState(false);\r\n                        })\r\n                } else {\r\n                    setButtonCount(0);\r\n                    setButtonState(false);\r\n                }\r\n            } else {\r\n                alert(\"이미 불합격된 사용자입니다!\");\r\n                setButtonCount(0);\r\n                setButtonState(false);\r\n            }\r\n        }\r\n        if (props.position === '디자인') {\r\n            if (state === true) {\r\n                if (window.confirm(`${name}님을 정말 불합격처리 하시겠어요?`)) {\r\n                    axios.put(`/designApplication/changePassOrNot?sid=${props.sid}`)\r\n                        .then((res) => {\r\n                            alert(`${name}님의 불합격처리가 되었습니다!`)\r\n                            setState(false);\r\n                            setButtonCount(0);\r\n                            setButtonState(false);\r\n                        })\r\n                } else {\r\n                    setButtonCount(0);\r\n                    setButtonState(false);\r\n                }\r\n            } else {\r\n                alert(\"이미 불합격된 사용자입니다!\");\r\n                setButtonCount(0);\r\n                setButtonState(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    const changeFail = async () => {\r\n        await setButtonCount((prev) => (prev + 1));\r\n        await setButtonState(true);\r\n        await FailLogic();\r\n    }\r\n\r\n    const closeModal = async () => {\r\n        await dispatch(saveModalState({ userModalState: false }))\r\n    }\r\n\r\n    return (\r\n        <Section>\r\n            {name ?\r\n                <Article>\r\n                    <Quit onClick={closeModal} />\r\n                    <span css={css`\r\n                        font-family: 'Pretendard-Regular';\r\n                        color: #333D4B;\r\n                        letter-spacing: -0.03em;\r\n\r\n                        @media (max-width:768px) { \r\n                            font-size: 15px;\r\n                        }; \r\n                \r\n                        @media all and (min-width:768px) and (max-width:1099px) { \r\n                            font-size: 23px;\r\n                        }; \r\n                        @media all and (min-width:1100px) and (max-width:2000px) { \r\n                            font-size: 30px;\r\n                        }; \r\n                        font-size: 30px;\r\n\r\n                    `}>\r\n                        <span css={css`\r\n                            font-family: 'Pretendard-Medium';\r\n                            letter-spacing: -0.03em;\r\n                        `}>{name}</span>\r\n                        님의\r\n                        <span css={css`\r\n                            font-family: 'Pretendard-Medium';\r\n                            letter-spacing: -0.03em;\r\n                        `}> {track} </span>\r\n                        지원서\r\n                    </span>\r\n                    <span css={css`\r\n                        font-family: 'Pretendard-Medium';\r\n                        color: #333D4B;\r\n                        letter-spacing: -0.03em;\r\n                        \r\n                        @media (max-width:768px) { \r\n                            font-size: 7px;\r\n                        }; \r\n                \r\n                        @media all and (min-width:768px) and (max-width:1099px) { \r\n                            font-size: 15px;\r\n                        }; \r\n                        @media all and (min-width:1100px) and (max-width:2000px) { \r\n                            font-size: 16px;\r\n                        };\r\n                        font-size: 16px;\r\n\r\n                        margin-bottom: 3em;\r\n                    `}> 지원서 상태 :\r\n                        <span css={css`\r\n                            font-family: 'Pretendard-Bold';\r\n                        `}> {state ? \"합격\" : \"불합격\"}</span>\r\n                    </span>\r\n\r\n                    <Answer name=\"이름\">\r\n                        {name}\r\n                    </Answer>\r\n                    <Answer name=\"학번\">\r\n                        {sid}\r\n                    </Answer>\r\n                    <Answer name=\"학과\">\r\n                        {department}\r\n                    </Answer>\r\n                    <Answer name=\"지원 트랙\">\r\n                        {track}\r\n                    </Answer>\r\n                    <Answer name=\"이메일\">\r\n                        {email}\r\n                    </Answer>\r\n                    <Answer name=\"연락처\">\r\n                        {phone}\r\n                    </Answer>\r\n                    <Answer name=\"지원자분의 인생의 최종 목표는 무엇인가요?\">\r\n                        {motive}\r\n                    </Answer>\r\n                    <Answer name=\"학교 공부를 제외하고 본인의 인생에 있어서 가장 열심히 했던 활동은 무엇인가요?\">\r\n                        {hardwork}\r\n                    </Answer>\r\n                    <Answer name=\"자신을 설명할 수 있는 키워드 3개와 그 이유에 대하여 설명해주세요\">\r\n                        {keyword}\r\n                    </Answer>\r\n                    <Answer name=\"최근에 가장 감명 깊었던 책 · 영화 · 노래가 있다면 하나를 선택해주시고, 그 이유에 대하여 설명해주세요\">\r\n                        {mostDeeplyWork}\r\n                    </Answer>\r\n                    {track === \"프론트엔드\" &&\r\n                        <>\r\n                            <Answer name=\"프론트엔드 트랙을 선택하게 된 이유를 구체적으로 서술해주세요\">\r\n                                {whyFrontend}\r\n                            </Answer>\r\n                            <Answer name=\"프론트엔드 개발과 관련된 프레임워크나 html, css, js 등의 언어를 사용해 보신 적 있으신가요? 있으시다면 어디까지 사용해 보셨는지 구체적으로 적어주세요.\">\r\n                                {usingStack}\r\n                            </Answer>\r\n                            <Answer name=\"팀 활동이나 프로젝트를 경험해본 내용과 이를 통해 자신의 성장 경험에 대해서 서술해주세요\">\r\n                                {teamProject}\r\n                            </Answer>\r\n                            <Answer name=\"멋사 프론트엔드 아기사자로 활동하면서 얻어 가고 싶은 것은 무엇인가요?\">\r\n                                {achieve}\r\n                            </Answer>\r\n                            <Answer name=\"포트폴리오 링크가 있다면 첨부해주세요\">\r\n                                {portfolioLink === '' ? \"포트폴리오 미첨부\" :\r\n                                    <a href={portfolioLink} target=\"_blank\">\r\n                                        {portfolioLink}\r\n                                    </a>\r\n                                }\r\n                            </Answer>\r\n                        </>\r\n                    }\r\n                    {track === \"백엔드\" &&\r\n                        <>\r\n                            <Answer name=\"개발 관련 공부를 하며 개인적으로 힘들었던 경험과 그걸 극복했던 자신만의 방법이 있나요?\">\r\n                                {difficultAndOvercoming}\r\n                            </Answer>\r\n                            <Answer name=\"웹 백앤드 프레임워크를 공부해보신적 있으신가요? 있으시다면 어디까지 공부해보셨나요?\">\r\n                                {studyFramework}\r\n                            </Answer>\r\n                            <Answer name=\"단체생활에서 가장 중요하다고 생각하는 것은 무엇인가요?\">\r\n                                {importantGroup}\r\n                            </Answer>\r\n                            <Answer name=\"포트폴리오 링크가 있다면 첨부해주세요\">\r\n                                {portfolioLink === '' ? \"포트폴리오 미첨부\" :\r\n                                    <a href={portfolioLink} target=\"_blank\">\r\n                                        {portfolioLink}\r\n                                    </a>\r\n                                }\r\n                            </Answer>\r\n                        </>\r\n                    }\r\n                    {track === \"디자인\" &&\r\n                        <>\r\n                            <Answer name=\"디자인 트랙을 선택하게 된 이유를 구체적으로 서술해주세요\">\r\n                                {whyDesign}\r\n                            </Answer>\r\n                            <Answer name=\"피그마나 Adobe XD와 같은 목업 툴에 관련된 경험을 해본 적이 있다면 그 경험에 대해 자세히 설명을 해주세요\">\r\n                                {toolExperience}\r\n                            </Answer>\r\n                            <Answer name=\"본인이 협업과 팀워크를 진행해 보았던 경험과, 그 경험을 멋쟁이 사자처럼 대학에서 어떻게 적용시킬 수 있는지 알려주세요\">\r\n                                {teamworkExperience}\r\n                            </Answer>\r\n                            <Answer name=\"디자인 트랙을 통해 어떠한 성장을 희망하시는지 구체적으로 서술해주세요\">\r\n                                {designGrowth}\r\n                            </Answer>\r\n                            <Answer name=\"포트폴리오 링크가 있다면 첨부해주세요\">\r\n                                {portfolioLink === '' ? \"포트폴리오 미첨부\" :\r\n                                    <a href={portfolioLink} target=\"_blank\">\r\n                                        {portfolioLink}\r\n                                    </a>\r\n                                }\r\n                            </Answer>\r\n                        </>\r\n                    }\r\n                    <ButtonBox>\r\n                        <Button name=\"임시저장\" onClick={closeModal}>{buttonCount >= 1 ? `잠시만 기다려주세요...` : `뒤로가기`}</Button>\r\n                        <Button name=\"제출하기\" disabled={buttonState} onClick={changePass}>{buttonCount >= 1 ? `잠시만 기다려주세요...` : `합격처리`}</Button>\r\n                        <Button name=\"제출하기\" disabled={buttonState} onClick={changeFail}>{buttonCount >= 1 ? `잠시만 기다려주세요...` : `불합격처리`}</Button>\r\n                    </ButtonBox>\r\n                </Article>\r\n                : <Loading />\r\n            }\r\n        </Section >\r\n    )\r\n}\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\emotion\\component.tsx",["308","309","310","311","312","313","314","315","316","317"],[],"/** @jsxImportSource @emotion/react */\r\nimport React, { useCallback, useEffect, useMemo, useState } from 'react'\r\nimport { WrapperProps } from '../../../App'\r\nimport { css, keyframes } from \"@emotion/react\";\r\nimport { AgreeType, ButtonType, InputType } from '../../emotion/component';\r\nimport { PositionType } from '../../emotion/component';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport oops from '../../../images/oops.png';\r\nimport { fadeUp } from '../../../styles/Keyframes';\r\nimport { MailType, mailUserType } from '../partition/Type';\r\nimport checkBox from '../../../images/checkBox.svg';\r\nimport checkedBox from '../../../images/checkedBox.svg';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch, TestState } from '../../../app/store';\r\nimport { updatePassMailList } from '../../../features/fetcherSlice';\r\n\r\nexport const Section = ({ children }: WrapperProps) => {\r\n    return (\r\n        <div\r\n            css={css`\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-50%, -50%);\r\n\r\n                display: flex;\r\n                flex-direction: column;\r\n                align-items: center;\r\n            `}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const LoginBox = ({ children }: WrapperProps) => {\r\n    return (\r\n        <div css={css`\r\n            display: flex;\r\n            flex-direction: column;\r\n            row-gap: 1em;\r\n            align-items: center;\r\n        `}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const PassUserContent = ({ children }: WrapperProps) => {\r\n    return (\r\n        <div css={css`\r\n        border: solid;\r\n\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        @media (max-width:768px) { \r\n            font-size: 9px;\r\n        }; \r\n        @media all and (min-width:768px) and (max-width:1099px) { \r\n            font-size: 11px;\r\n        }; \r\n        @media all and (min-width:1100px) and (max-width:2000px) { \r\n            font-size: 15px;    \r\n        }; \r\n        font-size: 15px;\r\n\r\n        height: 2em;\r\n        padding: 0.2em 1.6em 0.2em 1.6em;\r\n        border-radius: 3.07em;\r\n        border-width: 0.076em;\r\n\r\n        border-color: #4F85E8;\r\n        color: #4F85E8;\r\n    `}>\r\n            {children}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport const PassUser = ({ children }: WrapperProps) => {\r\n    return (\r\n        <div css={css`\r\n                display: flex;\r\n                justify-content: left;\r\n                align-items: center;\r\n                width: 34em;\r\n                @media (max-width:768px) { \r\n                    font-size: 8px;\r\n                }; \r\n                @media all and (min-width:768px) and (max-width:1099px) { \r\n                    font-size: 11px;\r\n                }; \r\n                @media all and (min-width:1100px) and (max-width:2000px) { \r\n                    font-size: 15px;\r\n                }; \r\n\r\n                flex-wrap: wrap;\r\n                white-space:normal;\r\n                font-size: 15px; \r\n                white-space: pre-line; \r\n                column-gap: 1em;\r\n                row-gap: 1em;\r\n                margin-bottom: 1.7em;\r\n            `}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Content = ({ children }: WrapperProps) => {\r\n    return (\r\n        <section css={css`\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            padding-bottom: 4em;\r\n        `}>\r\n            {children}\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nexport const FailMailSend = (props: MailType) => {\r\n    return (\r\n        <div css={css`\r\n            margin-top: -1em;\r\n            margin-bottom: 3em;\r\n            font-family: 'Pretendard-Medium';\r\n            letter-spacing: -0.03em;\r\n            @media (max-width:768px) { \r\n                font-size: 10px;\r\n            }; \r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 16px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 14px;\r\n            }; \r\n            color: #4F85E8;\r\n            cursor: pointer;\r\n            transition: 0.4s all;\r\n\r\n            &:hover {\r\n                opacity: 80%;\r\n            }\r\n\r\n        `} {...props}> <span css={css`\r\n            font-family: 'Pretendard-Bold';\r\n        `}>{props.position}</span> 포지션의 불합격 메일 전체 전송을 하고싶으신가요? </div>\r\n    )\r\n}\r\n\r\nexport const PassMailSend = (props: MailType) => {\r\n\r\n    const passMailList = useSelector((state: TestState) => state.fetcher.passMailList);\r\n\r\n    return (\r\n        <div css={css`\r\n            margin-top: -1em;\r\n            margin-bottom: 3em;\r\n            font-family: 'Pretendard-Medium';\r\n            letter-spacing: -0.03em;\r\n\r\n            @media (max-width:768px) { \r\n                font-size: 10px;\r\n            }; \r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 16px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 14px;\r\n            }; \r\n\r\n            color: #4F85E8;\r\n            cursor: pointer;\r\n            transition: 0.4s all;\r\n\r\n            &:hover {\r\n                opacity: 80%;\r\n            }\r\n\r\n        `} {...props}> <span css={css`\r\n            font-family: 'Pretendard-Bold';\r\n        `}>{props.position}</span> 포지션의 합격 메일 전송을 하고싶으신가요?</div>\r\n    )\r\n}\r\n\r\nexport const Button = (props: ButtonType) => {\r\n    return (\r\n        <button css={css`\r\n            @media (max-width:768px) { \r\n                font-size: 13px;\r\n                width: 22.3em;\r\n            }; \r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 12px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 15px;\r\n            }; \r\n            font-size: 14.5px;\r\n            width: 26.3em;\r\n            height: 4em;\r\n            border-radius: 0.53em;\r\n            border: none;\r\n            font-family: 'Pretendard-Bold';\r\n            letter-spacing: -0.03em;\r\n            padding-left: 1em;\r\n            color: white;\r\n            transition: 0.5s all;\r\n            cursor: pointer;\r\n\r\n            background-color: #4F85E8;\r\n\r\n            &:hover {\r\n                opacity: 80%;\r\n            }\r\n        `}{...props}>{props.children}</button>\r\n    )\r\n}\r\n\r\nexport interface HeaderType {\r\n    path?: string;\r\n    children?: React.ReactNode;\r\n    url?: string;\r\n}\r\n\r\nexport const HeaderText = (props: HeaderType) => {\r\n    return (\r\n        <div css={css`\r\n            font-family: 'Pretendard-Medium';\r\n            letter-spacing: -0.03em;\r\n            width: 7em;\r\n            border:none;\r\n            padding-bottom: 0.7em;\r\n            border-width: 0.37em;\r\n\r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 15px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 19px;\r\n            }; \r\n\r\n            text-decoration: none;\r\n            color: #6b7684;\r\n            cursor: pointer;\r\n\r\n            ${props.path === props.url && css`\r\n                border:none;\r\n                font-family: 'Pretendard-Bold';\r\n                border: color;\r\n                color: #4F85E8;\r\n                // border-bottom: 0.16em solid #4F85E8;\r\n                // margin-bottom: -0.16em;\r\n\r\n            `}\r\n        `} tabIndex={-1}>{props.children}</div>\r\n    )\r\n}\r\n\r\ninterface ImgType {\r\n    src?: string;\r\n}\r\n\r\nexport const Img = (props: ImgType) => {\r\n    return (\r\n        <img css={css`\r\n            font-size: 18px;\r\n            @media (max-width:768px) { \r\n                font-size: 15px;\r\n            }; \r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 18px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 18px;\r\n            }; \r\n            width: 16em;\r\n            margin-bottom: 1em;\r\n        `} alt=\"어드민 이미지\" src={props.src} />\r\n    )\r\n}\r\n\r\nexport const HeaderDescription = ({ children }: WrapperProps) => {\r\n    return (\r\n        <span css={css`\r\n            @media (max-width:768px) { \r\n                font-size: 10px;\r\n            }; \r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 14px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 14px;\r\n            }; \r\n            font-family: 'Pretendard-Regular';\r\n            letter-spacing: -0.03em;\r\n            color: rgb(78, 89, 104);\r\n        `}>\r\n            {children}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport const Position = (props: PositionType) => {\r\n    return (\r\n        <button css={css`\r\n            font-family: 'Pretendard-Medium';\r\n            letter-spacing: -0.03em;\r\n            height: 3em;\r\n            font-size: 14.5px;\r\n\r\n            @media (max-width:768px) { \r\n                font-size: 10px;\r\n            }; \r\n\r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 14.5px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 14.5px;\r\n            }; \r\n        \r\n\r\n            ${props.alt === \"모달\" && css`height: 3em;`} \r\n            ${props.alt === \"모달\" && css`font-size: 0.83vw;`} \r\n            border-radius: 50px;\r\n            border: solid;\r\n            border-width: 1px;\r\n            border-color: #e6e8ea;\r\n            transition: 0.5s all;\r\n            cursor: pointer;\r\n\r\n            ${props.name === props.state ? css`\r\n            font-family: 'Pretendard-Bold';\r\n            color: white;\r\n            background-color: #4F85E8;\r\n            border: none;\r\n            ` : css`\r\n            background-color: transparent;\r\n            color: #707070;\r\n            border-color: #e6e8ea;\r\n\r\n            &:hover {\r\n                border-color: #4F85E8;\r\n                color:  #4F85E8;\r\n            }\r\n            &:focus {\r\n                outline: none;\r\n                border-color: #4F85E8;\r\n                color:  #4F85E8;\r\n            }\r\n            `}\r\n        `}{...props} tabIndex={-1}>{props.children}</button>\r\n    )\r\n}\r\n\r\nexport const NotData = () => {\r\n    return (\r\n        <>\r\n            <img src={oops} alt=\"Oops!\" css={css`\r\n                margin-top: 3em;\r\n                width: 7em;\r\n                animation: ${fadeUp} 1s ease-in-out;\r\n            `} />\r\n            <span css={css`\r\n        font-family: 'Pretendard-Bold';\r\n        letter-spacing: -0.03em;\r\n        color: white;\r\n        font-size: 14px;\r\n        margin-top: 1em;\r\n        animation: ${fadeUp} 1s ease-in-out;\r\n        `}>\r\n                데이터가 존재하지 않아요!\r\n            </span>\r\n        </>\r\n    )\r\n}\r\n\r\nexport const PositionBox = (props: WrapperProps) => {\r\n    return (\r\n        <div css={css`\r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr 1fr;\r\n            column-gap: 2em;\r\n            \r\n            @media (max-width:768px) { \r\n                font-size: 9px;\r\n                column-gap: 1.5em;\r\n            }; \r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 15px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 14px;\r\n            }; \r\n\r\n            width: 30em;\r\n            margin-top: 2em;\r\n            margin-bottom: 4em;\r\n            ${props.alt === \"모달\" && css`width: 30em;`} \r\n        `}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = (props: InputType) => {\r\n    return (\r\n        <input placeholder={props.placeholder} css={css`\r\n            @media (max-width:768px) { \r\n                font-size: 13px;\r\n                width: 21em;\r\n            }; \r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 11px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 14px;\r\n            }; \r\n            \r\n            width: 27em;\r\n            height: 3.8em;\r\n            border-radius: 0.53em;\r\n            border: solid;\r\n            border-color: #e6e8ea;\r\n            border-width: 0.0714em;\r\n            font-family: 'Pretendard-Regular';\r\n            letter-spacing: -0.03em;\r\n            padding-left: 1em;\r\n            transition: 0.4s all;\r\n            outline-color: #4F85E8;\r\n\r\n            &::-webkit-outer-spin-button,\r\n            &::-webkit-inner-spin-button {\r\n                -webkit-appearance: none;\r\n                margin: 0;\r\n            }\r\n\r\n\r\n            &:focus {\r\n                outline-color: #4F85E8;\r\n    \r\n                &:hover {\r\n                    box-shadow: none;\r\n                }\r\n                // box-shadow: inset 0 0 0 2px #4F85E8;\r\n            }\r\n    \r\n            &:hover {\r\n                box-shadow: inset 0 0 0 2px #90c2ff;\r\n            }\r\n    \r\n            &::placeholder {\r\n                font-family: 'Pretendard-Regular';\r\n                margin-left: 0.4em;\r\n            }\r\n        `} {...props} />\r\n    )\r\n}\r\n\r\nexport interface ChangeCheckStateType {\r\n    (userName: string, userEmail: string, userId: string): void;\r\n}\r\n\r\nexport interface ListType {\r\n    name?: string;\r\n    id?: string;\r\n    department?: string;\r\n    email?: string;\r\n    position?: string;\r\n    check?: string;\r\n    onClick?: (event: React.MouseEvent<HTMLDivElement>) => void;\r\n    children?: React.ReactNode;\r\n    mailState?: boolean;\r\n}\r\n\r\nexport interface onModalType {\r\n    (userID: string): void;\r\n}\r\n\r\n// 사용자 리스트를 나타내주는 컴포넌트\r\nexport const List = React.memo(function List(props: ListType) {\r\n\r\n    const [checkState, setCheckState] = useState<boolean>(false);\r\n    const [checkList, setCheckList] = useState<mailUserType[]>([]);\r\n    const [userEmail, setEmail] = useState<string>('');\r\n    const [userName, setName] = useState<string>('');\r\n    const [userId, setId] = useState<string>('');\r\n\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const passMailList = useSelector((state: TestState) => state.fetcher.passMailList);\r\n    const newList = useSelector((state: TestState) => (state.fetcher.newList));\r\n\r\n    const ChangeCheckState: ChangeCheckStateType = useCallback((userEmail: string, userName: string, userId: string) => {\r\n        setCheckState(!checkState);\r\n        setEmail(userEmail);\r\n        setName(userName);\r\n        setId(userId);\r\n        // await setCheckList(user)\r\n        // 전역 상태로 업데이트 할 것!\r\n    }, [checkState]);\r\n\r\n    useEffect(() => {\r\n        setCheckState(false);\r\n    }, [newList])\r\n\r\n    useEffect(() => {\r\n        if (checkState) {\r\n            dispatch(updatePassMailList([...passMailList, { id: userId as string, name: userName as string, email: userEmail as string }]))\r\n        } else if (!checkState) {\r\n            dispatch(updatePassMailList(passMailList.filter((items: mailUserType) => { return items.id !== userId })))\r\n        }\r\n    }, [checkState])\r\n\r\n    return (\r\n        <div css={css`\r\n            @media (max-width:768px) { \r\n                font-size: 7px;\r\n                column-gap: 3.5em;\r\n                width: 100%;\r\n            }; \r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 15px;\r\n                width: 100%;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 15.5px;\r\n            }; \r\n        \r\n            font-family: 'Pretendard-Regular';\r\n            font-size: 0.83vw;\r\n            letter-spacing: -0.03em;\r\n            color: #191F28;\r\n\r\n            height: 4.5em;\r\n\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            border: solid;\r\n            border-top: 0;\r\n            border-left: 0;\r\n            border-right: 0;\r\n            border: none;\r\n\r\n            box-sizing: border-box;\r\n            transition: 0.4s all;\r\n            border-width: 0.08em;\r\n            border-radius: 7px;\r\n\r\n            ${props.name !== \"이름\" && css`\r\n                color: #4e5968;\r\n\r\n                &:hover {\r\n                    opacity: 80%;\r\n                    cursor: pointer;\r\n                    background-color: rgb(242, 244, 246);\r\n                }\r\n            `}\r\n\r\n            ${checkState && css`\r\n                color: #4F85E8;\r\n                border-color: #4F85E8;\r\n                cursor: pointer;\r\n            `}\r\n        `}>\r\n            <ListText onClick={props.onClick}>{props.name}</ListText>\r\n            <ListText onClick={props.onClick}>{props.position}</ListText>\r\n            <ListText onClick={props.onClick}>{props.department}</ListText>\r\n            <ListText onClick={props.onClick}>\r\n                {props.id !== \"학번\" && props.mailState ? <span css={css` color: #4F85E8; font-family: 'Pretendard-Bold'; `}> {props.id} </span> : props.id}\r\n            </ListText>\r\n            {/* <ListText onClick={props.onClick}>{props.email}</ListText> */}\r\n            {props.check === \"체크 없음\" && null}\r\n            {props.check === \"전송 체크\" ? <ListText> {props.check} </ListText> : !props.check && <ListText onClick={() => ChangeCheckState(props.email as string, props.name as string, props.id as string)}> <img src={checkState ? checkedBox : checkBox} css={css` width : 1.2em; `} /> </ListText>}\r\n        </div>\r\n    )\r\n});\r\n\r\nexport const ListText = (props: ListType) => {\r\n    return (\r\n        <div css={css`\r\n\r\n            @media (max-width:768px) { \r\n                width: 7em;\r\n            }; \r\n\r\n            width: 16em;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n        `} {...props}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\styles\\Keyframes.ts",["318","319"],[],"import React from 'react'\r\nimport { css, keyframes } from \"@emotion/react\";\r\n\r\n\r\nexport const fadeIn = keyframes`\r\n    from {\r\n        opacity: 0;\r\n    }\r\n    to {\r\n        opacity: 1;\r\n    }\r\n`;\r\n\r\nexport const fadeUp = keyframes`\r\n    0% {\r\n        transform : translateY(30px);\r\n        opacity: 0;\r\n    }\r\n    50% {\r\n        opacity: 0.3;\r\n    }\r\n    70% {\r\n        opacity: 0.5;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n        transform : none;\r\n`;\r\n\r\nexport const fadeLeft = keyframes`\r\n0% {\r\n    transform : translateX(30px);\r\n    opacity: 0;\r\n}\r\n50% {\r\n    opacity: 0.3;\r\n}\r\n70% {\r\n    opacity: 0.5;\r\n}\r\n100% {\r\n    opacity: 1;\r\n    transform : none;\r\n`;\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\404\\NotWidth.tsx",["320","321","322","323","324"],[],"/** @jsxImportSource @emotion/react */\r\nimport { css, keyframes } from \"@emotion/react\";\r\nimport React from 'react'\r\nimport { Button, Modal, Section } from '../emotion/component'\r\nimport oops from '../../images/oops.png';\r\nimport { Link } from \"react-router-dom\";\r\nimport { fadeUp } from \"../../styles/Keyframes\";\r\n\r\nexport default function NotWidth() {\r\n    return (\r\n        <div css={css`\r\n            position: absolute;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            width: 60%;\r\n\r\n            display: none;\r\n            flex-direction: column;\r\n            align-items: center;\r\n\r\n            @media (max-width: 1024px) {\r\n                display: flex;\r\n            }\r\n        `}>\r\n            <img alt=\"404\" src={oops} css={css`\r\n                width: 8.5em;\r\n                animation: ${fadeUp} 1s ease-in-out;\r\n            `} />\r\n            <span css={css`\r\n                font-family: 'Pretendard-Bold';\r\n                letter-spacing: -0.03em;\r\n                color: #333d4b;\r\n                margin-top: 1em;\r\n                font-size: 15px;\r\n                animation: ${fadeUp} 1s ease-in-out;\r\n            `}>원활한 지원환경을 위해 <br /> PC 또는 태블릿으로 접속해주세요!</span>\r\n        </div>\r\n    )\r\n}\r\n","C:\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\detail\\emotion\\component.tsx",["325","326","327","328","329","330","331"],[],"/** @jsxImportSource @emotion/react */\r\nimport React, { useEffect, useState } from 'react'\r\nimport { css, keyframes } from \"@emotion/react\";\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport oops from '../../../images/oops.png';\r\nimport { WrapperProps } from '../../../../App';\r\nimport { InputType } from '../../../emotion/component';\r\nimport { ButtonType } from '../../../emotion/component';\r\nimport quit from '../../../../images/quit.png';\r\nimport { ImgClickType } from '../Type';\r\n\r\n\r\nexport const Section = ({ children }: WrapperProps) => {\r\n    return (\r\n        <div\r\n            css={css`\r\n                position: absolute;\r\n                left: 50%;\r\n                transform: translate(-50%);\r\n                @media (max-width:768px) { \r\n                    font-size: 7px;\r\n                }; \r\n    \r\n                @media all and (min-width:768px) and (max-width:1059px) { \r\n                    font-size: 17px;\r\n                    width: 100%;\r\n                }; \r\n                @media all and (min-width:1100px) and (max-width:2000px) { \r\n                    font-size: 17px;\r\n                    width: 100%;\r\n                }; \r\n                display: flex;\r\n                flex-direction: column;\r\n                align-items: center;          \r\n                height: 100%;\r\n                background-color: white;\r\n                border-radius: 0.93em;\r\n                margin-top: 4em;\r\n            `}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Quit = (props: ImgClickType) => {\r\n    return (\r\n        <img alt=\"뒤로가기\" onClick={props.onClick} src={quit} css={css`\r\n            width: 4em;\r\n            cursor: pointer;\r\n            transition: 0.4s all;\r\n            margin-bottom: 1em;\r\n\r\n            &:hover {\r\n                opacity: 60%;\r\n            }\r\n        `} />\r\n    )\r\n}\r\n\r\nexport const Article = ({ children }: WrapperProps) => {\r\n    return (\r\n        <article css={css`\r\n            padding-top: 3em;\r\n            padding-bottom: 5em;\r\n            background-color: white;\r\n            width: 100%;\r\n            border: none;\r\n            display: flex;\r\n            border-color: #2e5968;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            row-gap: 2em;\r\n            border-radius: 0.625em;\r\n            border-width: 0.03em;\r\n\r\n        `}>\r\n            {children}\r\n        </article>\r\n    )\r\n}\r\n\r\nexport interface AnswerType {\r\n    name?: string;\r\n    children?: React.ReactNode;\r\n}\r\n\r\nexport const Answer = (props: AnswerType) => {\r\n    return (\r\n        <div css={css`\r\n            display: flex;\r\n            flex-direction: column;\r\n            text-align: left;\r\n            row-gap: 0.5em;\r\n            width: 60em;\r\n\r\n            @media (max-width:768px) { \r\n                font-size: 5.5px;\r\n            }; \r\n\r\n            @media all and (min-width:768px) and (max-width:1059px) { \r\n                font-size: 10px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 15px;\r\n            }; \r\n        `}>\r\n            <span css={css`\r\n                    font-family: 'Pretendard-Medium';\r\n                    letter-spacing: -0.03em;   \r\n\r\n                    @media (max-width:768px) { \r\n                        font-size: 7px;\r\n                    }; \r\n        \r\n                    @media all and (min-width:768px) and (max-width:1059px) { \r\n                        font-size: 13px;\r\n                    }; \r\n                    @media all and (min-width:1100px) and (max-width:2000px) { \r\n                        font-size: 15px;\r\n                    }; \r\n\r\n                    color: #4e5968;\r\n            `}> {props.name}</span>\r\n            <div css={css`\r\n        font-family: 'Pretendard-Medium';\r\n        letter-spacing: -0.03em;\r\n        padding: 0;\r\n        padding-left: 1em;\r\n        width: 100%;\r\n        padding: 1em;\r\n        border: solid;\r\n        border-color: #e6e8ea;\r\n        @media (max-width:768px) { \r\n            font-size: 7px;\r\n        }; \r\n\r\n        @media all and (min-width:768px) and (max-width:1059px) { \r\n            font-size: 13px;\r\n        }; \r\n        @media all and (min-width:1100px) and (max-width:2000px) { \r\n            font-size: 15px;\r\n        }; \r\n        border-radius: 0.57em;\r\n        line-height: 1.5em;\r\n        border-width: 0.07em;\r\n        box-sizing: border-box;\r\n        white-space: pre-wrap;\r\n        color: #333d4b;\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: left;\r\n\r\n        `}>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const ButtonBox = (props: WrapperProps) => {\r\n    return (\r\n        <div css={css`\r\n            display: flex;\r\n            column-gap: 1em;\r\n            margin-top: 1em;\r\n            ${props.alt === \"임시저장_모달\" && css`margin-top: 2em;`}\r\n        `}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Button = (props: ButtonType) => {\r\n    return (\r\n        <button css={css`\r\n            font-family: 'Pretendard-Bold';\r\n            letter-spacing: -0.03em;\r\n            font-size: 0.83vw;\r\n\r\n            @media (max-width:768px) { \r\n                font-size: 7px;\r\n            }; \r\n    \r\n            @media all and (min-width:768px) and (max-width:1099px) { \r\n                font-size: 12.5px;\r\n            }; \r\n            @media all and (min-width:1100px) and (max-width:2000px) { \r\n                font-size: 16px;\r\n            }; \r\n\r\n\r\n            width: 15em;\r\n            height: 3.5em;\r\n            transition: 0.5s all;\r\n            ${props.alt === \"불러오기\" && css`\r\n                width: 7.5em;\r\n                font-size: 0.83vw;\r\n            `}\r\n            border: none;\r\n            border-radius: 0.5em;\r\n            color: white;\r\n            transition: 0.5s all;\r\n            ${props.name === \"임시저장\" && `background-color : #262626;`}\r\n            ${props.name === \"제출하기\" && `background-color : #4F85E8;`}\r\n            ${props.disabled ?\r\n                css`\r\n                    cursor: auto;\r\n                    filter: grayscale(100%);\r\n                ` :\r\n                css`\r\n                    cursor: pointer;\r\n                    &:hover {\r\n                        opacity: 80%;\r\n                    }\r\n                    `\r\n            }\r\n        `} tabIndex={-1} {...props}>\r\n            {props.children}\r\n        </button>\r\n    )\r\n}",{"ruleId":"332","severity":1,"message":"333","line":1,"column":28,"nodeType":"334","messageId":"335","endLine":1,"endColumn":36},{"ruleId":"332","severity":1,"message":"336","line":2,"column":8,"nodeType":"334","messageId":"335","endLine":2,"endColumn":12},{"ruleId":"332","severity":1,"message":"337","line":4,"column":40,"nodeType":"334","messageId":"335","endLine":4,"endColumn":51},{"ruleId":"332","severity":1,"message":"338","line":17,"column":8,"nodeType":"334","messageId":"335","endLine":17,"endColumn":14},{"ruleId":"332","severity":1,"message":"339","line":19,"column":10,"nodeType":"334","messageId":"335","endLine":19,"endColumn":21},{"ruleId":"332","severity":1,"message":"340","line":20,"column":10,"nodeType":"334","messageId":"335","endLine":20,"endColumn":19},{"ruleId":"332","severity":1,"message":"341","line":21,"column":10,"nodeType":"334","messageId":"335","endLine":21,"endColumn":16},{"ruleId":"332","severity":1,"message":"342","line":25,"column":10,"nodeType":"334","messageId":"335","endLine":25,"endColumn":21},{"ruleId":"332","severity":1,"message":"343","line":1,"column":10,"nodeType":"334","messageId":"335","endLine":1,"endColumn":26},{"ruleId":"332","severity":1,"message":"344","line":1,"column":41,"nodeType":"334","messageId":"335","endLine":1,"endColumn":52},{"ruleId":"332","severity":1,"message":"345","line":2,"column":81,"nodeType":"334","messageId":"335","endLine":2,"endColumn":89},{"ruleId":"332","severity":1,"message":"341","line":2,"column":118,"nodeType":"334","messageId":"335","endLine":2,"endColumn":124},{"ruleId":"332","severity":1,"message":"346","line":7,"column":33,"nodeType":"334","messageId":"335","endLine":7,"endColumn":37},{"ruleId":"347","severity":1,"message":"348","line":73,"column":8,"nodeType":"349","endLine":73,"endColumn":10,"suggestions":"350"},{"ruleId":"332","severity":1,"message":"351","line":2,"column":17,"nodeType":"334","messageId":"335","endLine":2,"endColumn":28},{"ruleId":"332","severity":1,"message":"352","line":7,"column":15,"nodeType":"334","messageId":"335","endLine":7,"endColumn":24},{"ruleId":"332","severity":1,"message":"353","line":8,"column":10,"nodeType":"334","messageId":"335","endLine":8,"endColumn":18},{"ruleId":"332","severity":1,"message":"354","line":8,"column":20,"nodeType":"334","messageId":"335","endLine":8,"endColumn":26},{"ruleId":"332","severity":1,"message":"355","line":9,"column":166,"nodeType":"334","messageId":"335","endLine":9,"endColumn":173},{"ruleId":"332","severity":1,"message":"341","line":9,"column":231,"nodeType":"334","messageId":"335","endLine":9,"endColumn":237},{"ruleId":"332","severity":1,"message":"346","line":13,"column":10,"nodeType":"334","messageId":"335","endLine":13,"endColumn":14},{"ruleId":"332","severity":1,"message":"356","line":18,"column":8,"nodeType":"334","messageId":"335","endLine":18,"endColumn":16},{"ruleId":"332","severity":1,"message":"357","line":19,"column":8,"nodeType":"334","messageId":"335","endLine":19,"endColumn":16},{"ruleId":"332","severity":1,"message":"358","line":48,"column":12,"nodeType":"334","messageId":"335","endLine":48,"endColumn":24},{"ruleId":"332","severity":1,"message":"359","line":48,"column":26,"nodeType":"334","messageId":"335","endLine":48,"endColumn":41},{"ruleId":"332","severity":1,"message":"360","line":64,"column":11,"nodeType":"334","messageId":"335","endLine":64,"endColumn":24},{"ruleId":"361","severity":1,"message":"362","line":68,"column":42,"nodeType":"363","messageId":"364","endLine":68,"endColumn":43,"suggestions":"365"},{"ruleId":"361","severity":1,"message":"362","line":68,"column":75,"nodeType":"363","messageId":"364","endLine":68,"endColumn":76,"suggestions":"366"},{"ruleId":"347","severity":1,"message":"367","line":108,"column":8,"nodeType":"349","endLine":108,"endColumn":10,"suggestions":"368"},{"ruleId":"347","severity":1,"message":"369","line":131,"column":8,"nodeType":"349","endLine":131,"endColumn":214,"suggestions":"370"},{"ruleId":"361","severity":1,"message":"371","line":469,"column":72,"nodeType":"363","messageId":"364","endLine":469,"endColumn":73,"suggestions":"372"},{"ruleId":"361","severity":1,"message":"373","line":469,"column":101,"nodeType":"363","messageId":"364","endLine":469,"endColumn":102,"suggestions":"374"},{"ruleId":"361","severity":1,"message":"371","line":521,"column":77,"nodeType":"363","messageId":"364","endLine":521,"endColumn":78,"suggestions":"375"},{"ruleId":"361","severity":1,"message":"373","line":521,"column":106,"nodeType":"363","messageId":"364","endLine":521,"endColumn":107,"suggestions":"376"},{"ruleId":"377","severity":1,"message":"378","line":658,"column":52,"nodeType":"379","messageId":"380","endLine":658,"endColumn":54},{"ruleId":"332","severity":1,"message":"341","line":2,"column":118,"nodeType":"334","messageId":"335","endLine":2,"endColumn":124},{"ruleId":"332","severity":1,"message":"346","line":7,"column":33,"nodeType":"334","messageId":"335","endLine":7,"endColumn":37},{"ruleId":"347","severity":1,"message":"381","line":85,"column":8,"nodeType":"349","endLine":85,"endColumn":10,"suggestions":"382"},{"ruleId":"347","severity":1,"message":"383","line":104,"column":8,"nodeType":"349","endLine":104,"endColumn":68,"suggestions":"384"},{"ruleId":"332","severity":1,"message":"385","line":150,"column":11,"nodeType":"334","messageId":"335","endLine":150,"endColumn":21},{"ruleId":"332","severity":1,"message":"386","line":5,"column":10,"nodeType":"334","messageId":"335","endLine":5,"endColumn":17},{"ruleId":"332","severity":1,"message":"387","line":17,"column":11,"nodeType":"334","messageId":"335","endLine":17,"endColumn":21},{"ruleId":"332","severity":1,"message":"341","line":2,"column":118,"nodeType":"334","messageId":"335","endLine":2,"endColumn":124},{"ruleId":"332","severity":1,"message":"346","line":7,"column":33,"nodeType":"334","messageId":"335","endLine":7,"endColumn":37},{"ruleId":"347","severity":1,"message":"388","line":87,"column":8,"nodeType":"349","endLine":87,"endColumn":10,"suggestions":"389"},{"ruleId":"347","severity":1,"message":"383","line":105,"column":8,"nodeType":"349","endLine":105,"endColumn":82,"suggestions":"390"},{"ruleId":"332","severity":1,"message":"391","line":4,"column":75,"nodeType":"334","messageId":"335","endLine":4,"endColumn":82},{"ruleId":"332","severity":1,"message":"392","line":6,"column":10,"nodeType":"334","messageId":"335","endLine":6,"endColumn":23},{"ruleId":"332","severity":1,"message":"393","line":6,"column":25,"nodeType":"334","messageId":"335","endLine":6,"endColumn":37},{"ruleId":"332","severity":1,"message":"394","line":6,"column":39,"nodeType":"334","messageId":"335","endLine":6,"endColumn":50},{"ruleId":"332","severity":1,"message":"337","line":8,"column":10,"nodeType":"334","messageId":"335","endLine":8,"endColumn":21},{"ruleId":"332","severity":1,"message":"395","line":11,"column":57,"nodeType":"334","messageId":"335","endLine":11,"endColumn":61},{"ruleId":"332","severity":1,"message":"396","line":13,"column":8,"nodeType":"334","messageId":"335","endLine":13,"endColumn":14},{"ruleId":"332","severity":1,"message":"352","line":14,"column":15,"nodeType":"334","messageId":"335","endLine":14,"endColumn":24},{"ruleId":"332","severity":1,"message":"397","line":19,"column":8,"nodeType":"334","messageId":"335","endLine":19,"endColumn":16},{"ruleId":"332","severity":1,"message":"398","line":20,"column":8,"nodeType":"334","messageId":"335","endLine":20,"endColumn":18},{"ruleId":"347","severity":1,"message":"399","line":71,"column":8,"nodeType":"349","endLine":71,"endColumn":10,"suggestions":"400"},{"ruleId":"347","severity":1,"message":"401","line":113,"column":8,"nodeType":"349","endLine":113,"endColumn":33,"suggestions":"402"},{"ruleId":"332","severity":1,"message":"341","line":2,"column":118,"nodeType":"334","messageId":"335","endLine":2,"endColumn":124},{"ruleId":"332","severity":1,"message":"346","line":7,"column":33,"nodeType":"334","messageId":"335","endLine":7,"endColumn":37},{"ruleId":"347","severity":1,"message":"403","line":81,"column":8,"nodeType":"349","endLine":81,"endColumn":10,"suggestions":"404"},{"ruleId":"347","severity":1,"message":"383","line":101,"column":8,"nodeType":"349","endLine":101,"endColumn":77,"suggestions":"405"},{"ruleId":"332","severity":1,"message":"406","line":1,"column":17,"nodeType":"334","messageId":"335","endLine":1,"endColumn":24},{"ruleId":"332","severity":1,"message":"407","line":2,"column":25,"nodeType":"334","messageId":"335","endLine":2,"endColumn":33},{"ruleId":"332","severity":1,"message":"391","line":2,"column":44,"nodeType":"334","messageId":"335","endLine":2,"endColumn":51},{"ruleId":"332","severity":1,"message":"392","line":4,"column":10,"nodeType":"334","messageId":"335","endLine":4,"endColumn":23},{"ruleId":"332","severity":1,"message":"393","line":4,"column":25,"nodeType":"334","messageId":"335","endLine":4,"endColumn":37},{"ruleId":"332","severity":1,"message":"394","line":4,"column":39,"nodeType":"334","messageId":"335","endLine":4,"endColumn":50},{"ruleId":"332","severity":1,"message":"408","line":6,"column":10,"nodeType":"334","messageId":"335","endLine":6,"endColumn":14},{"ruleId":"332","severity":1,"message":"337","line":6,"column":16,"nodeType":"334","messageId":"335","endLine":6,"endColumn":27},{"ruleId":"332","severity":1,"message":"409","line":10,"column":19,"nodeType":"334","messageId":"335","endLine":10,"endColumn":24},{"ruleId":"332","severity":1,"message":"396","line":11,"column":8,"nodeType":"334","messageId":"335","endLine":11,"endColumn":14},{"ruleId":"332","severity":1,"message":"410","line":27,"column":12,"nodeType":"334","messageId":"335","endLine":27,"endColumn":22},{"ruleId":"332","severity":1,"message":"411","line":27,"column":24,"nodeType":"334","messageId":"335","endLine":27,"endColumn":37},{"ruleId":"347","severity":1,"message":"399","line":54,"column":8,"nodeType":"349","endLine":54,"endColumn":10,"suggestions":"412"},{"ruleId":"332","severity":1,"message":"406","line":1,"column":17,"nodeType":"334","messageId":"335","endLine":1,"endColumn":24},{"ruleId":"332","severity":1,"message":"407","line":2,"column":25,"nodeType":"334","messageId":"335","endLine":2,"endColumn":33},{"ruleId":"332","severity":1,"message":"391","line":2,"column":44,"nodeType":"334","messageId":"335","endLine":2,"endColumn":51},{"ruleId":"332","severity":1,"message":"392","line":4,"column":10,"nodeType":"334","messageId":"335","endLine":4,"endColumn":23},{"ruleId":"332","severity":1,"message":"393","line":4,"column":25,"nodeType":"334","messageId":"335","endLine":4,"endColumn":37},{"ruleId":"332","severity":1,"message":"394","line":4,"column":39,"nodeType":"334","messageId":"335","endLine":4,"endColumn":50},{"ruleId":"332","severity":1,"message":"408","line":6,"column":10,"nodeType":"334","messageId":"335","endLine":6,"endColumn":14},{"ruleId":"332","severity":1,"message":"337","line":6,"column":16,"nodeType":"334","messageId":"335","endLine":6,"endColumn":27},{"ruleId":"332","severity":1,"message":"409","line":10,"column":19,"nodeType":"334","messageId":"335","endLine":10,"endColumn":24},{"ruleId":"332","severity":1,"message":"396","line":11,"column":8,"nodeType":"334","messageId":"335","endLine":11,"endColumn":14},{"ruleId":"332","severity":1,"message":"410","line":27,"column":12,"nodeType":"334","messageId":"335","endLine":27,"endColumn":22},{"ruleId":"332","severity":1,"message":"411","line":27,"column":24,"nodeType":"334","messageId":"335","endLine":27,"endColumn":37},{"ruleId":"347","severity":1,"message":"399","line":54,"column":8,"nodeType":"349","endLine":54,"endColumn":10,"suggestions":"413"},{"ruleId":"332","severity":1,"message":"391","line":2,"column":48,"nodeType":"334","messageId":"335","endLine":2,"endColumn":55},{"ruleId":"332","severity":1,"message":"396","line":3,"column":8,"nodeType":"334","messageId":"335","endLine":3,"endColumn":14},{"ruleId":"332","severity":1,"message":"392","line":5,"column":10,"nodeType":"334","messageId":"335","endLine":5,"endColumn":23},{"ruleId":"332","severity":1,"message":"393","line":5,"column":25,"nodeType":"334","messageId":"335","endLine":5,"endColumn":37},{"ruleId":"332","severity":1,"message":"394","line":5,"column":39,"nodeType":"334","messageId":"335","endLine":5,"endColumn":50},{"ruleId":"332","severity":1,"message":"337","line":7,"column":10,"nodeType":"334","messageId":"335","endLine":7,"endColumn":21},{"ruleId":"332","severity":1,"message":"414","line":25,"column":12,"nodeType":"334","messageId":"335","endLine":25,"endColumn":20},{"ruleId":"332","severity":1,"message":"415","line":25,"column":22,"nodeType":"334","messageId":"335","endLine":25,"endColumn":33},{"ruleId":"332","severity":1,"message":"410","line":33,"column":12,"nodeType":"334","messageId":"335","endLine":33,"endColumn":22},{"ruleId":"332","severity":1,"message":"411","line":33,"column":24,"nodeType":"334","messageId":"335","endLine":33,"endColumn":37},{"ruleId":"347","severity":1,"message":"399","line":62,"column":8,"nodeType":"349","endLine":62,"endColumn":10,"suggestions":"416"},{"ruleId":"347","severity":1,"message":"417","line":103,"column":8,"nodeType":"349","endLine":103,"endColumn":33,"suggestions":"418"},{"ruleId":"332","severity":1,"message":"352","line":2,"column":15,"nodeType":"334","messageId":"335","endLine":2,"endColumn":24},{"ruleId":"332","severity":1,"message":"419","line":4,"column":10,"nodeType":"334","messageId":"335","endLine":4,"endColumn":16},{"ruleId":"332","severity":1,"message":"409","line":4,"column":18,"nodeType":"334","messageId":"335","endLine":4,"endColumn":23},{"ruleId":"332","severity":1,"message":"391","line":4,"column":25,"nodeType":"334","messageId":"335","endLine":4,"endColumn":32},{"ruleId":"332","severity":1,"message":"352","line":2,"column":15,"nodeType":"334","messageId":"335","endLine":2,"endColumn":24},{"ruleId":"332","severity":1,"message":"420","line":6,"column":8,"nodeType":"334","messageId":"335","endLine":6,"endColumn":13},{"ruleId":"332","severity":1,"message":"397","line":7,"column":8,"nodeType":"334","messageId":"335","endLine":7,"endColumn":16},{"ruleId":"332","severity":1,"message":"398","line":8,"column":8,"nodeType":"334","messageId":"335","endLine":8,"endColumn":18},{"ruleId":"332","severity":1,"message":"408","line":16,"column":10,"nodeType":"334","messageId":"335","endLine":16,"endColumn":14},{"ruleId":"332","severity":1,"message":"421","line":16,"column":24,"nodeType":"334","messageId":"335","endLine":16,"endColumn":35},{"ruleId":"332","severity":1,"message":"342","line":18,"column":10,"nodeType":"334","messageId":"335","endLine":18,"endColumn":21},{"ruleId":"347","severity":1,"message":"422","line":89,"column":9,"nodeType":"423","endLine":89,"endColumn":61},{"ruleId":"424","severity":1,"message":"425","line":151,"column":21,"nodeType":"426","messageId":"427","endLine":151,"endColumn":130,"fix":"428"},{"ruleId":"424","severity":1,"message":"425","line":152,"column":21,"nodeType":"426","messageId":"427","endLine":152,"endColumn":130,"fix":"429"},{"ruleId":"424","severity":1,"message":"425","line":153,"column":21,"nodeType":"426","messageId":"427","endLine":153,"endColumn":130,"fix":"430"},{"ruleId":"332","severity":1,"message":"352","line":2,"column":15,"nodeType":"334","messageId":"335","endLine":2,"endColumn":24},{"ruleId":"332","severity":1,"message":"419","line":4,"column":10,"nodeType":"334","messageId":"335","endLine":4,"endColumn":16},{"ruleId":"332","severity":1,"message":"409","line":4,"column":18,"nodeType":"334","messageId":"335","endLine":4,"endColumn":23},{"ruleId":"332","severity":1,"message":"391","line":4,"column":25,"nodeType":"334","messageId":"335","endLine":4,"endColumn":32},{"ruleId":"332","severity":1,"message":"408","line":6,"column":10,"nodeType":"334","messageId":"335","endLine":6,"endColumn":14},{"ruleId":"332","severity":1,"message":"352","line":2,"column":15,"nodeType":"334","messageId":"335","endLine":2,"endColumn":24},{"ruleId":"332","severity":1,"message":"333","line":3,"column":17,"nodeType":"334","messageId":"335","endLine":3,"endColumn":25},{"ruleId":"332","severity":1,"message":"431","line":4,"column":10,"nodeType":"334","messageId":"335","endLine":4,"endColumn":19},{"ruleId":"332","severity":1,"message":"432","line":5,"column":29,"nodeType":"334","messageId":"335","endLine":5,"endColumn":39},{"ruleId":"347","severity":1,"message":"433","line":22,"column":8,"nodeType":"349","endLine":22,"endColumn":10,"suggestions":"434"},{"ruleId":"332","severity":1,"message":"337","line":5,"column":10,"nodeType":"334","messageId":"335","endLine":5,"endColumn":21},{"ruleId":"332","severity":1,"message":"435","line":5,"column":36,"nodeType":"334","messageId":"335","endLine":5,"endColumn":45},{"ruleId":"332","severity":1,"message":"436","line":11,"column":10,"nodeType":"334","messageId":"335","endLine":11,"endColumn":21},{"ruleId":"332","severity":1,"message":"352","line":13,"column":15,"nodeType":"334","messageId":"335","endLine":13,"endColumn":24},{"ruleId":"332","severity":1,"message":"437","line":53,"column":11,"nodeType":"334","messageId":"335","endLine":53,"endColumn":25},{"ruleId":"347","severity":1,"message":"438","line":139,"column":8,"nodeType":"349","endLine":139,"endColumn":10,"suggestions":"439"},{"ruleId":"424","severity":1,"message":"425","line":387,"column":37,"nodeType":"426","messageId":"427","endLine":387,"endColumn":77,"fix":"440"},{"ruleId":"424","severity":1,"message":"425","line":407,"column":37,"nodeType":"426","messageId":"427","endLine":407,"endColumn":77,"fix":"441"},{"ruleId":"424","severity":1,"message":"425","line":430,"column":37,"nodeType":"426","messageId":"427","endLine":430,"endColumn":77,"fix":"442"},{"ruleId":"332","severity":1,"message":"406","line":2,"column":41,"nodeType":"334","messageId":"335","endLine":2,"endColumn":48},{"ruleId":"332","severity":1,"message":"352","line":4,"column":15,"nodeType":"334","messageId":"335","endLine":4,"endColumn":24},{"ruleId":"332","severity":1,"message":"443","line":5,"column":10,"nodeType":"334","messageId":"335","endLine":5,"endColumn":19},{"ruleId":"332","severity":1,"message":"408","line":7,"column":10,"nodeType":"334","messageId":"335","endLine":7,"endColumn":14},{"ruleId":"332","severity":1,"message":"337","line":7,"column":16,"nodeType":"334","messageId":"335","endLine":7,"endColumn":27},{"ruleId":"332","severity":1,"message":"444","line":157,"column":11,"nodeType":"334","messageId":"335","endLine":157,"endColumn":23},{"ruleId":"332","severity":1,"message":"445","line":489,"column":12,"nodeType":"334","messageId":"335","endLine":489,"endColumn":21},{"ruleId":"332","severity":1,"message":"446","line":489,"column":23,"nodeType":"334","messageId":"335","endLine":489,"endColumn":35},{"ruleId":"347","severity":1,"message":"447","line":517,"column":8,"nodeType":"349","endLine":517,"endColumn":20,"suggestions":"448"},{"ruleId":"449","severity":1,"message":"450","line":579,"column":204,"nodeType":"426","endLine":579,"endColumn":280},{"ruleId":"332","severity":1,"message":"451","line":1,"column":8,"nodeType":"334","messageId":"335","endLine":1,"endColumn":13},{"ruleId":"332","severity":1,"message":"452","line":2,"column":10,"nodeType":"334","messageId":"335","endLine":2,"endColumn":13},{"ruleId":"332","severity":1,"message":"352","line":2,"column":15,"nodeType":"334","messageId":"335","endLine":2,"endColumn":24},{"ruleId":"332","severity":1,"message":"419","line":4,"column":10,"nodeType":"334","messageId":"335","endLine":4,"endColumn":16},{"ruleId":"332","severity":1,"message":"409","line":4,"column":18,"nodeType":"334","messageId":"335","endLine":4,"endColumn":23},{"ruleId":"332","severity":1,"message":"391","line":4,"column":25,"nodeType":"334","messageId":"335","endLine":4,"endColumn":32},{"ruleId":"332","severity":1,"message":"408","line":6,"column":10,"nodeType":"334","messageId":"335","endLine":6,"endColumn":14},{"ruleId":"332","severity":1,"message":"431","line":2,"column":17,"nodeType":"334","messageId":"335","endLine":2,"endColumn":26},{"ruleId":"332","severity":1,"message":"333","line":2,"column":28,"nodeType":"334","messageId":"335","endLine":2,"endColumn":36},{"ruleId":"332","severity":1,"message":"352","line":3,"column":15,"nodeType":"334","messageId":"335","endLine":3,"endColumn":24},{"ruleId":"332","severity":1,"message":"408","line":4,"column":10,"nodeType":"334","messageId":"335","endLine":4,"endColumn":14},{"ruleId":"332","severity":1,"message":"337","line":4,"column":16,"nodeType":"334","messageId":"335","endLine":4,"endColumn":27},{"ruleId":"332","severity":1,"message":"453","line":5,"column":8,"nodeType":"334","messageId":"335","endLine":5,"endColumn":12},{"ruleId":"332","severity":1,"message":"454","line":7,"column":10,"nodeType":"334","messageId":"335","endLine":7,"endColumn":19},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'useLocation' is defined but never used.","'Detail' is defined but never used.","'useSelector' is defined but never used.","'TestState' is defined but never used.","'Footer' is defined but never used.","'KeyboardIOS' is defined but never used.","'createAsyncThunk' is defined but never used.","'isFulfilled' is defined but never used.","'InputBox' is defined but never used.","'view' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'navigate', 'userEmail', 'userHardWork', 'userID', 'userKeyWord', 'userMostDeeplyWork', 'userMotiv', 'userName', 'userPhone', and 'userPosition'. Either include them or remove the dependency array.","ArrayExpression",["455"],"'ChangeEvent' is defined but never used.","'keyframes' is defined but never used.","'fadeLeft' is defined but never used.","'fadeUp' is defined but never used.","'EndTime' is defined but never used.","'Confetti' is defined but never used.","'NotWidth' is defined but never used.","'isDepartment' is assigned a value but never used.","'setIsDepartment' is assigned a value but never used.","'departmentRef' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["456","457"],["458","459"],"React Hook useEffect has missing dependencies: 'userDepartment', 'userEmail', 'userID', 'userName', 'userPhone', and 'userPosition'. Either include them or remove the dependency array.",["460"],"React Hook useMemo has unnecessary dependencies: 'department', 'email', 'id', 'name', and 'phone'. Either exclude them or remove the dependency array.",["461"],"Unnecessary escape character: \\[.",["462","463"],"Unnecessary escape character: \\\".",["464","465"],["466","467"],["468","469"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'navigate', 'userAchieve', 'userEmail', 'userID', 'userName', 'userPhone', 'userPortfolioLink', 'userPosition', 'userTeamProject', 'userUsingStack', and 'userWhyFrontend'. Either include them or remove the dependency array.",["470"],"React Hook useMemo has missing dependencies: 'userHardWork', 'userKeyWord', 'userMostDeeplyWork', and 'userMotiv'. Either include them or remove the dependency array.",["471"],"'OpenSubmit' is assigned a value but never used.","'Loading' is defined but never used.","'adminState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'navigate', 'userDesignGrowth', 'userEmail', 'userID', 'userName', 'userPhone', 'userPortfolioLink', 'userPosition', 'userTeamworkExperience', 'userToolExperience', and 'userWhyDesign'. Either include them or remove the dependency array.",["472"],["473"],"'Section' is defined but never used.","'frontendDummy' is defined but never used.","'backendDummy' is defined but never used.","'designDummy' is defined but never used.","'Quit' is defined but never used.","'Header' is defined but never used.","'checkBox' is defined but never used.","'checkedBox' is defined but never used.","React Hook useEffect has missing dependencies: 'adminState', 'dispatch', and 'navigate'. Either include them or remove the dependency array.",["474"],"React Hook useEffect has missing dependencies: 'dispatch' and 'position'. Either include them or remove the dependency array.",["475"],"React Hook useEffect has missing dependencies: 'navigate', 'userDifficultAndOvercoming', 'userEmail', 'userID', 'userImportantGroup', 'userName', 'userPhone', 'userPortfolioLink', 'userPosition', and 'userStudyFramework'. Either include them or remove the dependency array.",["476"],["477"],"'useMemo' is defined but never used.","'ListType' is defined but never used.","'Link' is defined but never used.","'Modal' is defined but never used.","'clickState' is assigned a value but never used.","'setClickState' is assigned a value but never used.",["478"],["479"],"'failList' is assigned a value but never used.","'setFailList' is assigned a value but never used.",["480"],"React Hook useEffect has a missing dependency: 'position'. Either include it or remove the dependency array.",["481"],"'Button' is defined but never used.","'axios' is defined but never used.","'useNavigate' is defined but never used.","React Hook useMemo has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","LogicalExpression","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"482","text":"483"},{"range":"484","text":"483"},{"range":"485","text":"483"},"'useEffect' is defined but never used.","'HeaderType' is defined but never used.","React Hook useEffect has a missing dependency: 'fire'. Either include it or remove the dependency array.",["486"],"'useParams' is defined but never used.","'onModalType' is defined but never used.","'userModalState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'adminState', 'navigate', 'props.position', and 'props.sid'. Either include them or remove the dependency array.",["487"],{"range":"488","text":"483"},{"range":"489","text":"483"},{"range":"490","text":"483"},"'AgreeType' is defined but never used.","'passMailList' is assigned a value but never used.","'checkList' is assigned a value but never used.","'setCheckList' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'passMailList', 'userEmail', 'userId', and 'userName'. Either include them or remove the dependency array.",["491"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'React' is defined but never used.","'css' is defined but never used.","'oops' is defined but never used.","'InputType' is defined but never used.",{"desc":"492","fix":"493"},{"messageId":"494","fix":"495","desc":"496"},{"messageId":"497","fix":"498","desc":"499"},{"messageId":"494","fix":"500","desc":"496"},{"messageId":"497","fix":"501","desc":"499"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"messageId":"494","fix":"506","desc":"496"},{"messageId":"497","fix":"507","desc":"499"},{"messageId":"494","fix":"508","desc":"496"},{"messageId":"497","fix":"509","desc":"499"},{"messageId":"494","fix":"510","desc":"496"},{"messageId":"497","fix":"511","desc":"499"},{"messageId":"494","fix":"512","desc":"496"},{"messageId":"497","fix":"513","desc":"499"},{"desc":"514","fix":"515"},{"desc":"516","fix":"517"},{"desc":"518","fix":"519"},{"desc":"520","fix":"521"},{"desc":"522","fix":"523"},{"desc":"524","fix":"525"},{"desc":"526","fix":"527"},{"desc":"528","fix":"529"},{"desc":"522","fix":"530"},{"desc":"522","fix":"531"},{"desc":"522","fix":"532"},{"desc":"533","fix":"534"},[5030,5030]," rel=\"noreferrer\"",[5170,5170],[5310,5310],{"desc":"535","fix":"536"},{"desc":"537","fix":"538"},[15816,15816],[16863,16863],[18107,18107],{"desc":"539","fix":"540"},"Update the dependencies array to be: [navigate, userEmail, userHardWork, userID, userKeyWord, userMostDeeplyWork, userMotiv, userName, userPhone, userPosition]",{"range":"541","text":"542"},"removeEscape",{"range":"543","text":"544"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"545","text":"546"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"547","text":"544"},{"range":"548","text":"546"},"Update the dependencies array to be: [userDepartment, userEmail, userID, userName, userPhone, userPosition]",{"range":"549","text":"550"},"Update the dependencies array to be: [position, precautions, privacy, submitCount, tempCount, tempId, tempEmail, tempPosition, userNameCheck, userEmailCheck, userPhoneCheck, userDepartmentCheck, userIDCheck]",{"range":"551","text":"552"},{"range":"553","text":"544"},{"range":"554","text":"546"},{"range":"555","text":"544"},{"range":"556","text":"546"},{"range":"557","text":"544"},{"range":"558","text":"546"},{"range":"559","text":"544"},{"range":"560","text":"546"},"Update the dependencies array to be: [navigate, userAchieve, userEmail, userID, userName, userPhone, userPortfolioLink, userPosition, userTeamProject, userUsingStack, userWhyFrontend]",{"range":"561","text":"562"},"Update the dependencies array to be: [userMotiv, userHardWork, userKeyWord, userMostDeeplyWork, whyFrontend, usingStack, teamProject, achieve, submitCount]",{"range":"563","text":"564"},"Update the dependencies array to be: [navigate, userDesignGrowth, userEmail, userID, userName, userPhone, userPortfolioLink, userPosition, userTeamworkExperience, userToolExperience, userWhyDesign]",{"range":"565","text":"566"},"Update the dependencies array to be: [userMotiv, userHardWork, userKeyWord, userMostDeeplyWork, whyDesign, toolExperience, teamworkExperience, designGrowth, submitCount]",{"range":"567","text":"568"},"Update the dependencies array to be: [adminState, dispatch, navigate]",{"range":"569","text":"570"},"Update the dependencies array to be: [userModalState, newList, dispatch, position]",{"range":"571","text":"572"},"Update the dependencies array to be: [navigate, userDifficultAndOvercoming, userEmail, userID, userImportantGroup, userName, userPhone, userPortfolioLink, userPosition, userStudyFramework]",{"range":"573","text":"574"},"Update the dependencies array to be: [userMotiv, userHardWork, userKeyWord, userMostDeeplyWork, difficultAndOvercoming, studyFramework, importantGroup, submitCount]",{"range":"575","text":"576"},{"range":"577","text":"570"},{"range":"578","text":"570"},{"range":"579","text":"570"},"Update the dependencies array to be: [userModalState, newList, position]",{"range":"580","text":"581"},"Update the dependencies array to be: [fire]",{"range":"582","text":"583"},"Update the dependencies array to be: [adminState, navigate, props.position, props.sid]",{"range":"584","text":"585"},"Update the dependencies array to be: [checkState, dispatch, passMailList, userEmail, userId, userName]",{"range":"586","text":"587"},[4090,4092],"[navigate, userEmail, userHardWork, userID, userKeyWord, userMostDeeplyWork, userMotiv, userName, userPhone, userPosition]",[3965,3966],"",[3965,3965],"\\",[3998,3999],[3998,3998],[5333,5335],"[userDepartment, userEmail, userID, userName, userPhone, userPosition]",[5940,6146],"[position, precautions, privacy, submitCount, tempCount, tempId, tempEmail, tempPosition, userNameCheck, userEmailCheck, userPhoneCheck, userDepartmentCheck, userIDCheck]",[24115,24116],[24115,24115],[24144,24145],[24144,24144],[26044,26045],[26044,26044],[26073,26074],[26073,26073],[3751,3753],"[navigate, userAchieve, userEmail, userID, userName, userPhone, userPortfolioLink, userPosition, userTeamProject, userUsingStack, userWhyFrontend]",[4278,4338],"[userMotiv, userHardWork, userKeyWord, userMostDeeplyWork, whyFrontend, usingStack, teamProject, achieve, submitCount]",[3854,3856],"[navigate, userDesignGrowth, userEmail, userID, userName, userPhone, userPortfolioLink, userPosition, userTeamworkExperience, userToolExperience, userWhyDesign]",[4391,4465],"[userMotiv, userHardWork, userKeyWord, userMostDeeplyWork, whyDesign, toolExperience, teamworkExperience, designGrowth, submitCount]",[3225,3227],"[adminState, dispatch, navigate]",[4696,4721],"[userModalState, newList, dispatch, position]",[3733,3735],"[navigate, userDifficultAndOvercoming, userEmail, userID, userImportantGroup, userName, userPhone, userPortfolioLink, userPosition, userStudyFramework]",[4304,4373],"[userMotiv, userHardWork, userKeyWord, userMostDeeplyWork, difficultAndOvercoming, studyFramework, importantGroup, submitCount]",[2203,2205],[2202,2204],[2713,2715],[4144,4169],"[userModalState, newList, position]",[599,601],"[fire]",[5889,5891],"[adminState, navigate, props.position, props.sid]",[15265,15277],"[checkState, dispatch, passMailList, userEmail, userId, userName]"]