[{"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\index.tsx":"1","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\reportWebVitals.ts":"2","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\App.tsx":"3","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\app\\store.ts":"4","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\hooks\\ScrollToTop.ts":"5","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\Index.tsx":"6","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\Common.tsx":"7","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\features\\fetcherSlice.ts":"8","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\styles\\GlobalFont.tsx":"9","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Frontend.tsx":"10","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Design.tsx":"11","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Backend.tsx":"12","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\emotion\\component.tsx":"13","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\styles\\Keyframes.ts":"14"},{"size":678,"mtime":1674233291635,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":1674233291947,"results":"17","hashOfConfig":"16"},{"size":1056,"mtime":1674233291326,"results":"18","hashOfConfig":"16"},{"size":304,"mtime":1674233292163,"results":"19","hashOfConfig":"16"},{"size":315,"mtime":1674233292969,"results":"20","hashOfConfig":"16"},{"size":18651,"mtime":1674233292352,"results":"21","hashOfConfig":"16"},{"size":13518,"mtime":1674233292264,"results":"22","hashOfConfig":"16"},{"size":3972,"mtime":1674233292852,"results":"23","hashOfConfig":"16"},{"size":1050,"mtime":1674233293896,"results":"24","hashOfConfig":"16"},{"size":10636,"mtime":1674233292736,"results":"25","hashOfConfig":"16"},{"size":10615,"mtime":1674233292647,"results":"26","hashOfConfig":"16"},{"size":9742,"mtime":1674233292558,"results":"27","hashOfConfig":"16"},{"size":13715,"mtime":1674233292456,"results":"28","hashOfConfig":"16"},{"size":511,"mtime":1674233293977,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kskrrf",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\index.tsx",[],[],"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\reportWebVitals.ts",[],[],"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\App.tsx",["81"],[],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport Index from './component/Index'\nimport GlobalStyles from './styles/GlobalFont';\nimport Common from './component/Common';\nimport Frontend from './component/position/Frontend';\nimport Design from './component/position/Design';\nimport Backend from './component/position/Backend';\nimport ScrollToTop from './hooks/ScrollToTop';\n\nexport interface WrapperProps {\n  children: React.ReactNode;\n  name?: string;\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <GlobalStyles />\n        <ScrollToTop />\n        <Routes>\n          <Route path='/' element={<Index />} />\n          <Route path='/common' element={<Common />} />\n          <Route path='/frontend' element={<Frontend />} />\n          <Route path='/backend' element={<Backend />} />\n          <Route path='/design' element={<Design />} />\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\app\\store.ts",[],[],"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\hooks\\ScrollToTop.ts",[],[],"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\Index.tsx",["82","83","84","85","86","87","88","89"],[],"/** @jsxImportSource @emotion/react */\nimport React, { ChangeEvent, useState } from 'react'\nimport axios from 'axios';\nimport checkBox from '../images/checkBox.svg';\nimport checkedBox from '../images/checkedBox.svg';\nimport { useMemo } from 'react';\nimport { css, keyframes } from \"@emotion/react\";\nimport { fadeLeft, fadeUp } from '../styles/Keyframes';\nimport { Section, Banner, Article, InputTitle, InputBox, PositionBox, Position, Require, Precautions, ArgreeBox, Argree, ButtonBox, Button, Modal } from './emotion/component';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, TestState } from '../app/store';\nimport { view, saveIndex, saveBackEnd, saveCommon, saveFrontEnd, saveDesign } from '../features/fetcherSlice';\nimport { useEffect } from 'react';\n\nexport default function Index() {\n    const [name, setName] = useState<string>('');\n    const [id, setID] = useState<number | string>('');\n    const [email, setEmail] = useState<string>('');\n    const [phone, setPhone] = useState<number | string>('');\n    const [department, setDepartment] = useState<string>('');\n    const [temp, setTemp] = useState<boolean>(false);\n\n    const [position, setPosition] = useState<string>('');\n    const [precautions, setPrecautions] = useState<boolean>(false);\n    const [privacy, setPrivacy] = useState<boolean>(false);\n    const [buttonState, setButtonState] = useState<boolean>(false);\n    const [tempButtonState, setTempButtonState] = useState<boolean>(false);\n    const [submitCount, setSubmitCount] = useState<number>(0);\n    const [tempCount, setTempCount] = useState<number>(0);\n\n    const userName = useSelector((state: TestState) => state.fetcher.userName);\n    const userID = useSelector((state: TestState) => state.fetcher.userID);\n    const userPhone = useSelector((state: TestState) => state.fetcher.userPhone);\n    const userEmail = useSelector((state: TestState) => state.fetcher.userEmail);\n    const userPosition = useSelector((state: TestState) => state.fetcher.userPosition);\n    const userDepartment = useSelector((state: TestState) => state.fetcher.userDepartment);\n\n\n    useEffect(() => {\n        // 이전 값들을 저장하기 위해서 Redux 사용\n        if (userName && userID && userPhone && userEmail && userPosition && userDepartment) {\n            setName(userName);\n            setID(userID);\n            setEmail(userEmail);\n            setPhone(userPhone);\n            setPosition(userPosition);\n            setDepartment(userDepartment);\n        }\n    }, [])\n\n    useMemo(() => {\n        if (name && id && email && phone && position && precautions && privacy && department) {\n            setButtonState(false)\n        } else {\n            setButtonState(true)\n        }\n\n        if (submitCount >= 1) {\n            setButtonState(true);\n        }\n\n        if (tempCount >= 1) {\n            setTempButtonState(true);\n        }\n\n    }, [name, id, email, phone, position, precautions, privacy, department, submitCount, tempCount])\n\n    const dispatch = useDispatch<AppDispatch>();\n    const navigate = useNavigate();\n\n    const handleTemp = async () => {\n        if (position) {\n            if (position === \"백엔드\") {\n                await axios.get(`/backendApplication?sid=${id}`)\n                    .then(async (res) => {\n                        if (res.data.motiv || res.data.hardwork || res.data.keyword || res.data.mostDeeplyWork) {\n                            setTemp(!temp);\n                            if (window.confirm(\"임시저장된 게시물을 이어서 쓸까요?\")) {\n                                await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: position, userDepartment: res.data.department }));\n                                await dispatch(saveBackEnd({ userDifficultAndOvercoming: res.data.difficultAndOvercoming, userImportantGroup: res.data.importantGroup, userPortfolioLink: res.data.portfolioLink, userStudyFramework: res.data.studyFramework }));\n                                await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\n                                await navigate('/common');\n                            } else {\n                                await dispatch(saveIndex({ userName: name, userID: id, userPhone: phone, userEmail: email, userPosition: position, userDepartment: department }));\n                                navigate('/common');\n                            }\n                        } else {\n                            alert(\"저장된 지원서가 없습니다!\");\n                        }\n                    })\n            }\n\n            if (position === \"프론트엔드\") {\n                await axios.get(`/frontendApplication?sid=${id}`)\n                    .then(async (res) => {\n                        if (res.data.motiv || res.data.hardwork || res.data.keyword || res.data.mostDeeplyWork) {\n                            setTemp(!temp);\n                            if (window.confirm(\"임시저장된 게시물을 이어서 쓸까요?\")) {\n                                await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: position, userDepartment: res.data.department }));\n                                await dispatch(saveFrontEnd({ userWhyFrontend: res.data.whyFrontend, userUsingStack: res.data.usingStack, userTeamProject: res.data.teamProject, userAchieve: res.data.achieve, userPortfolioLinkFront: res.data.portfolioLink }));;\n                                await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\n                                await navigate('/common');\n                            } else {\n                                await dispatch(saveIndex({ userName: name, userID: id, userPhone: phone, userEmail: email, userPosition: position, userDepartment: department }));\n                                navigate('/common');\n                            }\n                        } else {\n                            alert(\"저장된 지원서가 없습니다!\");\n                        }\n                    })\n            }\n\n            if (position === \"디자인\") {\n                await axios.get(`/backendApplication?sid=${id}`)\n                    .then(async (res) => {\n                        if (res.data.motiv || res.data.hardwork || res.data.keyword || res.data.mostDeeplyWork) {\n                            setTemp(!temp);\n                            if (window.confirm(\"임시저장된 게시물을 이어서 쓸까요?\")) {\n                                await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: position, userDepartment: res.data.department }));\n                                await dispatch(saveDesign({\n                                    userWhyDesign: res.data.whyDesign, userToolExperience: res.data.toolExperience, userTeamworkExperience: res.data.teamworkExperience, userPortfolioLinkDesign: res.data.portfolioLink, userDesignGrowth: res.data.designGrowth,\n                                }));\n                                await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\n                                await navigate('/common');\n                            } else {\n                                await dispatch(saveIndex({ userName: name, userID: id, userPhone: phone, userEmail: email, userPosition: position, userDepartment: department }));\n                                navigate('/common');\n                            }\n                        } else {\n                            alert(\"저장된 지원서가 없습니다!\");\n                        }\n                    })\n            }\n        } else {\n            alert(\"포지션을 먼저 선택해주세요!\");\n        }\n    }\n\n    const handleClick = async () => {\n        if (position) {\n            setSubmitCount((prev) => (prev + 1))\n            if (position === \"백엔드\") {\n                await axios.get(`/backendApplication?sid=${id}`)\n                    .then(async (res) => {\n                        if (res.data.motiv || res.data.hardwork || res.data.keyword || res.data.mostDeeplyWork) {\n                            setTemp(!temp);\n                        } else {\n                            dispatch(saveIndex({ userName: name, userID: id, userPhone: phone, userEmail: email, userPosition: position, userDepartment: department }));\n                            navigate('/common');\n                        }\n                    })\n            }\n\n            if (position === \"프론트엔드\") {\n                await axios.get(`/frontendApplication?sid=${id}`)\n                    .then(async (res) => {\n                        if (res.data.motiv || res.data.hardwork || res.data.keyword || res.data.mostDeeplyWork) {\n                            setTemp(!temp);\n                        } else {\n                            dispatch(saveIndex({ userName: name, userID: id, userPhone: phone, userEmail: email, userPosition: position, userDepartment: department }));\n                            navigate('/common');\n                        }\n                    })\n            }\n\n            if (position === \"디자인\") {\n                await axios.get(`/backendApplication?sid=${id}`)\n                    .then(async (res) => {\n                        if (res.data.motiv || res.data.hardwork || res.data.keyword || res.data.mostDeeplyWork) {\n                            setTemp(!temp);\n                        } else {\n                            dispatch(saveIndex({ userName: name, userID: id, userPhone: phone, userEmail: email, userPosition: position, userDepartment: department }));\n                            navigate('/common');\n                        }\n                    })\n            }\n        }\n    }\n\n    const continueApply = async () => {\n        setTempCount((prev) => (prev + 1))\n        if (position === \"백엔드\") {\n            await axios.get(`/backendApplication?sid=${id}`)\n                .then(async (res) => {\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: position, userDepartment: res.data.department }));\n                    await dispatch(saveBackEnd({ userDifficultAndOvercoming: res.data.difficultAndOvercoming, userImportantGroup: res.data.importantGroup, userPortfolioLink: res.data.portfolioLink, userStudyFramework: res.data.studyFramework }));\n                    await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\n                    await navigate('/common');\n                })\n        }\n\n        if (position === \"프론트엔드\") {\n            await axios.get(`/frontendApplication?sid=${id}`)\n                .then(async (res) => {\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: position, userDepartment: res.data.department }));\n                    await dispatch(saveFrontEnd({ userWhyFrontend: res.data.whyFrontend, userUsingStack: res.data.usingStack, userTeamProject: res.data.teamProject, userAchieve: res.data.achieve, userPortfolioLinkFront: res.data.portfolioLink }));;\n                    await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\n                    await navigate('/common');\n                })\n        }\n\n        if (position === \"디자인\") {\n            await axios.get(`/backendApplication?sid=${id}`)\n                .then(async (res) => {\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: position, userDepartment: res.data.department }));\n                    await dispatch(saveDesign({\n                        userWhyDesign: res.data.whyDesign, userToolExperience: res.data.toolExperience, userTeamworkExperience: res.data.teamworkExperience, userPortfolioLinkDesign: res.data.portfolioLink, userDesignGrowth: res.data.designGrowth,\n                    }));\n                    await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\n                    await navigate('/common');\n                })\n        }\n    }\n\n    const newApply = async () => {\n        await setTempCount((prev) => (prev + 1))\n        await dispatch(saveIndex({ userName: name, userID: id, userPhone: phone, userEmail: email, userPosition: position, userDepartment: department }));\n        if (position === \"프론트엔드\") {\n            await dispatch(saveFrontEnd({\n                userWhyFrontend: '',\n                userUsingStack: '',\n                userAchieve: '',\n                userPortfolioLinkFront: '',\n                userTeamProject: '',\n            }));\n        }\n        if (position === \"디자인\") {\n            await dispatch(saveDesign({\n                userWhyDesign: '',\n                userToolExperience: '',\n                userTeamworkExperience: '',\n                userPortfolioLinkDesign: '',\n                userDesignGrowth: '',\n            }));\n        }\n\n        if (position === \"백엔드\") {\n            await dispatch(saveBackEnd({\n                userDifficultAndOvercoming: '',\n                userImportantGroup: '',\n                userPortfolioLink: '',\n                userStudyFramework: '',\n            }));\n        }\n\n        await dispatch(saveCommon({\n            userMotiv: '',\n            userHardWork: '',\n            userKeyWord: '',\n            userMostDeeplyWork: '',\n        }))\n        navigate('/common');\n    }\n\n    function CheckPosition(event: React.MouseEvent<HTMLButtonElement>): void {\n        const name = (event.target as HTMLButtonElement).name;\n        setPosition(name);\n    }\n\n    const checking = (event: React.MouseEvent<HTMLImageElement>): void => {\n        const name = (event.target as HTMLImageElement).alt;\n        if (name === \"주의사항\") {\n            setPrecautions(!precautions);\n        }\n        if (name === \"개인정보\") {\n            setPrivacy(!privacy);\n        }\n    }\n\n    const changeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.target.name === \"이름\") {\n            setName(event.target.value);\n        }\n        if (event.target.name === \"학번\") {\n            setID(event.target.value);\n        }\n        if (event.target.name === \"이메일\") {\n            setEmail(event.target.value);\n        }\n        if (event.target.name === \"연락처\") {\n            setPhone(event.target.value);\n        }\n        if (event.target.name === \"학과\") {\n            setDepartment(event.target.value);\n        }\n    }\n\n    return (\n        <Section>\n            {temp ?\n                <Modal>\n                    <Button name=\"임시저장\" onClick={newApply} disabled={tempButtonState}>{tempCount >= 1 ? `잠시만 기다려주세요...` : `새로 작성하기`}</Button>\n                    <Button name=\"제출하기\" onClick={continueApply} disabled={tempButtonState}>{tempCount >= 1 ? `잠시만 기다려주세요...` : `이어서 작성하기`}</Button>\n                </Modal>\n                : null\n            }\n            <Banner />\n            <Article>\n                <InputTitle>이름 <Require /> </InputTitle>\n                <InputBox type=\"text\" placeholder=\"이름을 입력해주세요\" name=\"이름\" onChange={changeValue} value={name} />\n            </Article>\n            <Article>\n                <InputTitle>학번 <Require /> </InputTitle>\n                <InputBox type=\"number\" placeholder=\"학번을 입력해주세요\" name=\"학번\" onChange={changeValue} value={id} />\n            </Article>\n            <Article>\n                <InputTitle>학과 <Require /> </InputTitle>\n                <InputBox type=\"string\" placeholder=\"학과를 입력해주세요\" name=\"학과\" onChange={changeValue} value={department} />\n            </Article>\n            <Article>\n                <InputTitle>이메일 <Require /> </InputTitle>\n                <InputBox type=\"text\" placeholder=\"이메일을 입력해주세요\" name=\"이메일\" onChange={changeValue} value={email} />\n            </Article>\n            <Article>\n                <InputTitle>연락처 (하이픈을 제외한 숫자만 입력)<Require /> </InputTitle>\n                <InputBox type=\"number\" placeholder=\"연락 가능한 번호를 입력해주세요\" name=\"연락처\" onChange={changeValue} value={phone} />\n            </Article>\n            <Article>\n                <InputTitle>지원 포지션 <Require /> </InputTitle>\n                <PositionBox>\n                    <Position name=\"백엔드\" onClick={CheckPosition} state={position}>백엔드</Position>\n                    <Position name=\"프론트엔드\" onClick={CheckPosition} state={position}>프론트엔드</Position>\n                    <Position name=\"디자인\" onClick={CheckPosition} state={position}>디자인</Position>\n                </PositionBox>\n            </Article>\n            <Article>\n                <Precautions />\n            </Article>\n            <Article>\n                <ArgreeBox>\n                    <Argree name=\"주의사항\" src={precautions ? checkedBox : checkBox} text=\"위의 주의사항을 확인하였습니다\" onClick={checking} />\n                    <Argree name=\"개인정보\" src={privacy ? checkedBox : checkBox} text=\"개인 정보 수집 및 이용에 동의합니다 (모집 종료 후 개인정보는 자동으로 파기됩니다)\" onClick={checking} />\n                </ArgreeBox>\n            </Article>\n            <ButtonBox>\n                <Button name=\"제출하기\" disabled={buttonState} onClick={handleClick}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `공통문항 작성하기`}</Button>\n            </ButtonBox>\n        </Section>\n    )\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\Common.tsx",["90","91","92"],[],"import React, { ChangeEvent } from 'react'\nimport { ButtonBox, Section, Button, Require, Article, InputTitle, TextAreaBox, InputBox, Banner, WordLength } from './emotion/component'\nimport { useNavigate } from 'react-router-dom'\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, TestState } from '../app/store';\nimport { saveCommon, saveIndex, view, saveBackEnd, saveDesign, saveFrontEnd } from '../features/fetcherSlice';\nimport { useEffect, useMemo } from 'react';\nimport axios from 'axios';\n\nexport default function Common() {\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch<AppDispatch>();\n    const [motiv, setMotiv] = useState<string>('');\n    const [hardwork, setHardwork] = useState<string>('');\n    const [keyword, setKeyword] = useState<string>('');\n    const [mostDeeplyWork, setMostDeeplyyWork] = useState<string>('');\n    const [buttonState, setButtonState] = useState<boolean>(false);\n    const [submitCount, setSubmitCount] = useState<number>(0);\n\n    const userName = useSelector((state: TestState) => state.fetcher.userName);\n    const userID = useSelector((state: TestState) => state.fetcher.userID);\n    const userPhone = useSelector((state: TestState) => state.fetcher.userPhone);\n    const userEmail = useSelector((state: TestState) => state.fetcher.userEmail);\n    const userPosition = useSelector((state: TestState) => state.fetcher.userPosition);\n    const userDepartment = useSelector((state: TestState) => state.fetcher.userDepartment);\n\n    const userMotiv = useSelector((state: TestState) => state.fetcher.userMotiv);\n    const userHardWork = useSelector((state: TestState) => state.fetcher.userHardWork);\n    const userKeyWord = useSelector((state: TestState) => state.fetcher.userKeyWord);\n    const userMostDeeplyWork = useSelector((state: TestState) => state.fetcher.userMostDeeplyWork);\n\n    const userWhyFrontend = useSelector((state: TestState) => state.fetcher.userWhyFrontend);\n    const userUsingStack = useSelector((state: TestState) => state.fetcher.userUsingStack);\n    const userTeamProject = useSelector((state: TestState) => state.fetcher.userTeamProject);\n    const userAchieve = useSelector((state: TestState) => state.fetcher.userAchieve);\n    const userPortfolioLinkFront = useSelector((state: TestState) => state.fetcher.userPortfolioLinkFront);\n\n    const userWhyDesign = useSelector((state: TestState) => state.fetcher.userWhyDesign);\n    const userToolExperience = useSelector((state: TestState) => state.fetcher.userToolExperience);\n    const userTeamworkExperience = useSelector((state: TestState) => state.fetcher.userTeamworkExperience);\n    const userDesignGrowth = useSelector((state: TestState) => state.fetcher.userDesignGrowth);\n    const userPortfolioLinkDesign = useSelector((state: TestState) => state.fetcher.userPortfolioLinkDesign);\n\n    const userDifficultAndOvercoming = useSelector((state: TestState) => state.fetcher.userDifficultAndOvercoming);\n    const userStudyFramework = useSelector((state: TestState) => state.fetcher.userStudyFramework);\n    const userImportantGroup = useSelector((state: TestState) => state.fetcher.userImportantGroup);\n    const userPortfolioLinkBack = useSelector((state: TestState) => state.fetcher.userPortfolioLinkBack);\n\n    useEffect(() => {\n\n        if (!userName && !userID && !userPhone && !userEmail && !userPosition) {\n            alert('잘못된 접근입니다!');\n            navigate('/')\n        }\n\n        // 이전 값들을 저장하기 위해서 Redux 사용\n        if (userMotiv) {\n            setMotiv(userMotiv)\n        }\n        if (userHardWork) {\n            setHardwork(userHardWork)\n        }\n        if (userKeyWord) {\n            setKeyword(userKeyWord)\n        }\n        if (userMostDeeplyWork) {\n            setMostDeeplyyWork(userMostDeeplyWork)\n        }\n    }, [])\n\n    useMemo(() => {\n        if (motiv && hardwork && keyword && mostDeeplyWork) {\n            setButtonState(false)\n        } else {\n            setButtonState(true)\n        }\n\n        if (submitCount >= 1) {\n            setButtonState(true);\n        }\n    }, [motiv, hardwork, keyword, mostDeeplyWork, submitCount])\n\n\n    const Back = () => {\n        setSubmitCount((prev) => (prev + 1));\n        dispatch(saveCommon({ userMotiv: motiv, userHardWork: hardwork, userKeyword: keyword, userMostDeeplyWork: mostDeeplyWork }));\n        navigate('/');\n    }\n\n    const PartHistoy = () => {\n        setSubmitCount((prev) => (prev + 1));\n        dispatch(saveCommon({ userMotiv: motiv, userHardWork: hardwork, userKeyword: keyword, userMostDeeplyWork: mostDeeplyWork }));\n        if (userPosition === \"프론트엔드\") {\n            navigate('/frontend');\n        } else if (userPosition === \"백엔드\") {\n            navigate('/backend')\n        } else if (userPosition === \"디자인\") {\n            navigate('/design')\n        } else {\n            alert(\"오류가 발생했습니다, 강남대학교 멋쟁이사자처럼에 문의해주세요!\")\n            navigate('/');\n        }\n    }\n\n    const TempSave = () => {\n        setSubmitCount((prev) => (prev + 1));\n        if (userPosition === \"프론트엔드\") {\n            axios.post('/frontendApplication', JSON.stringify({\n                department: userDepartment,\n                whyFrontend: userWhyFrontend,\n                email: userEmail,\n                hardWork: hardwork,\n                usingStack: userUsingStack,\n                keyWord: keyword,\n                mostDeeplyWork: mostDeeplyWork,\n                motive: motiv,\n                name: userName,\n                passOrNot: true,\n                phoneNumber: userPhone,\n                portfolioFile: \"\",\n                portfolioLink: userPortfolioLinkFront,\n                sid: userID,\n                teamProject: userTeamProject,\n                achieve: userAchieve,\n            }),\n                {\n                    headers: {\n                        \"Content-type\": \"application/json\",\n                    }\n                }\n            )\n                .then((res) => {\n                    console.log(res);\n                    dispatch(saveFrontEnd({\n                        userWhyFrontend: '',\n                        userUsingStack: '',\n                        userAchieve: '',\n                        userPortfolioLinkFront: '',\n                        userTeamProject: '',\n                    }));\n                    dispatch(saveCommon({\n                        userMotiv: '',\n                        userHardWork: '',\n                        userKeyWord: '',\n                        userMostDeeplyWork: '',\n                    }))\n                    dispatch(saveIndex({\n                        userName: '',\n                        userID: '',\n                        userDepartment: '',\n                        userEmail: '',\n                        userPhone: '',\n                        userPosition: '',\n                    }))\n                    navigate('/');\n                })\n        }\n\n        if (userPosition === \"백엔드\") {\n            axios.post('/backendApplication', JSON.stringify({\n                department: userDepartment,\n                difficultAndOvercoming: userDifficultAndOvercoming,\n                email: userEmail,\n                hardWork: hardwork,\n                importantGroup: userImportantGroup,\n                keyWord: keyword,\n                mostDeeplyWork: mostDeeplyWork,\n                motive: motiv,\n                name: userName,\n                passOrNot: true,\n                phoneNumber: userPhone,\n                portfolioFile: \"\",\n                portfolioLink: userPortfolioLinkBack,\n                sid: userID,\n                studyFramework: userStudyFramework,\n            }),\n                {\n                    headers: {\n                        \"Content-type\": \"application/json\",\n                    }\n                }\n            )\n                .then((res) => {\n                    console.log(res);\n                    dispatch(saveBackEnd({\n                        userDifficultAndOvercoming: '',\n                        userImportantGroup: '',\n                        userPortfolioLink: '',\n                        userStudyFramework: '',\n                    }));\n                    dispatch(saveCommon({\n                        userMotiv: '',\n                        userHardWork: '',\n                        userKeyWord: '',\n                        userMostDeeplyWork: '',\n                    }))\n                    dispatch(saveIndex({\n                        userName: '',\n                        userID: '',\n                        userDepartment: '',\n                        userEmail: '',\n                        userPhone: '',\n                        userPosition: '',\n                    }))\n                    navigate('/');\n                })\n        }\n\n        if (userPosition === \"디자인\") {\n\n            axios.post('/designApplication', JSON.stringify({\n                department: userDepartment,\n                whyDesign: userWhyDesign,\n                email: userEmail,\n                hardWork: hardwork,\n                toolExperience: userToolExperience,\n                keyWord: keyword,\n                mostDeeplyWork: mostDeeplyWork,\n                motive: motiv,\n                name: userName,\n                passOrNot: true,\n                phoneNumber: userPhone,\n                portfolioFile: \"\",\n                portfolioLink: userPortfolioLinkDesign,\n                sid: userID,\n                teamworkExperience: userTeamworkExperience,\n                designGrowth: userDesignGrowth\n            }),\n                {\n                    headers: {\n                        \"Content-type\": \"application/json\",\n                    }\n                }\n            )\n                .then((res) => {\n                    console.log(res);\n                    dispatch(saveDesign({\n                        userWhyDesign: '',\n                        userToolExperience: '',\n                        userTeamworkExperience: '',\n                        userPortfolioLinkDesign: '',\n                        userDesignGrowth: '',\n                    }));\n                    dispatch(saveCommon({\n                        userMotiv: '',\n                        userHardWork: '',\n                        userKeyWord: '',\n                        userMostDeeplyWork: '',\n                    }))\n                    dispatch(saveIndex({\n                        userName: '',\n                        userID: '',\n                        userDepartment: '',\n                        userEmail: '',\n                        userPhone: '',\n                        userPosition: '',\n                    }))\n                    navigate('/');\n                })\n        }\n    }\n\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        if (event.target.name === \"최종목표\") {\n            setMotiv(event.target.value);\n        }\n\n        if (event.target.name === \"활동\") {\n            setHardwork(event.target.value);\n        }\n\n        if (event.target.name === \"키워드\") {\n            setKeyword(event.target.value);\n        }\n\n        if (event.target.name === \"감명\") {\n            setMostDeeplyyWork(event.target.value);\n        }\n    }\n\n    return (\n        <Section>\n            <Banner />\n            <Article>\n                <InputTitle>지원자분의 인생의 최종 목표는 무엇인가요?<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"최종목표\" onChange={handleChange} value={motiv} />\n                <WordLength>{motiv.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>학교 공부를 제외하고 본인의 인생에 있어서 가장 열심히 했던 활동은 무엇인가요?<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"활동\" onChange={handleChange} value={hardwork} />\n                <WordLength>{hardwork.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>자신을 설명할 수 있는 키워드 3개와 그 이유에 대하여 설명해주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"키워드\" onChange={handleChange} value={keyword} />\n                <WordLength>{keyword.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>최근에 가장 감명 깊었던 책 · 영화 · 노래가 있다면 하나를 선택해주시고, 그 이유에 대하여 설명해주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"감명\" onChange={handleChange} value={mostDeeplyWork} />\n                <WordLength>{mostDeeplyWork.length}</WordLength>\n            </Article>\n            <ButtonBox>\n                <Button name=\"임시저장\" onClick={TempSave} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `임시저장`}</Button>\n                <Button name=\"제출하기\" onClick={Back}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `뒤로가기`}</Button>\n                <Button name=\"제출하기\" onClick={PartHistoy} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `파트별 문항 작성하기`}</Button>\n            </ButtonBox>\n        </Section>\n    )\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\features\\fetcherSlice.ts",["93","94"],[],"import { createAsyncThunk, createSlice, isFulfilled } from \"@reduxjs/toolkit\";\n\nexport const fetcherSlice = createSlice({\n    name: 'fetcher',\n    initialState: {\n        userName: '',\n        userID: '',\n        userDepartment: '',\n        userEmail: '',\n        userPhone: '',\n        userPosition: '',\n        userMotiv: '',\n        userHardWork: '',\n        userKeyWord: '',\n        userMostDeeplyWork: '',\n\n        // 백엔드\n        userDifficultAndOvercoming: '',\n        userStudyFramework: '',\n        userImportantGroup: '',\n\n        // 프론트엔드\n        userWhyFrontend: '',\n        userUsingStack: '',\n        userTeamProject: '',\n        userAchieve: '',\n\n        // 디자인\n        userWhyDesign: '',\n        userToolExperience: '',\n        userTeamworkExperience: '',\n        userDesignGrowth: '',\n\n        // 공통 포트폴리오\n        userPortfolioLinkFront: '',\n        userPortfolioLinkBack: '',\n        userPortfolioLinkDesign: '',\n\n\n    },\n    reducers: {\n        saveIndex: (state, action) => {\n            // console.log(action);\n            // console.log(action.payload);\n            state.userName = action.payload.userName;\n            state.userID = action.payload.userID;\n            state.userDepartment = action.payload.userDepartment;\n            state.userEmail = action.payload.userEmail;\n            state.userPhone = action.payload.userPhone;\n            state.userPosition = action.payload.userPosition;\n        },\n        saveCommon: (state, action) => {\n            state.userMotiv = action.payload.userMotiv;\n            state.userHardWork = action.payload.userHardWork;\n            state.userKeyWord = action.payload.userKeyword;\n            state.userMostDeeplyWork = action.payload.userMostDeeplyWork;\n        },\n        saveDesign: (state, action) => {\n            state.userWhyDesign = action.payload.userWhyDesign;\n            state.userToolExperience = action.payload.userToolExperience;\n            state.userTeamworkExperience = action.payload.userTeamworkExperience;\n            state.userDesignGrowth = action.payload.userDesignGrowth;\n            state.userPortfolioLinkDesign = action.payload.userPortfolioLinkDesign;\n        },\n        saveFrontEnd: (state, action) => {\n            state.userWhyFrontend = action.payload.userWhyFrontend;\n            state.userUsingStack = action.payload.userUsingStack;\n            state.userTeamProject = action.payload.userTeamProject;\n            state.userAchieve = action.payload.userAchieve;\n            state.userPortfolioLinkFront = action.payload.userPortfolioLinkFront;\n        },\n        saveBackEnd: (state, action) => {\n            state.userDifficultAndOvercoming = action.payload.userDifficultAndOvercoming;\n            state.userStudyFramework = action.payload.userStudyFramework;\n            state.userImportantGroup = action.payload.userImportantGroup;\n            state.userPortfolioLinkBack = action.payload.userPortfolioLinkBack;\n        },\n        view: (state) => {\n            console.log(state.userName);\n            console.log(state.userID);\n            console.log(state.userEmail);\n            console.log(state.userPhone);\n            console.log(state.userPosition);\n            console.log(state.userMotiv);\n            console.log(state.userHardWork);\n            console.log(state.userKeyWord);\n            console.log(state.userMostDeeplyWork);\n            // console.log(state.userWhyDesign);\n            // console.log(state.userToolExperience);\n            // console.log(state.userTeamworkExperience);\n            // console.log(state.userDesignGrowth);\n            console.log(state.userWhyFrontend);\n            console.log(state.userUsingStack);\n            console.log(state.userTeamProject);\n            console.log(state.userAchieve);\n        },\n    },\n    extraReducers: {},\n})\n\nexport const { saveIndex, saveCommon, saveBackEnd, saveFrontEnd, saveDesign, view } = fetcherSlice.actions;\nexport default fetcherSlice.reducer;","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\styles\\GlobalFont.tsx",[],[],"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Frontend.tsx",["95","96"],[],"import React, { ChangeEvent } from 'react'\nimport { ButtonBox, Section, Button, Require, Article, InputTitle, TextAreaBox, InputBox, Banner, WordLength } from '../emotion/component'\nimport { useNavigate } from 'react-router-dom'\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, TestState } from '../../app/store';\nimport { saveCommon, saveIndex, view, saveFrontEnd } from '../../features/fetcherSlice';\nimport { useEffect, useMemo } from 'react';\nimport axios from 'axios';\n\nexport default function Frontend() {\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch<AppDispatch>();\n    const [whyFrontend, setWhyFrontend] = useState('');\n    const [usingStack, setUsingStack] = useState('');\n    const [teamProject, setTeamProject] = useState('');\n    const [achieve, setAchieve] = useState('');\n    const [buttonState, setButtonState] = useState(false);\n    const [portfolioLink, setPortfolioLink] = useState('');\n    const [submitCount, setSubmitCount] = useState<number>(0);\n\n\n    const userName = useSelector((state: TestState) => state.fetcher.userName);\n    const userID = useSelector((state: TestState) => state.fetcher.userID);\n    const userPhone = useSelector((state: TestState) => state.fetcher.userPhone);\n    const userEmail = useSelector((state: TestState) => state.fetcher.userEmail);\n    const userPosition = useSelector((state: TestState) => state.fetcher.userPosition);\n    const userDepartment = useSelector((state: TestState) => state.fetcher.userDepartment);\n\n    const userMotiv = useSelector((state: TestState) => state.fetcher.userMotiv);\n    const userHardWork = useSelector((state: TestState) => state.fetcher.userHardWork);\n    const userKeyWord = useSelector((state: TestState) => state.fetcher.userKeyWord);\n    const userMostDeeplyWork = useSelector((state: TestState) => state.fetcher.userMostDeeplyWork);\n\n    const userWhyFrontend = useSelector((state: TestState) => state.fetcher.userWhyFrontend);\n    const userUsingStack = useSelector((state: TestState) => state.fetcher.userUsingStack);\n    const userTeamProject = useSelector((state: TestState) => state.fetcher.userTeamProject);\n    const userAchieve = useSelector((state: TestState) => state.fetcher.userAchieve);\n    const userPortfolioLink = useSelector((state: TestState) => state.fetcher.userPortfolioLinkFront);\n\n    useEffect(() => {\n\n        if (!userName && !userID && !userPhone && !userEmail && !userPosition) {\n            alert('잘못된 접근입니다!');\n            navigate('/')\n        }\n\n        // 이전 값들을 저장하기 위해서 Redux 사용\n\n        if (userWhyFrontend) {\n            setWhyFrontend(userWhyFrontend)\n        }\n        if (userUsingStack) {\n            setUsingStack(userUsingStack)\n        }\n        if (userTeamProject) {\n            setTeamProject(userTeamProject)\n        }\n        if (userAchieve) {\n            setAchieve(userAchieve)\n        }\n        if (userPortfolioLink) {\n            setPortfolioLink(userPortfolioLink)\n        }\n    }, [])\n\n    useMemo(() => {\n        if (whyFrontend && usingStack && teamProject && achieve) {\n            setButtonState(false)\n        } else {\n            setButtonState(true)\n        }\n        if (submitCount >= 1) {\n            setButtonState(true);\n        }\n    }, [whyFrontend, usingStack, teamProject, achieve, submitCount])\n\n\n    const Back = () => {\n        setSubmitCount((prev) => (prev + 1))\n        dispatch(saveFrontEnd({ userWhyFrontend: whyFrontend, userUsingStack: usingStack, userTeamProject: teamProject, userAchieve: achieve, userPortfolioLinkFront: portfolioLink }));\n        navigate('/common');\n    }\n\n\n    const TempSave = () => {\n        setSubmitCount((prev) => (prev + 1));\n        if (userPosition === \"프론트엔드\") {\n            axios.post('/frontendApplication', JSON.stringify({\n                department: userDepartment,\n                whyFrontend: whyFrontend,\n                email: userEmail,\n                hardWork: userHardWork,\n                usingStack: usingStack,\n                keyWord: userKeyWord,\n                mostDeeplyWork: userMostDeeplyWork,\n                motive: userMotiv,\n                name: userName,\n                passOrNot: true,\n                phoneNumber: userPhone,\n                portfolioFile: \"\",\n                portfolioLink: portfolioLink,\n                sid: userID,\n                teamProject: teamProject,\n                achieve: achieve\n            }),\n                {\n                    headers: {\n                        \"Content-type\": \"application/json\",\n                    }\n                }\n            )\n                .then((res) => {\n                    console.log(res);\n                    dispatch(saveFrontEnd({\n                        userWhyFrontend: '',\n                        userUsingStack: '',\n                        userAchieve: '',\n                        userPortfolioLinkFront: '',\n                        userTeamProject: '',\n                    }));\n                    dispatch(saveCommon({\n                        userMotiv: '',\n                        userHardWork: '',\n                        userKeyWord: '',\n                        userMostDeeplyWork: '',\n                    }))\n                    dispatch(saveIndex({\n                        userName: '',\n                        userID: '',\n                        userDepartment: '',\n                        userEmail: '',\n                        userPhone: '',\n                        userPosition: '',\n                    }))\n                    navigate('/');\n                })\n        }\n    }\n\n\n    const Submit = () => {\n        setSubmitCount((prev) => (prev + 1))\n        axios.post('/frontendApplication', JSON.stringify({\n            department: userDepartment,\n            whyFrontend: whyFrontend,\n            email: userEmail,\n            hardWork: userHardWork,\n            usingStack: usingStack,\n            keyWord: userKeyWord,\n            mostDeeplyWork: userMostDeeplyWork,\n            motive: userMotiv,\n            name: userName,\n            passOrNot: true,\n            phoneNumber: userPhone,\n            portfolioFile: \"\",\n            portfolioLink: portfolioLink,\n            sid: userID,\n            teamProject: teamProject,\n            achieve: achieve\n        }),\n            {\n                headers: {\n                    \"Content-type\": \"application/json\",\n                }\n            }\n        )\n            .then((res) => {\n                console.log(res);\n                dispatch(saveFrontEnd({\n                    userWhyFrontend: '',\n                    userUsingStack: '',\n                    userAchieve: '',\n                    userPortfolioLinkFront: '',\n                    userTeamProject: '',\n                }));\n                dispatch(saveCommon({\n                    userMotiv: '',\n                    userHardWork: '',\n                    userKeyWord: '',\n                    userMostDeeplyWork: '',\n                }))\n                dispatch(saveIndex({\n                    userName: '',\n                    userID: '',\n                    userDepartment: '',\n                    userEmail: '',\n                    userPhone: '',\n                    userPosition: '',\n                }))\n                navigate('/');\n            })\n    }\n\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement> | ChangeEvent<HTMLInputElement>) => {\n        if (event.target.name === \"동기\") {\n            setWhyFrontend(event.target.value);\n        }\n\n        if (event.target.name === \"프레임워크\") {\n            setUsingStack(event.target.value);\n        }\n\n        if (event.target.name === \"경험\") {\n            setTeamProject(event.target.value);\n        }\n\n        if (event.target.name === \"성장\") {\n            setAchieve(event.target.value);\n        }\n\n        if (event.target.name === \"포트폴리오\") {\n            setPortfolioLink(event.target.value);\n        }\n    }\n\n    return (\n        <Section>\n            <Banner />\n            <Article>\n                <InputTitle>프론트엔드 트랙을 선택하게 된 이유를 구체적으로 서술해주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"동기\" onChange={handleChange} value={whyFrontend} />\n                <WordLength>{whyFrontend.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>프론트엔드 개발과 관련된 프레임워크나 html, css, js 등의 언어를 사용해 보신 적 있으신가요? 있으시다면 어디까지 사용해 보셨는지 구체적으로 적어주세요.<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"프레임워크\" onChange={handleChange} value={usingStack} />\n                <WordLength>{usingStack.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>팀 활동이나 프로젝트를 경험해본 내용과 이를 통해 자신의 성장 경험에 대해서 서술해주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"경험\" onChange={handleChange} value={teamProject} />\n                <WordLength>{teamProject.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>멋사 프론트엔드 아기사자로 활동하면서 얻어 가고 싶은 것은 무엇인가요?<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"성장\" onChange={handleChange} value={achieve} />\n                <WordLength>{achieve.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>포트폴리오 링크가 있다면 첨부해주세요 </InputTitle>\n                <InputBox type=\"text\" placeholder=\"포트폴리오 링크를 입력해주세요\" maxLength={200} name=\"포트폴리오\" onChange={handleChange} value={portfolioLink} />\n            </Article>\n            <ButtonBox>\n                <Button name=\"임시저장\" onClick={TempSave} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `임시저장`}</Button>\n                <Button name=\"제출하기\" onClick={Back}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `뒤로가기`}</Button>\n                <Button name=\"제출하기\" onClick={Submit} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `제출하기`}</Button>\n            </ButtonBox>\n        </Section>\n    )\n}","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Design.tsx",["97","98"],[],"import React, { ChangeEvent } from 'react'\nimport { ButtonBox, Section, Button, Require, Article, InputTitle, TextAreaBox, InputBox, Banner, WordLength } from '../emotion/component'\nimport { useNavigate } from 'react-router-dom'\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, TestState } from '../../app/store';\nimport { saveCommon, saveIndex, view, saveDesign } from '../../features/fetcherSlice';\nimport { useEffect, useMemo } from 'react';\nimport axios from 'axios';\n\n\nexport default function Design() {\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch<AppDispatch>();\n    const [whyDesign, setWhyDesign] = useState('');\n    const [toolExperience, setToolExperience] = useState('');\n    const [teamworkExperience, setTeamworkExperience] = useState('');\n    const [designGrowth, setDesignGrowth] = useState('');\n    const [buttonState, setButtonState] = useState(false);\n    const [portfolioLink, setPortfolioLink] = useState('');\n    const [submitCount, setSubmitCount] = useState<number>(0);\n\n    const userName = useSelector((state: TestState) => state.fetcher.userName);\n    const userID = useSelector((state: TestState) => state.fetcher.userID);\n    const userPhone = useSelector((state: TestState) => state.fetcher.userPhone);\n    const userEmail = useSelector((state: TestState) => state.fetcher.userEmail);\n    const userPosition = useSelector((state: TestState) => state.fetcher.userPosition);\n    const userDepartment = useSelector((state: TestState) => state.fetcher.userDepartment);\n\n    const userMotiv = useSelector((state: TestState) => state.fetcher.userMotiv);\n    const userHardWork = useSelector((state: TestState) => state.fetcher.userHardWork);\n    const userKeyWord = useSelector((state: TestState) => state.fetcher.userKeyWord);\n    const userMostDeeplyWork = useSelector((state: TestState) => state.fetcher.userMostDeeplyWork);\n\n    const userWhyDesign = useSelector((state: TestState) => state.fetcher.userWhyDesign);\n    const userToolExperience = useSelector((state: TestState) => state.fetcher.userToolExperience);\n    const userTeamworkExperience = useSelector((state: TestState) => state.fetcher.userTeamworkExperience);\n    const userDesignGrowth = useSelector((state: TestState) => state.fetcher.userDesignGrowth);\n    const userPortfolioLink = useSelector((state: TestState) => state.fetcher.userPortfolioLinkDesign);\n\n\n    useEffect(() => {\n        if (!userName && !userID && !userPhone && !userEmail && !userPosition) {\n            alert('잘못된 접근입니다!');\n            navigate('/')\n        }\n\n        // 이전 값들을 저장하기 위해서 Redux 사용\n        if (userWhyDesign) {\n            setWhyDesign(userWhyDesign);\n        }\n\n        if (userToolExperience) {\n            setToolExperience(userToolExperience);\n        }\n\n        if (userTeamworkExperience) {\n            setTeamworkExperience(userTeamworkExperience);\n        }\n\n        if (userDesignGrowth) {\n            setDesignGrowth(userDesignGrowth);\n        }\n\n        if (userPortfolioLink) {\n            setPortfolioLink(userPortfolioLink)\n        }\n\n    }, [])\n\n    useMemo(() => {\n        if (whyDesign && toolExperience && teamworkExperience && designGrowth) {\n            setButtonState(false)\n        } else {\n            setButtonState(true)\n        }\n        if (submitCount >= 1) {\n            setButtonState(true);\n        }\n    }, [whyDesign, toolExperience, teamworkExperience, designGrowth, submitCount])\n\n\n    const Back = () => {\n        setSubmitCount((prev) => (prev + 1))\n        dispatch(saveDesign({ userWhyDesign: whyDesign, userToolExperience: toolExperience, userTeamworkExperience: teamworkExperience, userDesignGrowth: designGrowth, userPortfolioLinkDesign: portfolioLink }));\n        navigate('/common');\n    }\n\n    const TempSave = () => {\n        setSubmitCount((prev) => (prev + 1))\n        axios.post('/designApplication', JSON.stringify({\n            department: userDepartment,\n            whyDesign: whyDesign,\n            email: userEmail,\n            hardWork: userHardWork,\n            toolExperience: toolExperience,\n            keyWord: userKeyWord,\n            mostDeeplyWork: userMostDeeplyWork,\n            motive: userMotiv,\n            name: userName,\n            passOrNot: true,\n            phoneNumber: userPhone,\n            portfolioFile: \"\",\n            portfolioLink: portfolioLink,\n            sid: userID,\n            teamworkExperience: teamworkExperience,\n            designGrowth: designGrowth\n        }),\n            {\n                headers: {\n                    \"Content-type\": \"application/json\",\n                }\n            }\n        )\n            .then((res) => {\n                console.log(res);\n                dispatch(saveDesign({\n                    userWhyDesign: '',\n                    userToolExperience: '',\n                    userTeamworkExperience: '',\n                    userPortfolioLinkDesign: '',\n                    userDesignGrowth: '',\n                }));\n                dispatch(saveCommon({\n                    userMotiv: '',\n                    userHardWork: '',\n                    userKeyWord: '',\n                    userMostDeeplyWork: '',\n                }))\n                dispatch(saveIndex({\n                    userName: '',\n                    userID: '',\n                    userDepartment: '',\n                    userEmail: '',\n                    userPhone: '',\n                    userPosition: '',\n                }))\n                navigate('/');\n            })\n    }\n\n    const Submit = () => {\n        setSubmitCount((prev) => (prev + 1))\n        axios.post('/designApplication', JSON.stringify({\n            department: userDepartment,\n            whyDesign: whyDesign,\n            email: userEmail,\n            hardWork: userHardWork,\n            toolExperience: toolExperience,\n            keyWord: userKeyWord,\n            mostDeeplyWork: userMostDeeplyWork,\n            motive: userMotiv,\n            name: userName,\n            passOrNot: true,\n            phoneNumber: userPhone,\n            portfolioFile: \"\",\n            portfolioLink: portfolioLink,\n            sid: userID,\n            teamworkExperience: teamworkExperience,\n            designGrowth: designGrowth\n        }),\n            {\n                headers: {\n                    \"Content-type\": \"application/json\",\n                }\n            }\n        )\n            .then((res) => {\n                console.log(res);\n                dispatch(saveDesign({\n                    userWhyDesign: '',\n                    userToolExperience: '',\n                    userTeamworkExperience: '',\n                    userPortfolioLinkDesign: '',\n                    userDesignGrowth: '',\n                }));\n                dispatch(saveCommon({\n                    userMotiv: '',\n                    userHardWork: '',\n                    userKeyWord: '',\n                    userMostDeeplyWork: '',\n                }))\n                dispatch(saveIndex({\n                    userName: '',\n                    userID: '',\n                    userDepartment: '',\n                    userEmail: '',\n                    userPhone: '',\n                    userPosition: '',\n                }))\n                navigate('/');\n            })\n    }\n\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement> | ChangeEvent<HTMLInputElement>) => {\n        if (event.target.name === \"동기\") {\n            setWhyDesign(event.target.value);\n        }\n\n        if (event.target.name === \"경험\") {\n            setToolExperience(event.target.value);\n        }\n\n        if (event.target.name === \"팀워크\") {\n            setTeamworkExperience(event.target.value);\n        }\n\n        if (event.target.name === \"성장\") {\n            setDesignGrowth(event.target.value);\n        }\n\n        if (event.target.name === \"포트폴리오\") {\n            setPortfolioLink(event.target.value);\n        }\n    }\n\n    return (\n        <Section>\n            <Banner />\n            <Article>\n                <InputTitle>디자인 트랙을 선택하게 된 이유를 구체적으로 서술해주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"동기\" onChange={handleChange} value={whyDesign} />\n                <WordLength>{whyDesign.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>피그마나 Adobe XD와 같은 목업 툴에 관련된 경험을 해본 적이 있다면 그 경험에 대해 자세히 설명을 해주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"경험\" onChange={handleChange} value={toolExperience} />\n                <WordLength>{toolExperience.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>본인이 협업과 팀워크를 진행해 보았던 경험과, 그 경험을 멋쟁이 사자처럼 대학에서 어떻게 적용시킬 수 있는지 알려주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"팀워크\" onChange={handleChange} value={teamworkExperience} />\n                <WordLength>{teamworkExperience.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>디자인 트랙을 통해 어떠한 성장을 희망하시는지 구체적으로 서술해주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"성장\" onChange={handleChange} value={designGrowth} />\n                <WordLength>{designGrowth.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>포트폴리오 링크가 있다면 첨부해주세요 </InputTitle>\n                <InputBox type=\"text\" placeholder=\"포트폴리오 링크를 입력해주세요\" maxLength={200} name=\"포트폴리오\" onChange={handleChange} value={portfolioLink} />\n            </Article>\n            <ButtonBox>\n                <Button name=\"임시저장\" onClick={TempSave} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `임시저장`}</Button>\n                <Button name=\"제출하기\" onClick={Back}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `뒤로가기`}</Button>\n                <Button name=\"제출하기\" onClick={Submit} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `제출하기`}</Button>\n            </ButtonBox>\n        </Section>\n    )\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Backend.tsx",["99","100"],[],"import React, { ChangeEvent } from 'react'\nimport { ButtonBox, Section, Button, Require, Article, InputTitle, TextAreaBox, InputBox, Banner, WordLength } from '../emotion/component'\nimport { useNavigate } from 'react-router-dom'\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, TestState } from '../../app/store';\nimport { saveCommon, saveIndex, view, saveBackEnd } from '../../features/fetcherSlice';\nimport { useEffect, useMemo } from 'react';\nimport axios from 'axios';\n\nexport default function Backend() {\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch<AppDispatch>();\n    const [difficultAndOvercoming, setDifficultAndOvercoming] = useState('');\n    const [studyFramework, setStudyFramework] = useState('');\n    const [importantGroup, setImportantGroup] = useState('');\n    const [portfolioLink, setPortfolioLink] = useState('');\n    const [buttonState, setButtonState] = useState(false);\n    const [submitCount, setSubmitCount] = useState<number>(0);\n\n\n    const userName = useSelector((state: TestState) => state.fetcher.userName);\n    const userID = useSelector((state: TestState) => state.fetcher.userID);\n    const userPhone = useSelector((state: TestState) => state.fetcher.userPhone);\n    const userEmail = useSelector((state: TestState) => state.fetcher.userEmail);\n    const userPosition = useSelector((state: TestState) => state.fetcher.userPosition);\n    const userDepartment = useSelector((state: TestState) => state.fetcher.userDepartment);\n\n    const userMotiv = useSelector((state: TestState) => state.fetcher.userMotiv);\n    const userHardWork = useSelector((state: TestState) => state.fetcher.userHardWork);\n    const userKeyWord = useSelector((state: TestState) => state.fetcher.userKeyWord);\n    const userMostDeeplyWork = useSelector((state: TestState) => state.fetcher.userMostDeeplyWork);\n\n    const userDifficultAndOvercoming = useSelector((state: TestState) => state.fetcher.userDifficultAndOvercoming);\n    const userStudyFramework = useSelector((state: TestState) => state.fetcher.userStudyFramework);\n    const userImportantGroup = useSelector((state: TestState) => state.fetcher.userImportantGroup);\n    const userPortfolioLink = useSelector((state: TestState) => state.fetcher.userPortfolioLinkBack);\n\n    useEffect(() => {\n        if (!userName && !userID && !userPhone && !userEmail && !userPosition) {\n            alert('잘못된 접근입니다!');\n            navigate('/')\n        }\n\n        // 이전 값들을 저장하기 위해서 Redux 사용\n        if (userDifficultAndOvercoming) {\n            setDifficultAndOvercoming(userDifficultAndOvercoming);\n        }\n\n        if (userStudyFramework) {\n            setStudyFramework(userStudyFramework);\n        }\n\n        if (userImportantGroup) {\n            setImportantGroup(userImportantGroup);\n        }\n\n        if (userPortfolioLink) {\n            setPortfolioLink(userPortfolioLink)\n        }\n    }, [])\n\n    useMemo(() => {\n        if (difficultAndOvercoming && studyFramework && importantGroup) {\n            setButtonState(false)\n        } else {\n            setButtonState(true)\n        }\n        if (submitCount >= 1) {\n            setButtonState(true);\n        }\n    }, [difficultAndOvercoming, studyFramework, importantGroup, submitCount])\n\n\n    const Back = () => {\n        setSubmitCount((prev) => (prev + 1))\n        dispatch(saveBackEnd({ userDifficultAndOvercoming: difficultAndOvercoming, userStudyFramework: studyFramework, userImportantGroup: importantGroup, userPortfolioLinkBack: portfolioLink }));\n        navigate('/common');\n    }\n\n    const TempSave = () => {\n        setSubmitCount((prev) => (prev + 1))\n        axios.post('/backendApplication', JSON.stringify({\n            department: userDepartment,\n            difficultAndOvercoming: difficultAndOvercoming,\n            email: userEmail,\n            hardWork: userHardWork,\n            importantGroup: importantGroup,\n            keyWord: userKeyWord,\n            mostDeeplyWork: userMostDeeplyWork,\n            motive: userMotiv,\n            name: userName,\n            passOrNot: true,\n            phoneNumber: userPhone,\n            portfolioFile: \"\",\n            portfolioLink: portfolioLink,\n            sid: userID,\n            studyFramework: studyFramework,\n        }),\n            {\n                headers: {\n                    \"Content-type\": \"application/json\",\n                }\n            }\n        )\n            .then((res) => {\n                console.log(res);\n                dispatch(saveBackEnd({\n                    userDifficultAndOvercoming: '',\n                    userImportantGroup: '',\n                    userPortfolioLink: '',\n                    userStudyFramework: '',\n                }));\n                dispatch(saveCommon({\n                    userMotiv: '',\n                    userHardWork: '',\n                    userKeyWord: '',\n                    userMostDeeplyWork: '',\n                }))\n                dispatch(saveIndex({\n                    userName: '',\n                    userID: '',\n                    userDepartment: '',\n                    userEmail: '',\n                    userPhone: '',\n                    userPosition: '',\n                }))\n                navigate('/');\n            })\n    }\n\n    const Submit = () => {\n        setSubmitCount((prev) => (prev + 1))\n        axios.post('/backendApplication', JSON.stringify({\n            department: userDepartment,\n            difficultAndOvercoming: difficultAndOvercoming,\n            email: userEmail,\n            hardWork: userHardWork,\n            importantGroup: importantGroup,\n            keyWord: userKeyWord,\n            mostDeeplyWork: userMostDeeplyWork,\n            motive: userMotiv,\n            name: userName,\n            passOrNot: true,\n            phoneNumber: userPhone,\n            portfolioFile: \"\",\n            portfolioLink: portfolioLink,\n            sid: userID,\n            studyFramework: studyFramework,\n        }),\n            {\n                headers: {\n                    \"Content-type\": \"application/json\",\n                }\n            }\n        )\n            .then((res) => {\n                console.log(res);\n                dispatch(saveBackEnd({\n                    userDifficultAndOvercoming: '',\n                    userImportantGroup: '',\n                    userPortfolioLink: '',\n                    userStudyFramework: '',\n                }));\n                dispatch(saveCommon({\n                    userMotiv: '',\n                    userHardWork: '',\n                    userKeyWord: '',\n                    userMostDeeplyWork: '',\n                }))\n                dispatch(saveIndex({\n                    userName: '',\n                    userID: '',\n                    userDepartment: '',\n                    userEmail: '',\n                    userPhone: '',\n                    userPosition: '',\n                }))\n                navigate('/');\n            })\n    }\n\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement> | ChangeEvent<HTMLInputElement>) => {\n        if (event.target.name === \"극복\") {\n            setDifficultAndOvercoming(event.target.value);\n        }\n\n        if (event.target.name === \"경험\") {\n            setStudyFramework(event.target.value);\n        }\n\n        if (event.target.name === \"팀워크\") {\n            setImportantGroup(event.target.value);\n        }\n\n        if (event.target.name === \"포트폴리오\") {\n            setPortfolioLink(event.target.value);\n        }\n    }\n\n    return (\n        <Section>\n            <Banner />\n            <Article>\n                <InputTitle>개발 관련 공부를 하며 개인적으로 힘들었던 경험과 그걸 극복했던 자신만의 방법이 있나요?<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"극복\" onChange={handleChange} value={difficultAndOvercoming} />\n                <WordLength>{difficultAndOvercoming.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>웹 백앤드 프레임워크를 공부해보신적 있으신가요? 있으시다면 어디까지 공부해보셨나요?<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"경험\" onChange={handleChange} value={studyFramework} />\n                <WordLength>{studyFramework.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>단체생활에서 가장 중요하다고 생각하는 것은 무엇인가요?<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"팀워크\" onChange={handleChange} value={importantGroup} />\n                <WordLength>{importantGroup.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>포트폴리오 링크가 있다면 첨부해주세요 </InputTitle>\n                <InputBox type=\"text\" placeholder=\"포트폴리오 링크를 입력해주세요\" maxLength={200} name=\"포트폴리오\" onChange={handleChange} value={portfolioLink} />\n            </Article>\n            <ButtonBox>\n                <Button name=\"임시저장\" onClick={TempSave}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `임시저장`}</Button>\n                <Button name=\"제출하기\" onClick={Back} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `뒤로가기`}</Button>\n                <Button name=\"제출하기\" onClick={Submit} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `제출하기`}</Button>\n            </ButtonBox>\n        </Section>\n    )\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\emotion\\component.tsx",["101","102","103","104","105","106"],[],"/** @jsxImportSource @emotion/react */\nimport React, { ChangeEvent, useState } from 'react'\nimport banner from '../../images/banner.png';\nimport loading from '../../images/loading.gif';\nimport axios from 'axios';\nimport checkBox from '../images/checkBox.svg';\nimport checkedBox from '../images/checkedBox.svg';\nimport { useMemo } from 'react';\nimport { css, keyframes } from \"@emotion/react\";\nimport { fadeLeft, fadeUp } from \"../../styles/Keyframes\";\nimport { WrapperProps } from \"../../App\"\nimport human from '../../images/human.png';\n\n\nexport const TextAreaBox = (props: TextAreaType) => {\n    return (\n        <textarea css={css`\n        font-family: 'Pretendard-Medium';\n        letter-spacing: -0.03em;\n        line-height: 1.5em;\n        padding: 0;\n        padding-left: 1em;\n        padding-bottom: 1em;\n        padding-right: 1em;\n        padding-top: 1em;\n        width: 62.5em;\n        height: 15em;\n        border: solid;\n        border-radius: 15px;\n        border-color: #707070;\n        border-width: 1px;\n        font-size: 16px;\n        box-sizing: border-box;\n        resize: none;\n\n        &:focus {\n            outline-color: #ff7828;\n        }\n\n        &::placeholder {\n            font-family: 'Pretendard-Regular';\n            margin-left: 0.4em;\n        }\n        `} maxLength={1000} {...props} />\n    )\n}\n\nexport const UploadButton = () => {\n    return (\n        <div css={css`\n            position: absolute;\n            font-family: 'Pretendard-Bold';\n            letter-spacing: -0.03em;\n            font-size: 15px;\n            border: none;\n            border-radius: 7px;\n            width: 5.8em;\n            height: 2em;       \n            background-color: #ff7828;     \n            margin-left: 59em;\n\n            display: flex;\n            align-items: center;\n            justify-content: center;\n\n            cursor: pointer;\n            transition: 0.5s all;\n\n            &:hover {\n                opacity: 80%;\n            }\n        `}>\n            <span css={css`\n                color: white;\n            `}>업로드</span>\n        </div>\n    )\n}\n\nexport const InputBox = (props: InputType) => {\n    return (\n        <input css={css`\n        font-family: 'Pretendard-Medium';\n        letter-spacing: -0.03em;\n        padding: 0;\n        padding-left: 1em;\n        width: 62.5em;\n        height: 3.7em;\n        border: solid;\n        border-radius: 15px;\n        border-color: #707070;\n        border-width: 1px;\n        font-size: 16px;\n        box-sizing: border-box;\n\n        &::-webkit-outer-spin-button,\n        &::-webkit-inner-spin-button {\n            -webkit-appearance: none;\n            margin: 0;\n        }\n\n        &:focus {\n            outline-color: #ff7828;\n        }\n\n        &::placeholder {\n            font-family: 'Pretendard-Regular';\n            margin-left: 0.4em;\n        }\n        `} maxLength={30} {...props} />\n    )\n}\n\nexport interface PositionType {\n    name: string;\n    onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    children: React.ReactNode;\n    state: string;\n}\n\nexport const Position = (props: PositionType) => {\n    return (\n        <button css={css`\n            font-family: 'Pretendard-Medium';\n            letter-spacing: -0.03em;\n            font-size: 16px;\n            height: 3.7em;\n            border-radius: 50px;\n            border: solid;\n            border-width: 1px;\n            border-color: #707070;\n            transition: 0.5s all;\n            cursor: pointer;\n\n            ${props.name === props.state ? css`\n            color: white;\n            background-color: #ff7828;\n            border: none;\n            ` : css`\n            background-color: white;\n            color: #707070;\n\n            &:hover {\n                border-color: #ff7828;\n                color:  #ff7828;\n            }\n            &:focus {\n                outline: none;\n                border-color: #ff7828;\n                color:  #ff7828;\n            }\n            `}\n        `}{...props}>{props.children}</button>\n    )\n}\n\nexport const ModalFrame = ({ children }: WrapperProps) => {\n    return (\n        <div css={css`\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0, 0, 0, 0.4);\n        z-index: 999;\n        cursor: pointer;\n        display: block;\n        `}>\n            {children}\n        </div>\n    )\n}\n\nexport const Modal = ({ children }: WrapperProps) => {\n    return (\n        <ModalFrame>\n            <div css={css`\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n            `}>\n                <div css={css`\n                    font-family: 'Pretendard-Bold';\n                    letter-spacing: -0.03em;\n                    border-radius: 20px;\n                    background-color: white;\n                    display: fixed;\n                    font-size: 18px;\n                    width: 40em;\n                    height: 30em;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    animation: ${fadeUp} 1s ease-in-out;\n                `}>\n                    <div css={css`\n                        display: flex;\n                        flex-direction: column;\n                        align-items: center;\n                        animation: ${fadeUp} 1.3s ease-in-out;\n                    `}>\n                        <img alt=\"사람\" src={human} css={css`\n                            width: 10em;\n                            margin-bottom: 2em;\n                            animation: ${fadeUp} 1.5s ease-in-out;\n                        `} />\n                        <span css={css`\n                            animation: ${fadeUp} 1.5s ease-in-out;\n                        `}>앗, 임시저장된 지원서가 발견되었어요 다시 작성할까요?</span>\n                        <ButtonBox>\n                            {children}\n                        </ButtonBox>\n                    </div>\n                </div>\n            </div>\n        </ModalFrame>\n    )\n}\n\nexport const Precautions = () => {\n    return (\n        <div css={css`\n            font-family: 'Pretendard-Medium';\n            letter-spacing: -0.03em;\n            display: flex;\n            flex-direction: column;\n            text-align: left;\n            font-size: 16px;\n            width: 62.5em;\n        `}>\n            <InputTitle>주의사항 <Require /> </InputTitle>\n            <div css={css`\n                display: flex;\n                flex-direction: column;\n                row-gap: 0.5em;\n            `}>\n                <span>· 지원서 최종 제출 후에도 지원서의 수정은 가능합니다.</span>\n                <span>· 지원서의 정보 저장을 위해 제출 전 임시저장을 통해 데이터를 저장해주시기 바랍니다.</span>\n                <span>· 지원서 접수 마감일에는 지원자가 몰려 지원이 어려울 수 있으니, 여유있게 미리 제출해주시기바랍니다.</span>\n                <span>· 지원서의 내용이 사실과 다를 경우, 합격이 취소되거나 전형 상의 불이익을 받을 수 있습니다.</span>\n                <span>· 지원서는 문항별 최대 1000자의 제한을 두고 있으나, 문항을 다 채우실 필요는 없습니다.</span>\n                <span>· 문의사항은 <strong>kangnam@likelion.org</strong> 으로 문의해주시면 최대한 빠르게 도와드리겠습니다.</span>\n            </div>\n        </div >\n    )\n}\n\nexport const PositionBox = ({ children }: WrapperProps) => {\n    return (\n        <div css={css`\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            column-gap: 1em;\n            font-size: 16px;\n            width: 62.5em;\n        `}>\n            {children}\n        </div>\n    )\n}\n\n// 로딩중을 표시하는 컴포넌트\nexport const Loading = () => {\n    return (\n        <img alt=\"로딩 이미지\" src={loading} css={css`\n            width: 12em;\n        `} />\n    )\n}\n\nexport const WordLength = ({ children }: WrapperProps) => {\n    return (\n        <div css={css`\n            width: 10em;\n            position: absolute;\n            text-align:center;\n            font-family: 'Pretendard-Medium';\n            letter-spacing: -0.03em;\n            font-size: 15px;\n            color: #ff7828;\n            margin-top: 16em;\n            margin-left: 57em;\n\n            display:flex;\n            justify-content: center;\n            align-items: center;\n        `}>\n            <div css={css`\n                width: 2.5em;\n                border-box: box-sizing;\n            `}>\n                {children}\n            </div>\n            <span css={css`\n                margin-right: 0.5em;\n            `}>/</span>\n            <span css={css`\n            `}>1000</span>\n        </div>\n    )\n}\n\nexport const Require = () => {\n    return (\n        <span css={css`\n            margin-left: 0.4em;\n            font-family: 'Pretendard-Medium';\n            letter-spacing: -0.02em;\n            font-size: 15px;\n            color: #ff0000;\n        `}>* </span>\n    )\n}\n\nexport interface AgreeType {\n    src: string;\n    text: string;\n    onClick?: (event: React.MouseEvent<HTMLImageElement>) => void;\n    name: string;\n}\n\nexport const ArgreeBox = ({ children }: WrapperProps) => {\n    return (\n        <div css={css`\n            display: flex;\n            flex-direction: column;\n            margin-top: 1.3em;\n            row-gap: 0.6em;\n        `}>\n            {children}\n        </div>\n    )\n}\n\nexport const Argree = ((props: AgreeType) => {\n    return (\n        <div css={css`\n            display: flex;\n            flex-direction: column;\n            width: 62.5em;\n        `}>\n            <div css={css`\n                display: flex;\n                align-items: center;\n            `}>\n                <img alt={props.name} onClick={props.onClick} src={props.src} css={css`\n                    width: 1.2em;\n                    cursor: pointer;\n                `} />\n                <span css={css`\n                    font-size: 16px;\n                    font-family: 'Pretendard-Medium';\n                    letter-spacing: -0.03em;\n                    margin-left: 0.4em;\n                `}>{props.text}<Require /></span>\n            </div>\n        </div>\n    )\n})\n\nexport const Banner = () => {\n    return (\n        <img alt=\"배너 이미지\" src={banner} css={css`\n            margin-top: 40px;\n            max-width: 1000px;\n            border-radius: 12px;\n            margin-bottom: 1em;\n            animation: ${fadeLeft} 1.8s ease-in-out;\n        `} />\n    )\n}\n\nexport const Section = ({ children }: WrapperProps) => {\n    return (\n        <section css={css`\n            position: absolute;\n            left: 50%;\n            transform: translate(-50%);\n            max-width: 75em;\n            width: 100%;\n            background-color: white;\n\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding-bottom: 5em;\n            row-gap: 1.2em;\n        `}>\n            {children}\n        </section>\n    )\n}\n\nexport const InputTitle = ({ children }: WrapperProps) => {\n    return (\n        <p css={css`\n            font-family: 'Pretendard-Bold';\n            letter-spacing: -0.03em;\n            font-size: 16px;\n\n            display: flex;\n            align-items: center;\n        `}>\n            {children}\n        </p>\n    )\n}\n\nexport const Article = ({ children }: WrapperProps) => {\n    return (\n        <article css={css`\n            display: flex;\n            flex-direction: column;\n            text-align: left;\n            justify-content: center;\n            animation: ${fadeUp} 2s ease-in-out;\n        `}>\n            {children}\n        </article>\n    )\n}\n\nexport interface ButtonType {\n    name: string;\n    children: React.ReactNode;\n    disabled?: boolean;\n    onClick?: () => void;\n}\n\nexport const Button = (props: ButtonType) => {\n    return (\n        <button css={css`\n            font-family: 'Pretendard-Bold';\n            letter-spacing: -0.03em;\n            font-size: 16px;\n            width: 15em;\n            height: 3.5em;\n            border: none;\n            border-radius: 7px;\n            color: white;\n            transition: 0.5s all;\n            ${props.name === \"임시저장\" && `background-color : #262626;`}\n            ${props.name === \"제출하기\" && `background-color : #ff7828;`}\n            ${props.disabled ?\n                css`\n                    cursor: auto;\n                    filter: grayscale(100%);\n                ` :\n                css`\n                    cursor: pointer;\n                    &:hover {\n                        opacity: 80%;\n                    }\n                    `\n            }\n        `} {...props}>\n            {props.children}\n        </button>\n    )\n}\n\nexport const ButtonBox = ({ children }: WrapperProps) => {\n    return (\n        <div css={css`\n            display: flex;\n            column-gap: 1em;\n            margin-top: 3em;\n            animation: ${fadeUp} 2s ease-in-out;\n        `}>\n            {children}\n        </div>\n    )\n}\n\nexport interface InputType {\n    type?: string;\n    placeholder?: string;\n    value?: string | number;\n    disabled?: boolean;\n    maxLength?: number;\n    name?: string;\n    onChange?: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport interface TextAreaType {\n    type?: string;\n    placeholder?: string;\n    value?: string;\n    disabled?: boolean;\n    maxLength?: number;\n    name?: string;\n    onChange?: (event: ChangeEvent<HTMLTextAreaElement>) => void;\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\styles\\Keyframes.ts",["107","108"],[],"import React from 'react'\nimport { css, keyframes } from \"@emotion/react\";\n\nexport const fadeUp = keyframes`\n    0% {\n        transform : translateY(30px);\n        opacity: 0;\n    }\n    50% {\n        opacity: 0.3;\n    }\n    70% {\n        opacity: 0.5;\n    }\n    100% {\n        opacity: 1;\n        transform : none;\n`;\n\nexport const fadeLeft = keyframes`\n0% {\n    transform : translateX(30px);\n    opacity: 0;\n}\n50% {\n    opacity: 0.3;\n}\n70% {\n    opacity: 0.5;\n}\n100% {\n    opacity: 1;\n    transform : none;\n`;\n",{"ruleId":"109","severity":1,"message":"110","line":2,"column":8,"nodeType":"111","messageId":"112","endLine":2,"endColumn":12},{"ruleId":"109","severity":1,"message":"113","line":2,"column":17,"nodeType":"111","messageId":"112","endLine":2,"endColumn":28},{"ruleId":"109","severity":1,"message":"114","line":7,"column":10,"nodeType":"111","messageId":"112","endLine":7,"endColumn":13},{"ruleId":"109","severity":1,"message":"115","line":7,"column":15,"nodeType":"111","messageId":"112","endLine":7,"endColumn":24},{"ruleId":"109","severity":1,"message":"116","line":8,"column":10,"nodeType":"111","messageId":"112","endLine":8,"endColumn":18},{"ruleId":"109","severity":1,"message":"117","line":8,"column":20,"nodeType":"111","messageId":"112","endLine":8,"endColumn":26},{"ruleId":"109","severity":1,"message":"118","line":13,"column":10,"nodeType":"111","messageId":"112","endLine":13,"endColumn":14},{"ruleId":"119","severity":1,"message":"120","line":50,"column":8,"nodeType":"121","endLine":50,"endColumn":10,"suggestions":"122"},{"ruleId":"109","severity":1,"message":"123","line":72,"column":11,"nodeType":"111","messageId":"112","endLine":72,"endColumn":21},{"ruleId":"109","severity":1,"message":"124","line":2,"column":81,"nodeType":"111","messageId":"112","endLine":2,"endColumn":89},{"ruleId":"109","severity":1,"message":"118","line":7,"column":33,"nodeType":"111","messageId":"112","endLine":7,"endColumn":37},{"ruleId":"119","severity":1,"message":"125","line":71,"column":8,"nodeType":"121","endLine":71,"endColumn":10,"suggestions":"126"},{"ruleId":"109","severity":1,"message":"127","line":1,"column":10,"nodeType":"111","messageId":"112","endLine":1,"endColumn":26},{"ruleId":"109","severity":1,"message":"128","line":1,"column":41,"nodeType":"111","messageId":"112","endLine":1,"endColumn":52},{"ruleId":"109","severity":1,"message":"118","line":7,"column":33,"nodeType":"111","messageId":"112","endLine":7,"endColumn":37},{"ruleId":"119","severity":1,"message":"129","line":66,"column":8,"nodeType":"121","endLine":66,"endColumn":10,"suggestions":"130"},{"ruleId":"109","severity":1,"message":"118","line":7,"column":33,"nodeType":"111","messageId":"112","endLine":7,"endColumn":37},{"ruleId":"119","severity":1,"message":"131","line":70,"column":8,"nodeType":"121","endLine":70,"endColumn":10,"suggestions":"132"},{"ruleId":"109","severity":1,"message":"118","line":7,"column":33,"nodeType":"111","messageId":"112","endLine":7,"endColumn":37},{"ruleId":"119","severity":1,"message":"133","line":62,"column":8,"nodeType":"121","endLine":62,"endColumn":10,"suggestions":"134"},{"ruleId":"109","severity":1,"message":"135","line":2,"column":30,"nodeType":"111","messageId":"112","endLine":2,"endColumn":38},{"ruleId":"109","severity":1,"message":"136","line":5,"column":8,"nodeType":"111","messageId":"112","endLine":5,"endColumn":13},{"ruleId":"109","severity":1,"message":"137","line":6,"column":8,"nodeType":"111","messageId":"112","endLine":6,"endColumn":16},{"ruleId":"109","severity":1,"message":"138","line":7,"column":8,"nodeType":"111","messageId":"112","endLine":7,"endColumn":18},{"ruleId":"109","severity":1,"message":"139","line":8,"column":10,"nodeType":"111","messageId":"112","endLine":8,"endColumn":17},{"ruleId":"109","severity":1,"message":"115","line":9,"column":15,"nodeType":"111","messageId":"112","endLine":9,"endColumn":24},{"ruleId":"109","severity":1,"message":"140","line":1,"column":8,"nodeType":"111","messageId":"112","endLine":1,"endColumn":13},{"ruleId":"109","severity":1,"message":"114","line":2,"column":10,"nodeType":"111","messageId":"112","endLine":2,"endColumn":13},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ChangeEvent' is defined but never used.","'css' is defined but never used.","'keyframes' is defined but never used.","'fadeLeft' is defined but never used.","'fadeUp' is defined but never used.","'view' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'userDepartment', 'userEmail', 'userID', 'userName', 'userPhone', and 'userPosition'. Either include them or remove the dependency array.","ArrayExpression",["141"],"'handleTemp' is assigned a value but never used.","'InputBox' is defined but never used.","React Hook useEffect has missing dependencies: 'navigate', 'userEmail', 'userHardWork', 'userID', 'userKeyWord', 'userMostDeeplyWork', 'userMotiv', 'userName', 'userPhone', and 'userPosition'. Either include them or remove the dependency array.",["142"],"'createAsyncThunk' is defined but never used.","'isFulfilled' is defined but never used.","React Hook useEffect has missing dependencies: 'navigate', 'userAchieve', 'userEmail', 'userID', 'userName', 'userPhone', 'userPortfolioLink', 'userPosition', 'userTeamProject', 'userUsingStack', and 'userWhyFrontend'. Either include them or remove the dependency array.",["143"],"React Hook useEffect has missing dependencies: 'navigate', 'userDesignGrowth', 'userEmail', 'userID', 'userName', 'userPhone', 'userPortfolioLink', 'userPosition', 'userTeamworkExperience', 'userToolExperience', and 'userWhyDesign'. Either include them or remove the dependency array.",["144"],"React Hook useEffect has missing dependencies: 'navigate', 'userDifficultAndOvercoming', 'userEmail', 'userID', 'userImportantGroup', 'userName', 'userPhone', 'userPortfolioLink', 'userPosition', and 'userStudyFramework'. Either include them or remove the dependency array.",["145"],"'useState' is defined but never used.","'axios' is defined but never used.","'checkBox' is defined but never used.","'checkedBox' is defined but never used.","'useMemo' is defined but never used.","'React' is defined but never used.",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},"Update the dependencies array to be: [userDepartment, userEmail, userID, userName, userPhone, userPosition]",{"range":"156","text":"157"},"Update the dependencies array to be: [navigate, userEmail, userHardWork, userID, userKeyWord, userMostDeeplyWork, userMotiv, userName, userPhone, userPosition]",{"range":"158","text":"159"},"Update the dependencies array to be: [navigate, userAchieve, userEmail, userID, userName, userPhone, userPortfolioLink, userPosition, userTeamProject, userUsingStack, userWhyFrontend]",{"range":"160","text":"161"},"Update the dependencies array to be: [navigate, userDesignGrowth, userEmail, userID, userName, userPhone, userPortfolioLink, userPosition, userTeamworkExperience, userToolExperience, userWhyDesign]",{"range":"162","text":"163"},"Update the dependencies array to be: [navigate, userDifficultAndOvercoming, userEmail, userID, userImportantGroup, userName, userPhone, userPortfolioLink, userPosition, userStudyFramework]",{"range":"164","text":"165"},[2536,2538],"[userDepartment, userEmail, userID, userName, userPhone, userPosition]",[3835,3837],"[navigate, userEmail, userHardWork, userID, userKeyWord, userMostDeeplyWork, userMotiv, userName, userPhone, userPosition]",[3021,3023],"[navigate, userAchieve, userEmail, userID, userName, userPhone, userPortfolioLink, userPosition, userTeamProject, userUsingStack, userWhyFrontend]",[3124,3126],"[navigate, userDesignGrowth, userEmail, userID, userName, userPhone, userPortfolioLink, userPosition, userTeamworkExperience, userToolExperience, userWhyDesign]",[2941,2943],"[navigate, userDifficultAndOvercoming, userEmail, userID, userImportantGroup, userName, userPhone, userPortfolioLink, userPosition, userStudyFramework]"]