[{"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\index.tsx":"1","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\reportWebVitals.ts":"2","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\App.tsx":"3","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\app\\store.ts":"4","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\hooks\\ScrollToTop.ts":"5","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\Index.tsx":"6","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\Common.tsx":"7","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\features\\fetcherSlice.ts":"8","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\styles\\GlobalFont.tsx":"9","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Design.tsx":"10","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Frontend.tsx":"11","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Backend.tsx":"12","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\emotion\\component.tsx":"13","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\styles\\Keyframes.ts":"14","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\partition\\Fail.tsx":"15","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\Index.tsx":"16","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\partition\\Main.tsx":"17","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\partition\\Pass.tsx":"18","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\common\\Header.tsx":"19","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\detail\\Detail.tsx":"20","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\404\\Error.tsx":"21","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\class.ts":"22","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\emotion\\component.tsx":"23","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\detail\\emotion\\component.tsx":"24"},{"size":678,"mtime":1674997815432,"results":"25","hashOfConfig":"26"},{"size":425,"mtime":1674997815550,"results":"27","hashOfConfig":"26"},{"size":2059,"mtime":1674997815319,"results":"28","hashOfConfig":"26"},{"size":304,"mtime":1674997815629,"results":"29","hashOfConfig":"26"},{"size":315,"mtime":1674997816478,"results":"30","hashOfConfig":"26"},{"size":36761,"mtime":1674997815708,"results":"31","hashOfConfig":"26"},{"size":14917,"mtime":1674997815672,"results":"32","hashOfConfig":"26"},{"size":4465,"mtime":1674997816435,"results":"33","hashOfConfig":"26"},{"size":1050,"mtime":1674997817039,"results":"34","hashOfConfig":"26"},{"size":12498,"mtime":1674997816361,"results":"35","hashOfConfig":"26"},{"size":12514,"mtime":1674997816395,"results":"36","hashOfConfig":"26"},{"size":11698,"mtime":1674997816326,"results":"37","hashOfConfig":"26"},{"size":19870,"mtime":1674997816286,"results":"38","hashOfConfig":"26"},{"size":511,"mtime":1674997817076,"results":"39","hashOfConfig":"26"},{"size":7850,"mtime":1674997816103,"results":"40","hashOfConfig":"26"},{"size":2018,"mtime":1674997815830,"results":"41","hashOfConfig":"26"},{"size":6568,"mtime":1674997816141,"results":"42","hashOfConfig":"26"},{"size":7843,"mtime":1674997816175,"results":"43","hashOfConfig":"26"},{"size":1250,"mtime":1674997815873,"results":"44","hashOfConfig":"26"},{"size":17602,"mtime":1674997815931,"results":"45","hashOfConfig":"26"},{"size":1765,"mtime":1674997815788,"results":"46","hashOfConfig":"26"},{"size":915,"mtime":1674997815745,"results":"47","hashOfConfig":"26"},{"size":8417,"mtime":1674997816060,"results":"48","hashOfConfig":"26"},{"size":4441,"mtime":1674997816016,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kskrrf",{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":3,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\index.tsx",[],[],"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\reportWebVitals.ts",[],[],"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\App.tsx",["140","141","142","143","144","145"],[],"import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter, Routes, Route, useLocation } from 'react-router-dom';\nimport Index from './component/Index'\nimport GlobalStyles from './styles/GlobalFont';\nimport Common from './component/Common';\nimport Frontend from './component/position/Frontend';\nimport Design from './component/position/Design';\nimport Backend from './component/position/Backend';\nimport ScrollToTop from './hooks/ScrollToTop';\nimport Admin from './component/admin/Index';\nimport Main from './component/admin/partition/Main';\nimport Fail from './component/admin/partition/Fail';\nimport Pass from './component/admin/partition/Pass';\nimport Header from './component/admin/common/Header';\nimport Detail from './component/admin/detail/Detail';\nimport Error from './component/404/Error';\nimport { useSelector } from 'react-redux';\nimport { TestState } from './app/store';\n\nexport interface WrapperProps {\n  children?: React.ReactNode;\n  name?: string;\n  text?: string;\n  imgSrc?: string;\n  alt?: string;\n}\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <GlobalStyles />\n        <ScrollToTop />\n        <Routes>\n          <Route path='/' element={<Index />} />\n          <Route path='/common' element={<Common />} />\n          <Route path='/frontend' element={<Frontend />} />\n          <Route path='/backend' element={<Backend />} />\n          <Route path='/design' element={<Design />} />\n          <Route path='/admin' element={<Admin />} />\n          <Route path='/*' element={<Error />} />\n          <Route path='/404' element={<Error />} />\n\n          <Route element={<Header />}>\n            <Route path='/admin/main' element={<Main />} />\n            <Route path='/admin/pass' element={<Pass />} />\n            <Route path='/admin/fail' element={<Fail />} />\n            <Route path='/admin/detail/:position' element={<Detail />} />\n          </Route>\n        </Routes>\n      </BrowserRouter >\n    </div >\n\n  );\n}\n\nexport default App;\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\app\\store.ts",[],[],"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\hooks\\ScrollToTop.ts",[],[],"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\Index.tsx",["146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169"],[],"/** @jsxImportSource @emotion/react */\nimport React, { ChangeEvent, useState } from 'react'\nimport axios from 'axios';\nimport checkBox from '../images/checkBox.svg';\nimport checkedBox from '../images/checkedBox.svg';\nimport { useMemo } from 'react';\nimport { css, keyframes } from \"@emotion/react\";\nimport { fadeLeft, fadeUp } from '../styles/Keyframes';\nimport { Section, Banner, Article, InputTitle, InputBox, PositionBox, Position, Require, Precautions, ArgreeBox, Argree, ButtonBox, Button, Modal, ModalInput, Quit, EndTime, CollectDescription, ErrorDescription, SearchDepartment } from './emotion/component';\nimport { useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, TestState } from '../app/store';\nimport { view, saveIndex, saveBackEnd, saveCommon, saveFrontEnd, saveDesign } from '../features/fetcherSlice';\nimport { useEffect } from 'react';\nimport human from '../images/human.png';\nimport isTemp from '../images/isTemp.png';\nimport { classList } from './class';\n\nexport default function Index() {\n    const [name, setName] = useState<string>('');\n    const [id, setID] = useState<string>('');\n    const [email, setEmail] = useState<string>('');\n    const [phone, setPhone] = useState<number | string>('');\n    const [department, setDepartment] = useState<string>('');\n    const [temp, setTemp] = useState<boolean>(false);\n    const [submit, setSubmit] = useState<boolean>(false);\n    const [load, setLoad] = useState<boolean>(false);\n    const [tempId, setTempId] = useState<string>('');\n    const [tempEmail, setTempEmail] = useState<string>('');\n\n    const [position, setPosition] = useState<string>('');\n    const [tempPosition, setTempPosition] = useState<string>('');\n    const [precautions, setPrecautions] = useState<boolean>(false);\n    const [privacy, setPrivacy] = useState<boolean>(false);\n    const [buttonState, setButtonState] = useState<boolean>(false);\n    const [tempButtonState, setTempButtonState] = useState<boolean>(false);\n    const [submitCount, setSubmitCount] = useState<number>(0);\n    const [tempCount, setTempCount] = useState<number>(0);\n    const [isTempState, setIsTempState] = useState<boolean>(false);\n    const [isNotTempState, setIsNotTempState] = useState<boolean>(false);\n    const [openSearch, setOpenSearch] = useState<boolean>(false);\n    const [itIsTemp, setItIsTemp] = useState<boolean>(false);\n\n    const [userNameCheck, setUserNameCheck] = useState<boolean | null>(null);\n    const [userIDCheck, setUserIDCheck] = useState<boolean | null>(null);\n    const [userEmailCheck, setUserEmailCheck] = useState<boolean | null>(null);\n    const [userPhoneCheck, setUserPhoneCheck] = useState<boolean | null>(null);\n    const [userDepartmentCheck, setUserDepartmentCheck] = useState<boolean | null>(null);\n\n\n    const userName = useSelector((state: TestState) => state.fetcher.userName);\n    const userID = useSelector((state: TestState) => state.fetcher.userID);\n    const userPhone = useSelector((state: TestState) => state.fetcher.userPhone);\n    const userEmail = useSelector((state: TestState) => state.fetcher.userEmail);\n    const userPosition = useSelector((state: TestState) => state.fetcher.userPosition);\n    const userDepartment = useSelector((state: TestState) => state.fetcher.userDepartment);\n\n    const [timeState, setTimeState] = useState<boolean>(false);\n\n    const endTime = new Date('2023-03-07 00:00:00');\n    const currentTime = new Date();\n    const EMAIL_REGEX = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\n\n    useEffect(() => {\n        // 현재 시간이 엔드타임보다 클 경우에는 timesState를 true로 만들어줍니다.\n        if (currentTime > endTime) {\n            setTimeState(true);\n        } else {\n            setTimeState(false);\n        }\n\n        document.body.style.overflow = \"unset\";\n        // 이전 값들을 저장하기 위해서 Redux 사용\n        if (userName && userID && userPhone && userEmail && userPosition && userDepartment) {\n            setName(userName);\n            setID(userID);\n            setEmail(userEmail);\n            setPhone(userPhone);\n            setPosition(userPosition);\n            setDepartment(userDepartment);\n            setUserNameCheck(true);\n            setUserIDCheck(true);\n            setUserEmailCheck(true);\n            setUserDepartmentCheck(true);\n            setUserPhoneCheck(true);\n            setOpenSearch(true);\n        }\n    }, [])\n\n    useMemo(() => {\n        if (tempId.length >= 9 && tempEmail && tempPosition) {\n            setIsTempState(false);\n        } else {\n            setIsTempState(true);\n        }\n\n        if (userNameCheck && userEmailCheck && userPhoneCheck && position && precautions && privacy && userDepartmentCheck && userIDCheck) {\n            setButtonState(false)\n        } else {\n            setButtonState(true)\n        }\n\n        if (submitCount >= 1) {\n            setButtonState(true);\n        }\n\n        if (tempCount >= 1) {\n            setTempButtonState(true);\n        }\n\n    }, [name, id, email, phone, position, precautions, privacy, department, submitCount, tempCount, tempId, tempEmail, tempPosition, userNameCheck, userEmailCheck, userPhoneCheck, userDepartmentCheck, userIDCheck])\n\n    // 모달의 상태 값이 참 일 경우에는, 브라우저의 스크롤 움직임을 막아준다. (hidden)\n    // 모달의 상태 값이 거짓 일 경우에는, 브라우저의 스크롤 움직임을 풀어준다. (usset)\n    useEffect(() => {\n        if (isNotTempState || load || submit || temp) {\n            document.body.style.overflow = \"hidden\";\n        } else {\n            document.body.style.overflow = \"unset\";\n        }\n    }, [isNotTempState, load, submit, temp]);\n\n    const dispatch = useDispatch<AppDispatch>();\n    const navigate = useNavigate();\n\n    const handleClick = async () => {\n        if (position) {\n            setSubmitCount((prev) => (prev + 1))\n            if (position === \"백엔드\") {\n                await axios.get(`/backendApplication?sid=${id}`)\n                    .then(async (res) => {\n                        console.log(\"백엔드\", res.data);\n                        if (res.data.motive || res.data.hardWork || res.data.keyWord || res.data.mostDeeplyWork) {\n                            if (res.data.submissionStatus) {\n                                setSubmit(!submit);\n                                document.body.style.overflow = \"hidden\";\n                            } else {\n                                setItIsTemp(!itIsTemp);\n                                document.body.style.overflow = \"hidden\";\n                            }\n                        } else {\n                            dispatch(saveIndex({ userName: name, userID: id, userPhone: phone, userEmail: email, userPosition: position, userDepartment: department }));\n                            navigate('/common');\n                        }\n                    })\n            }\n\n            if (position === \"프론트엔드\") {\n                await axios.get(`/frontendApplication?sid=${id}`)\n                    .then(async (res) => {\n                        console.log(\"프론트엔드\", res.data);\n                        if (res.data.motive || res.data.hardWork || res.data.keyWord || res.data.mostDeeplyWork) {\n                            if (res.data.submissionStatus) {\n                                setSubmit(!submit);\n                                document.body.style.overflow = \"hidden\";\n                            } else {\n                                setItIsTemp(!itIsTemp);\n                                document.body.style.overflow = \"hidden\";\n                            }\n                        } else {\n                            dispatch(saveIndex({ userName: name, userID: id, userPhone: phone, userEmail: email, userPosition: position, userDepartment: department }));\n                            navigate('/common');\n                        }\n                    })\n            }\n\n            if (position === \"디자인\") {\n                await axios.get(`/designApplication?sid=${id}`)\n                    .then(async (res) => {\n                        console.log(\"디자인\", res.data);\n                        if (res.data.motive || res.data.hardWork || res.data.keyWord || res.data.mostDeeplyWork) {\n                            if (res.data.submissionStatus) {\n                                setSubmit(!submit);\n                                document.body.style.overflow = \"hidden\";\n                            } else {\n                                setItIsTemp(!itIsTemp);\n                                document.body.style.overflow = \"hidden\";\n                            }\n                        } else {\n                            dispatch(saveIndex({ userName: name, userID: id, userPhone: phone, userEmail: email, userPosition: position, userDepartment: department }));\n                            navigate('/common');\n                        }\n                    })\n            }\n        }\n    }\n\n    /* 일반 기본 정보를 다 채우는 과정으로 입력했을 경우, 임시 저장에 따른 계속 작성하기에 관련된 함수 */\n    const continueApply = async () => {\n        setTempCount((prev) => (prev + 1))\n        if (position === \"백엔드\") {\n            await axios.get(`/backendApplication?sid=${id}`)\n                .then(async (res) => {\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: position, userDepartment: res.data.department }));\n                    await dispatch(saveBackEnd({ userDifficultAndOvercoming: res.data.difficultAndOvercoming, userImportantGroup: res.data.importantGroup, userPortfolioLinkBack: res.data.portfolioLink, userStudyFramework: res.data.studyFramework }));\n                    await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\n                    await navigate('/common');\n                })\n        }\n\n        if (position === \"프론트엔드\") {\n            await axios.get(`/frontendApplication?sid=${id}`)\n                .then(async (res) => {\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: position, userDepartment: res.data.department }));\n                    await dispatch(saveFrontEnd({ userWhyFrontend: res.data.whyFrontend, userUsingStack: res.data.usingStack, userTeamProject: res.data.teamProject, userAchieve: res.data.achieve, userPortfolioLinkFront: res.data.portfolioLink }));;\n                    await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\n                    await navigate('/common');\n                })\n        }\n\n        if (position === \"디자인\") {\n            await axios.get(`/designApplication?sid=${id}`)\n                .then(async (res) => {\n                    console.log(\"design :\", res.data);\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: position, userDepartment: res.data.department }));\n                    await dispatch(saveDesign({ userWhyDesign: res.data.whyDesign, userToolExperience: res.data.toolExperience, userTeamworkExperience: res.data.teamworkExperience, userPortfolioLinkDesign: res.data.portfolioLink, userDesignGrowth: res.data.designGrowth, }));\n                    await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\n                    await navigate('/common');\n                })\n        }\n    }\n\n    /* 학번만 입력했을 경우, 임시 저장에 따른 작성하기에 관련된 함수 */\n    const tempContinueApply = async () => {\n        setTempCount((prev) => (prev + 1))\n        if (tempPosition === \"백엔드\") {\n            await axios.get(`/backendApplication?sid=${tempId}`)\n                .then(async (res) => {\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: tempPosition, userDepartment: res.data.department }));\n                    await dispatch(saveBackEnd({ userDifficultAndOvercoming: res.data.difficultAndOvercoming, userImportantGroup: res.data.importantGroup, userPortfolioLinkBack: res.data.portfolioLink, userStudyFramework: res.data.studyFramework }));\n                    await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\n                    await navigate('/common');\n                })\n        }\n\n        if (tempPosition === \"프론트엔드\") {\n            await axios.get(`/frontendApplication?sid=${tempId}`)\n                .then(async (res) => {\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: tempPosition, userDepartment: res.data.department }));\n                    await dispatch(saveFrontEnd({ userWhyFrontend: res.data.whyFrontend, userUsingStack: res.data.usingStack, userTeamProject: res.data.teamProject, userAchieve: res.data.achieve, userPortfolioLinkFront: res.data.portfolioLink }));;\n                    await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\n                    await navigate('/common');\n                })\n        }\n\n        if (tempPosition === \"디자인\") {\n            await axios.get(`/designApplication?sid=${tempId}`)\n                .then(async (res) => {\n                    console.log(\"design :\", res.data);\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: tempPosition, userDepartment: res.data.department }));\n                    await dispatch(saveDesign({ userWhyDesign: res.data.whyDesign, userToolExperience: res.data.toolExperience, userTeamworkExperience: res.data.teamworkExperience, userPortfolioLinkDesign: res.data.portfolioLink, userDesignGrowth: res.data.designGrowth, }));\n                    await dispatch(saveCommon({ userMotiv: res.data.motive, userHardWork: res.data.hardWork, userKeyword: res.data.keyWord, userMostDeeplyWork: res.data.mostDeeplyWork }));\n                    await navigate('/common');\n                })\n        }\n    }\n\n    /* 학번으로만 임시 저장 여부를 확인할 때, submit 함수 */\n    const tempClick = async () => {\n        if (tempPosition) {\n            setSubmitCount((prev) => (prev + 1))\n            setLoad(false)\n            if (tempPosition === \"백엔드\") {\n                await axios.get(`/backendApplication/getBackendApplicationWithEmail?email=${tempEmail}&sid=${tempId}`)\n                    .then(async (res) => {\n                        console.log(\"백엔드\", res.data);\n                        if (res.data.motive || res.data.hardWork || res.data.keyWord || res.data.mostDeeplyWork) {\n                            if (res.data.submissionStatus) {\n                                setSubmit(!submit);\n                                document.body.style.overflow = \"hidden\";\n                            } else {\n                                setTemp(!temp);\n                                document.body.style.overflow = \"hidden\";\n                            }\n                        } else {\n                            setIsNotTempState(!isNotTempState);\n                            document.body.style.overflow = \"hidden\";\n                        }\n                    })\n            }\n\n            if (tempPosition === \"프론트엔드\") {\n                await axios.get(`/frontendApplication/getFrontendApplicationWithEmail?email=${tempEmail}&sid=${tempId}`)\n                    .then(async (res) => {\n                        console.log(\"임시저장 프론트엔드\", res.data);\n                        if (res.data.motive || res.data.hardWork || res.data.keyWord || res.data.mostDeeplyWork) {\n                            if (res.data.submissionStatus === true) {\n                                setSubmit(!submit);\n                                document.body.style.overflow = \"hidden\";\n                            } else {\n                                setTemp(!temp);\n                                document.body.style.overflow = \"hidden\";\n                            }\n                        } else {\n                            setIsNotTempState(!isNotTempState);\n                            document.body.style.overflow = \"hidden\";\n                        }\n                    })\n            }\n\n            if (tempPosition === \"디자인\") {\n                await axios.get(`/designApplication/getDesignApplicationWithEmail?email=${tempEmail}&sid=${tempId}`)\n                    .then(async (res) => {\n                        console.log(\"임시저장 디자인\", res.data);\n                        if (res.data.motive || res.data.hardWork || res.data.keyWord || res.data.mostDeeplyWork) {\n                            if (res.data.submissionStatus) {\n                                setSubmit(!submit);\n                                document.body.style.overflow = \"hidden\";\n                            } else {\n                                setTemp(!temp);\n                                document.body.style.overflow = \"hidden\";\n                            }\n                        } else {\n                            setIsNotTempState(!isNotTempState);\n                            document.body.style.overflow = \"hidden\";\n                        }\n                    })\n            }\n        }\n    }\n\n    /* 저장된 글이 발견되고, 새로 작성하기를 누를 경우 기본 정보를 Redux에 저장시키고, 기존 Redux 정보를 새롭게 리셋 시킨다. */\n    const newApply = async () => {\n        await setTempCount((prev) => (prev + 1))\n        await dispatch(saveIndex({ userName: name, userID: id, userPhone: phone, userEmail: email, userPosition: position, userDepartment: department }));\n        if (position === \"프론트엔드\") {\n            await dispatch(saveFrontEnd({\n                userWhyFrontend: '',\n                userUsingStack: '',\n                userAchieve: '',\n                userPortfolioLinkFront: '',\n                userTeamProject: '',\n            }));\n        }\n        if (position === \"디자인\") {\n            await dispatch(saveDesign({\n                userWhyDesign: '',\n                userToolExperience: '',\n                userTeamworkExperience: '',\n                userPortfolioLinkDesign: '',\n                userDesignGrowth: '',\n            }));\n        }\n\n        if (position === \"백엔드\") {\n            await dispatch(saveBackEnd({\n                userDifficultAndOvercoming: '',\n                userImportantGroup: '',\n                userPortfolioLink: '',\n                userStudyFramework: '',\n            }));\n        }\n\n        await dispatch(saveCommon({\n            userMotiv: '',\n            userHardWork: '',\n            userKeyWord: '',\n            userMostDeeplyWork: '',\n        }))\n        navigate('/common');\n    }\n\n    /* 임시 저장 여부를 확인하고, 바로 새로 작성을 할 경우 공통 질문과, 파트별 질문은 초기화하되, 사용자의 기본 정보는 초기화해서는 안됨 */\n    const tempNewApply = async () => {\n        await setTempCount((prev) => (prev + 1))\n\n        if (tempPosition === \"백엔드\") {\n            await axios.get(`/backendApplication?sid=${tempId}`)\n                .then(async (res) => {\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: tempPosition, userDepartment: res.data.department }));\n                    await dispatch(saveBackEnd({ userDifficultAndOvercoming: '', userImportantGroup: '', userPortfolioLink: '', userStudyFramework: '' }));\n                })\n        }\n\n        if (tempPosition === \"프론트엔드\") {\n            await axios.get(`/frontendApplication?sid=${tempId}`)\n                .then(async (res) => {\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: tempPosition, userDepartment: res.data.department }));\n                    await dispatch(saveFrontEnd({ userWhyFrontend: '', userUsingStack: '', userAchieve: '', userPortfolioLinkFront: '', userTeamProject: '' }));\n                })\n        }\n\n        if (tempPosition === \"디자인\") {\n            await axios.get(`/designApplication?sid=${tempId}`)\n                .then(async (res) => {\n                    console.log(\"design :\", res.data);\n                    await dispatch(saveIndex({ userName: res.data.name, userID: res.data.sid, userPhone: res.data.phoneNumber, userEmail: res.data.email, userPosition: tempPosition, userDepartment: res.data.department }));\n                    await dispatch(saveDesign({ userWhyDesign: '', userToolExperience: '', userTeamworkExperience: '', userPortfolioLinkDesign: '', userDesignGrowth: '', }));\n                })\n        }\n\n        await dispatch(saveCommon({\n            userMotiv: '',\n            userHardWork: '',\n            userKeyWord: '',\n            userMostDeeplyWork: '',\n        }))\n\n        await navigate('/common');\n    }\n\n    /* 일반 페이지에서 포지션을 체크하는 함수 */\n    function CheckPosition(event: React.MouseEvent<HTMLButtonElement>): void {\n        const name = (event.target as HTMLButtonElement).name;\n        setPosition(name);\n    }\n\n    /* 불러오기 버튼을 누르고 포지션을 체크하는 함수 */\n    function TempCheckPosition(event: React.MouseEvent<HTMLButtonElement>): void {\n        const name = (event.target as HTMLButtonElement).name;\n        setTempPosition(name);\n    }\n\n    const checking = (event: React.MouseEvent<HTMLImageElement | HTMLElement>): void => {\n        const name = (event.target as HTMLImageElement).alt;\n        const id = (event.target as HTMLImageElement).id;\n\n        if (name === \"주의사항\") {\n            setPrecautions(!precautions);\n        }\n        if (name === \"개인정보\") {\n            setPrivacy(!privacy);\n        }\n        if (id === \"주의사항\") {\n            setPrecautions(!precautions);\n        }\n        if (id === \"개인정보\") {\n            setPrivacy(!privacy);\n        }\n    }\n\n    /* 학과를 검색하고 누르면, 해당 값들을 참으로 넘겨줍니다. */\n    const SearchCheck = async (item: string) => {\n        await setDepartment(item)\n        await setOpenSearch(true);\n        await setUserDepartmentCheck(true);\n    }\n\n\n    /* 학과를 검색하고, 사용자가 재검색을 하고 싶을 경우 해당 버튼을 누르면 기존 값들을 다시 false 값으로 바꿔줍니다 */\n    const RevertDepartment = async () => {\n        await setDepartment('');\n        await setOpenSearch(false);\n        await setUserDepartmentCheck(false);\n    }\n\n    const changeValue = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.target.name === \"이름\") {\n            const eventName = event.target.value.replace(/[_/]|[0-9]|[ \\[\\]{}()<>?|`~!@#$%^&*-+=,.;:\\\"'\\\\]/g, '');\n            if (eventName.length === 1) {\n                setUserNameCheck(false);\n            }\n            else if (eventName.length >= 2) {\n                setUserNameCheck(true);\n            }\n            else if (eventName.length === 0) {\n                setUserNameCheck(null);\n            }\n            setName(eventName);\n        }\n        if (event.target.name === \"학번\") {\n            const eventID = event.target.value.replace(/[^0-9]/g, '');\n            if (eventID.length === 9) {\n                setUserIDCheck(true);\n            }\n            else if (eventID.length >= 1) {\n                setUserIDCheck(false);\n            }\n            else if (eventID.length === 0) {\n                setUserIDCheck(null);\n            }\n            setID(eventID);\n        }\n        if (event.target.name === \"이메일\") {\n            if (event.target.value.match(EMAIL_REGEX)) {\n                setUserEmailCheck(true);\n            }\n            else if (!event.target.value.match(EMAIL_REGEX) && event.target.value.length >= 1) {\n                setUserEmailCheck(false);\n            }\n            else if (event.target.value.length === 0) {\n                setUserEmailCheck(null);\n            }\n\n            setEmail(event.target.value);\n        }\n        if (event.target.name === \"연락처\") {\n            const eventPhone = event.target.value.replace(/[^0-9]/g, '');\n            if (eventPhone.length === 11) {\n                setUserPhoneCheck(true);\n            }\n            else if (eventPhone.length >= 1) {\n                setUserPhoneCheck(false);\n            }\n            else if (eventPhone.length === 0) {\n                setUserPhoneCheck(null);\n            }\n            setPhone(eventPhone);\n        }\n        if (event.target.name === \"학과\") {\n            const eventDepartment = event.target.value.replace(/[_/]|[0-9]|[\\[\\]{}()<>?|`~!@#$%^&*-+=,.;:\\\"'\\\\]/g, '');\n            setDepartment(eventDepartment);\n        }\n\n        if (event.target.name === \"저장된_학번\") {\n            const eventID = event.target.value.replace(/[^0-9]/g, '');\n            setTempId(eventID);\n        }\n\n        if (event.target.name === \"저장된_이메일\") {\n            setTempEmail(event.target.value);\n        }\n    }\n\n    /* 임시 저장 버튼을 클릭했을 때 생기는 변화*/\n    const isSave = () => {\n        setLoad(!load)\n        document.body.style.overflow = \"hidden\";\n    }\n\n    const isSubmit = () => {\n        setSubmit(false);\n        window.location.replace(\"/\")\n    }\n\n    const TempModalQuit = () => {\n        setTempPosition('');\n        setTempId('');\n        setTempEmail('');\n        setLoad(false)\n    }\n\n    if (timeState) {\n        return <EndTime />\n    } else {\n\n        return (\n            <Section>\n                {itIsTemp ?\n                    <Modal text=\"이미 지원한 지원서가 존재해요, 불러오기 버튼을 눌러주세요!\" imgSrc={human} alt=\"불러오기\">\n                        <Button name=\"제출하기\" onClick={isSubmit}>메인 화면으로 이동</Button>\n                    </Modal>\n                    : null\n                }\n                {isNotTempState ?\n                    <Modal text=\"발견된 지원서가 없어요!\" imgSrc={human} alt=\"불러오기\">\n                        <Button name=\"제출하기\" onClick={isSubmit}>메인 화면으로 이동</Button>\n                    </Modal>\n                    : null\n                }\n                {load ?\n                    <Modal text=\"반가워요, 저장된 지원서를 이어서 작성하시겠어요?\" imgSrc={isTemp} alt=\"찾기\">\n                        <div css={css`\n                        display: flex;\n                        flex-direction: column;\n                        align-items:center;\n                    `}>\n                            <ButtonBox alt=\"임시저장_모달\">\n                                <div css={css`\n                                display: flex;\n                                flex-direction: column;\n                                width: 100%;\n                                align-items: center;\n                                row-gap: 1em;\n                            `}>\n                                    <ModalInput type=\"text\" placeholder=\"학번 전체를 입력해주세요\" name=\"저장된_학번\" maxLength={9} onChange={changeValue} value={tempId} />\n                                    <ModalInput type=\"text\" placeholder=\"이메일 전체를 입력해주세요\" name=\"저장된_이메일\" onChange={changeValue} value={tempEmail} />\n                                    <PositionBox alt=\"모달\">\n                                        <Position name=\"백엔드\" onClick={TempCheckPosition} state={tempPosition} alt=\"모달\">백엔드</Position>\n                                        <Position name=\"프론트엔드\" onClick={TempCheckPosition} state={tempPosition} alt=\"모달\">프론트엔드</Position>\n                                        <Position name=\"디자인\" onClick={TempCheckPosition} state={tempPosition} alt=\"모달\">디자인</Position>\n                                    </PositionBox>\n                                    <Quit onClick={TempModalQuit} alt=\"찾기\" />\n                                    <Button name=\"제출하기\" alt=\"불러오기\" disabled={isTempState} onClick={tempClick}>불러오기</Button>\n                                </div>\n                            </ButtonBox>\n                        </div>\n                    </Modal>\n                    : null\n                }\n                {submit ?\n                    <Modal text=\"이미 제출한 지원서가 있어요, 결과 발표를 위해 조금만 기다려주세요!\" imgSrc={human} alt=\"불러오기\">\n                        <Button name=\"제출하기\" onClick={isSubmit} >메인 화면으로 이동</Button>\n                    </Modal>\n                    : null\n                }\n                {temp ?\n                    <Modal text=\"앗, 저장된 지원서가 발견되었어요 계속 작성할까요?\" imgSrc={human} alt=\"불러오기\">\n                        <Button name=\"임시저장\" onClick={id.length === 9 ? newApply : tempNewApply} disabled={tempButtonState}>{tempCount >= 1 ? `잠시만 기다려주세요...` : `새로 작성하기`}</Button>\n                        <Button name=\"제출하기\" onClick={id.length === 9 ? continueApply : tempContinueApply} disabled={tempButtonState}>{tempCount >= 1 ? `잠시만 기다려주세요...` : `이어서 작성하기`}</Button>\n                    </Modal>\n                    : null\n                }\n                <Banner />\n                <Article>\n                    <InputTitle>이름 <Require /> </InputTitle>\n                    <InputBox type=\"text\" placeholder=\"이름을 입력해주세요\" name=\"이름\" maxLength={15} onChange={changeValue} value={name} />\n                    {userNameCheck === false && <ErrorDescription>이름을 제대로 입력해주세요!</ErrorDescription>}\n                    {userNameCheck && <CollectDescription>이름이 정상적으로 입력되었습니다</CollectDescription>}\n                </Article>\n                <Article>\n                    <InputTitle>학번 <Require /> </InputTitle>\n                    <InputBox type=\"text\" placeholder=\"학번 전체를 입력해주세요\" name=\"학번\" maxLength={9} onChange={changeValue} value={id} />\n                    {userIDCheck === false && <ErrorDescription>학번을 제대로 입력해주세요!</ErrorDescription>}\n                    {userIDCheck && <CollectDescription>학번이 정상적으로 입력되었습니다</CollectDescription>}\n                </Article>\n                <Article>\n                    <InputTitle>학과 <Require />\n                        {openSearch && <span css={css`\n                                margin-left: 1em;\n                                color: #707070;\n                                font-family: 'Pretendard-Medium';\n                                letter-spacing: -0.05em;\n                                // text-decoration: underline;\n                                // text-underline-offset: 0.2em;\n                                font-size: 12px;\n                                cursor: pointer;\n                                margin-left: 58.5em;\n                            `} onClick={RevertDepartment}>학과를 다시 입력하고 싶으신가요?</span>}\n                    </InputTitle>\n                    <InputBox type=\"text\" placeholder=\"학과를 입력해주세요\" name=\"학과\" onChange={changeValue} maxLength={10} value={department} disabled={openSearch} />\n                    {!openSearch && department.length >= 1 && <SearchDepartment>\n                        {classList.map((item) => {\n                            if (department.length >= 1 && item.slice(0, department.length) === department) {\n                                return (\n                                    <div css={css`\n                                        cursor: pointer;\n                                        transition: 0.4s all;\n\n                                        &:hover {\n                                            opacity: 80%;\n                                        }\n                                    `} onClick={() => SearchCheck(item)}>\n                                        <span css={css`\n                                            color: #ff7828;\n                                        `}>{item.slice(0, department.length)}</span>\n                                        <span>{item.slice(department.length, item.length)}</span>\n                                    </div>\n                                )\n                            }\n                        })}\n                    </SearchDepartment>}\n                    {openSearch &&\n                        <CollectDescription>\n                            학과가 정상적으로 입력되었습니다\n                        </CollectDescription>}\n\n                    {/* {/* <ErrorDescription>학과를 제대로 입력해주세요!</ErrorDescription> */}\n                </Article>\n                <Article>\n                    <InputTitle>이메일 <Require /> </InputTitle>\n                    <InputBox type=\"email\" placeholder=\"이메일을 입력해주세요\" name=\"이메일\" maxLength={30} onChange={changeValue} value={email} />\n                    {userEmailCheck === false && <ErrorDescription>이메일을 제대로 입력해주세요!</ErrorDescription>}\n                    {userEmailCheck && <CollectDescription>이메일이 정상적으로 입력되었습니다</CollectDescription>}\n\n                </Article>\n                <Article>\n                    <InputTitle>연락처 (하이픈을 제외한 숫자만 입력)<Require /> </InputTitle>\n                    <InputBox type=\"text\" placeholder=\"연락 가능한 번호를 입력해주세요\" name=\"연락처\" maxLength={11} onChange={changeValue} value={phone} />\n                    {userPhoneCheck === false && <ErrorDescription>연락처를 제대로 입력해주세요!</ErrorDescription>}\n                    {userPhoneCheck && <CollectDescription>연락처가 정상적으로 입력되었습니다</CollectDescription>}\n                </Article>\n                <Article>\n                    <InputTitle>지원 포지션 <Require /> </InputTitle>\n                    <PositionBox>\n                        <Position name=\"백엔드\" onClick={CheckPosition} state={position}>백엔드</Position>\n                        <Position name=\"프론트엔드\" onClick={CheckPosition} state={position}>프론트엔드</Position>\n                        <Position name=\"디자인\" onClick={CheckPosition} state={position}>디자인</Position>\n                    </PositionBox>\n                </Article>\n                <Article>\n                    <Precautions />\n                </Article>\n                <Article>\n                    <ArgreeBox>\n                        <Argree name=\"주의사항\" src={precautions ? checkedBox : checkBox} text=\"위의 주의사항을 확인하였습니다\" onClick={checking} />\n                        <Argree name=\"개인정보\" src={privacy ? checkedBox : checkBox} text=\"개인 정보 수집 및 이용에 동의합니다 (모집 종료 후 개인정보는 자동으로 파기됩니다)\" onClick={checking} />\n                    </ArgreeBox>\n                </Article>\n                <ButtonBox>\n                    <Button name=\"임시저장\" onClick={isSave}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `지원서 불러오기`}</Button>\n                    <Button name=\"제출하기\" disabled={buttonState} onClick={handleClick}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `공통문항 작성하기`}</Button>\n                </ButtonBox>\n            </Section >\n        )\n    }\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\Common.tsx",["170","171","172"],[],"import React, { ChangeEvent } from 'react'\nimport { ButtonBox, Section, Button, Require, Article, InputTitle, TextAreaBox, InputBox, Banner, WordLength, Modal } from './emotion/component'\nimport { useNavigate } from 'react-router-dom'\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, TestState } from '../app/store';\nimport { saveCommon, saveIndex, view, saveBackEnd, saveDesign, saveFrontEnd } from '../features/fetcherSlice';\nimport { useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport tempImg from '../images/temp.png';\n\nexport default function Common() {\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch<AppDispatch>();\n    const [motiv, setMotiv] = useState<string>('');\n    const [hardwork, setHardwork] = useState<string>('');\n    const [keyword, setKeyword] = useState<string>('');\n    const [mostDeeplyWork, setMostDeeplyyWork] = useState<string>('');\n    const [buttonState, setButtonState] = useState<boolean>(false);\n    const [submitCount, setSubmitCount] = useState<number>(0);\n    const [tempState, setTempState] = useState<boolean>(false);\n    const [temp, setTemp] = useState(false);\n\n    const userName = useSelector((state: TestState) => state.fetcher.userName);\n    const userID = useSelector((state: TestState) => state.fetcher.userID);\n    const userPhone = useSelector((state: TestState) => state.fetcher.userPhone);\n    const userEmail = useSelector((state: TestState) => state.fetcher.userEmail);\n    const userPosition = useSelector((state: TestState) => state.fetcher.userPosition);\n    const userDepartment = useSelector((state: TestState) => state.fetcher.userDepartment);\n\n    const userMotiv = useSelector((state: TestState) => state.fetcher.userMotiv);\n    const userHardWork = useSelector((state: TestState) => state.fetcher.userHardWork);\n    const userKeyWord = useSelector((state: TestState) => state.fetcher.userKeyWord);\n    const userMostDeeplyWork = useSelector((state: TestState) => state.fetcher.userMostDeeplyWork);\n\n    const userWhyFrontend = useSelector((state: TestState) => state.fetcher.userWhyFrontend);\n    const userUsingStack = useSelector((state: TestState) => state.fetcher.userUsingStack);\n    const userTeamProject = useSelector((state: TestState) => state.fetcher.userTeamProject);\n    const userAchieve = useSelector((state: TestState) => state.fetcher.userAchieve);\n    const userPortfolioLinkFront = useSelector((state: TestState) => state.fetcher.userPortfolioLinkFront);\n\n    const userWhyDesign = useSelector((state: TestState) => state.fetcher.userWhyDesign);\n    const userToolExperience = useSelector((state: TestState) => state.fetcher.userToolExperience);\n    const userTeamworkExperience = useSelector((state: TestState) => state.fetcher.userTeamworkExperience);\n    const userDesignGrowth = useSelector((state: TestState) => state.fetcher.userDesignGrowth);\n    const userPortfolioLinkDesign = useSelector((state: TestState) => state.fetcher.userPortfolioLinkDesign);\n\n    const userDifficultAndOvercoming = useSelector((state: TestState) => state.fetcher.userDifficultAndOvercoming);\n    const userStudyFramework = useSelector((state: TestState) => state.fetcher.userStudyFramework);\n    const userImportantGroup = useSelector((state: TestState) => state.fetcher.userImportantGroup);\n    const userPortfolioLinkBack = useSelector((state: TestState) => state.fetcher.userPortfolioLinkBack);\n\n    useEffect(() => {\n        document.body.style.overflow = \"unset\";\n        console.log(\"common :\", userPosition);\n        if (!userName && !userID && !userPhone && !userEmail && !userPosition) {\n            navigate('/404')\n        }\n\n        // 이전 값들을 저장하기 위해서 Redux 사용\n        if (userMotiv) {\n            setMotiv(userMotiv)\n        }\n        if (userHardWork) {\n            setHardwork(userHardWork)\n        }\n        if (userKeyWord) {\n            setKeyword(userKeyWord)\n        }\n        if (userMostDeeplyWork) {\n            setMostDeeplyyWork(userMostDeeplyWork)\n        }\n    }, [])\n\n    useMemo(() => {\n        if (motiv || hardwork || keyword || mostDeeplyWork) {\n            setTempState(false);\n        } else {\n            setTempState(true);\n        }\n\n        if (motiv && hardwork && keyword && mostDeeplyWork) {\n            setButtonState(false)\n        } else {\n            setButtonState(true)\n        }\n\n        if (submitCount >= 1) {\n            setButtonState(true);\n        }\n    }, [motiv, hardwork, keyword, mostDeeplyWork, submitCount])\n\n\n    const Back = () => {\n        setSubmitCount((prev) => (prev + 1));\n        dispatch(saveCommon({ userMotiv: motiv, userHardWork: hardwork, userKeyword: keyword, userMostDeeplyWork: mostDeeplyWork }));\n        navigate('/');\n    }\n\n    const PartHistoy = async () => {\n        await setSubmitCount((prev) => (prev + 1));\n        await dispatch(saveCommon({ userMotiv: motiv, userHardWork: hardwork, userKeyword: keyword, userMostDeeplyWork: mostDeeplyWork }));\n        if (userPosition === \"프론트엔드\") {\n            await navigate('/frontend');\n        } else if (userPosition === \"백엔드\") {\n            await navigate('/backend')\n        } else if (userPosition === \"디자인\") {\n            await navigate('/design')\n        } else {\n            console.log(\"error?:\", userPosition);\n            alert(\"오류가 발생했습니다, 강남대학교 멋쟁이사자처럼에 문의해주세요!\")\n            await navigate('/');\n        }\n    }\n\n    const TempSave = async () => {\n        await setSubmitCount((prev) => (prev + 1));\n        if (userPosition === \"프론트엔드\") {\n            await axios.post('/frontendApplication', JSON.stringify({\n                department: userDepartment,\n                whyFrontend: userWhyFrontend,\n                email: userEmail,\n                hardWork: hardwork,\n                usingStack: userUsingStack,\n                keyWord: keyword,\n                mostDeeplyWork: mostDeeplyWork,\n                motive: motiv,\n                name: userName,\n                passOrNot: true,\n                phoneNumber: userPhone,\n                portfolioFile: \"\",\n                portfolioLink: userPortfolioLinkFront,\n                sid: userID,\n                teamProject: userTeamProject,\n                achieve: userAchieve,\n                submissionStatus: false,\n            }),\n                {\n                    headers: {\n                        \"Content-type\": \"application/json\",\n                    }\n                }\n            )\n                .then(async (res) => {\n                    await setTemp(true);\n                    document.body.style.overflow = \"hidden\";\n                })\n                .catch((error) => {\n                    console.log(error);\n                })\n        }\n\n        if (userPosition === \"백엔드\") {\n            await axios.post('/backendApplication', JSON.stringify({\n                department: userDepartment,\n                difficultAndOvercoming: userDifficultAndOvercoming,\n                email: userEmail,\n                hardWork: hardwork,\n                importantGroup: userImportantGroup,\n                keyWord: keyword,\n                mostDeeplyWork: mostDeeplyWork,\n                motive: motiv,\n                name: userName,\n                passOrNot: true,\n                phoneNumber: userPhone,\n                portfolioFile: \"\",\n                portfolioLink: userPortfolioLinkBack,\n                sid: userID,\n                studyFramework: userStudyFramework,\n                submissionStatus: false,\n            }),\n                {\n                    headers: {\n                        \"Content-type\": \"application/json\",\n                    }\n                }\n            )\n                .then(async (res) => {\n                    await setTemp(!temp);\n                    document.body.style.overflow = \"hidden\";\n                })\n        }\n\n        if (userPosition === \"디자인\") {\n            await axios.post('/designApplication', JSON.stringify({\n                department: userDepartment,\n                whyDesign: userWhyDesign,\n                email: userEmail,\n                hardWork: hardwork,\n                toolExperience: userToolExperience,\n                keyWord: keyword,\n                mostDeeplyWork: mostDeeplyWork,\n                motive: motiv,\n                name: userName,\n                passOrNot: true,\n                phoneNumber: userPhone,\n                portfolioFile: \"\",\n                portfolioLink: userPortfolioLinkDesign,\n                sid: userID,\n                teamworkExperience: userTeamworkExperience,\n                designGrowth: userDesignGrowth,\n                submissionStatus: false,\n            }),\n                {\n                    headers: {\n                        \"Content-type\": \"application/json\",\n                    }\n                }\n            )\n                .then(async (res) => {\n                    await setTemp(!temp);\n                    document.body.style.overflow = \"hidden\";\n                })\n        }\n    }\n\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        if (event.target.name === \"최종목표\") {\n            if (event.target.value.length <= 1000) {\n                setMotiv(event.target.value);\n            }\n        }\n\n        if (event.target.name === \"활동\") {\n            if (event.target.value.length <= 1000) {\n                setHardwork(event.target.value);\n            }\n        }\n\n        if (event.target.name === \"키워드\") {\n            if (event.target.value.length <= 1000) {\n                setKeyword(event.target.value);\n            }\n        }\n\n        if (event.target.name === \"감명\") {\n            if (event.target.value.length <= 1000) {\n                setMostDeeplyyWork(event.target.value);\n            }\n        }\n    }\n\n    const TempBack = async () => {\n        setTemp(false);\n        setSubmitCount(0);\n        setTempState(false);\n        setButtonState(false);\n    }\n\n    const TempHome = async () => {\n        if (userPosition === \"프론트엔드\") {\n            dispatch(saveFrontEnd({\n                userWhyFrontend: '',\n                userUsingStack: '',\n                userAchieve: '',\n                userPortfolioLinkFront: '',\n                userTeamProject: '',\n            }));\n            dispatch(saveCommon({\n                userMotiv: '',\n                userHardWork: '',\n                userKeyWord: '',\n                userMostDeeplyWork: '',\n            }))\n            dispatch(saveIndex({\n                userName: '',\n                userID: '',\n                userDepartment: '',\n                userEmail: '',\n                userPhone: '',\n                userPosition: '',\n            }))\n        }\n        if (userPosition === \"백엔드\") {\n            dispatch(saveBackEnd({\n                userDifficultAndOvercoming: '',\n                userImportantGroup: '',\n                userPortfolioLink: '',\n                userStudyFramework: '',\n            }));\n            dispatch(saveCommon({\n                userMotiv: '',\n                userHardWork: '',\n                userKeyWord: '',\n                userMostDeeplyWork: '',\n            }))\n            dispatch(saveIndex({\n                userName: '',\n                userID: '',\n                userDepartment: '',\n                userEmail: '',\n                userPhone: '',\n                userPosition: '',\n            }))\n        }\n        if (userPosition === \"디자인\") {\n            await dispatch(saveDesign({\n                userWhyDesign: '',\n                userToolExperience: '',\n                userTeamworkExperience: '',\n                userPortfolioLinkDesign: '',\n                userDesignGrowth: '',\n            }));\n            await dispatch(saveCommon({\n                userMotiv: '',\n                userHardWork: '',\n                userKeyWord: '',\n                userMostDeeplyWork: '',\n            }))\n            await dispatch(saveIndex({\n                userName: '',\n                userID: '',\n                userDepartment: '',\n                userEmail: '',\n                userPhone: '',\n                userPosition: '',\n            }))\n        }\n        await navigate('/');\n    }\n\n    return (\n        <Section>\n            {temp ?\n                <Modal text=\"지원하신 학번으로 지원서가 저장이 되었어요!\" imgSrc={tempImg}>\n                    <Button name=\"임시저장\" onClick={TempHome}>메인 화면으로 이동</Button>\n                    <Button name=\"제출하기\" onClick={TempBack}>이어서 작성하기</Button>\n                </Modal>\n                : null\n            }\n            <Banner />\n            <Article>\n                <InputTitle>지원자분의 인생의 최종 목표는 무엇인가요?<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"최종목표\" onChange={handleChange} value={motiv} />\n                <WordLength>{motiv.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>학교 공부를 제외하고 본인의 인생에 있어서 가장 열심히 했던 활동은 무엇인가요?<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"활동\" onChange={handleChange} value={hardwork} />\n                <WordLength>{hardwork.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>자신을 설명할 수 있는 키워드 3개와 그 이유에 대하여 설명해주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"키워드\" onChange={handleChange} value={keyword} />\n                <WordLength>{keyword.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>최근에 가장 감명 깊었던 책 · 영화 · 노래가 있다면 하나를 선택해주시고, 그 이유에 대하여 설명해주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"감명\" onChange={handleChange} value={mostDeeplyWork} />\n                <WordLength>{mostDeeplyWork.length}</WordLength>\n            </Article>\n            <ButtonBox>\n                <Button name=\"임시저장\" onClick={TempSave} disabled={tempState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `임시저장`}</Button>\n                <Button name=\"제출하기\" onClick={Back}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `뒤로가기`}</Button>\n                <Button name=\"제출하기\" onClick={PartHistoy} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `파트별 문항 작성하기`}</Button>\n            </ButtonBox>\n        </Section>\n    )\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\features\\fetcherSlice.ts",["173","174"],[],"import { createAsyncThunk, createSlice, isFulfilled } from \"@reduxjs/toolkit\";\n\nexport const fetcherSlice = createSlice({\n    name: 'fetcher',\n    initialState: {\n        userName: '',\n        userID: '',\n        userDepartment: '',\n        userEmail: '',\n        userPhone: '',\n        userPosition: '',\n        userMotiv: '',\n        userHardWork: '',\n        userKeyWord: '',\n        userMostDeeplyWork: '',\n\n        // 백엔드\n        userDifficultAndOvercoming: '',\n        userStudyFramework: '',\n        userImportantGroup: '',\n\n        // 프론트엔드\n        userWhyFrontend: '',\n        userUsingStack: '',\n        userTeamProject: '',\n        userAchieve: '',\n\n        // 디자인\n        userWhyDesign: '',\n        userToolExperience: '',\n        userTeamworkExperience: '',\n        userDesignGrowth: '',\n\n        // 공통 포트폴리오\n        userPortfolioLinkFront: '',\n        userPortfolioLinkBack: '',\n        userPortfolioLinkDesign: '',\n\n        // 관리자 페이지에서의 모달창 온/오프\n        userModalState: false,\n        adminState: false,\n\n    },\n    reducers: {\n        saveIndex: (state, action) => {\n            // console.log(action);\n            // console.log(action.payload);\n            state.userName = action.payload.userName;\n            state.userID = action.payload.userID;\n            state.userDepartment = action.payload.userDepartment;\n            state.userEmail = action.payload.userEmail;\n            state.userPhone = action.payload.userPhone;\n            state.userPosition = action.payload.userPosition;\n        },\n        saveCommon: (state, action) => {\n            state.userMotiv = action.payload.userMotiv;\n            state.userHardWork = action.payload.userHardWork;\n            state.userKeyWord = action.payload.userKeyword;\n            state.userMostDeeplyWork = action.payload.userMostDeeplyWork;\n        },\n        saveDesign: (state, action) => {\n            state.userWhyDesign = action.payload.userWhyDesign;\n            state.userToolExperience = action.payload.userToolExperience;\n            state.userTeamworkExperience = action.payload.userTeamworkExperience;\n            state.userDesignGrowth = action.payload.userDesignGrowth;\n            state.userPortfolioLinkDesign = action.payload.userPortfolioLinkDesign;\n        },\n        saveFrontEnd: (state, action) => {\n            state.userWhyFrontend = action.payload.userWhyFrontend;\n            state.userUsingStack = action.payload.userUsingStack;\n            state.userTeamProject = action.payload.userTeamProject;\n            state.userAchieve = action.payload.userAchieve;\n            state.userPortfolioLinkFront = action.payload.userPortfolioLinkFront;\n        },\n        saveBackEnd: (state, action) => {\n            state.userDifficultAndOvercoming = action.payload.userDifficultAndOvercoming;\n            state.userStudyFramework = action.payload.userStudyFramework;\n            state.userImportantGroup = action.payload.userImportantGroup;\n            state.userPortfolioLinkBack = action.payload.userPortfolioLinkBack;\n        },\n        view: (state) => {\n            //     console.log(state.userName);\n            //     console.log(state.userID);\n            //     console.log(state.userEmail);\n            //     console.log(state.userPhone);\n            //     console.log(state.userPosition);\n            //     console.log(state.userMotiv);\n            //     console.log(state.userHardWork);\n            //     console.log(state.userKeyWord);\n            //     console.log(state.userMostDeeplyWork);\n            //     console.log(state.userWhyDesign);\n            //     console.log(state.userToolExperience);\n            //     console.log(state.userTeamworkExperience);\n            //     console.log(state.userDesignGrowth);\n            //     console.log(state.userWhyFrontend);\n            //     console.log(state.userUsingStack);\n            //     console.log(state.userTeamProject);\n            //     console.log(state.userAchieve);\n        },\n        saveModalState: (state, action) => {\n            state.userModalState = action.payload.userModalState;\n        },\n        saveAdminState: (state, action) => {\n            state.adminState = action.payload.adminState;\n        }\n    },\n    extraReducers: {},\n})\n\nexport const { saveIndex, saveCommon, saveBackEnd, saveFrontEnd, saveDesign, view, saveModalState, saveAdminState } = fetcherSlice.actions;\nexport default fetcherSlice.reducer;","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\styles\\GlobalFont.tsx",[],[],"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Design.tsx",["175","176","177"],[],"import React, { ChangeEvent } from 'react'\nimport { ButtonBox, Section, Button, Require, Article, InputTitle, TextAreaBox, InputBox, Banner, WordLength, Modal } from '../emotion/component'\nimport { useNavigate } from 'react-router-dom'\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, TestState } from '../../app/store';\nimport { saveCommon, saveIndex, view, saveDesign } from '../../features/fetcherSlice';\nimport { useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport tempImg from '../../images/temp.png';\nimport completeImg from '../../images/complete.png';\n\n\nexport default function Design() {\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch<AppDispatch>();\n    const [whyDesign, setWhyDesign] = useState('');\n    const [toolExperience, setToolExperience] = useState('');\n    const [teamworkExperience, setTeamworkExperience] = useState('');\n    const [designGrowth, setDesignGrowth] = useState('');\n    const [buttonState, setButtonState] = useState(false);\n    const [portfolioLink, setPortfolioLink] = useState('');\n    const [submitCount, setSubmitCount] = useState<number>(0);\n    const [tempState, setTempState] = useState<boolean>(false);\n    const [temp, setTemp] = useState<boolean>(false);\n    const [complete, setComplete] = useState<boolean>(false);\n\n    const userName = useSelector((state: TestState) => state.fetcher.userName);\n    const userID = useSelector((state: TestState) => state.fetcher.userID);\n    const userPhone = useSelector((state: TestState) => state.fetcher.userPhone);\n    const userEmail = useSelector((state: TestState) => state.fetcher.userEmail);\n    const userPosition = useSelector((state: TestState) => state.fetcher.userPosition);\n    const userDepartment = useSelector((state: TestState) => state.fetcher.userDepartment);\n\n    const userMotiv = useSelector((state: TestState) => state.fetcher.userMotiv);\n    const userHardWork = useSelector((state: TestState) => state.fetcher.userHardWork);\n    const userKeyWord = useSelector((state: TestState) => state.fetcher.userKeyWord);\n    const userMostDeeplyWork = useSelector((state: TestState) => state.fetcher.userMostDeeplyWork);\n\n    const userWhyDesign = useSelector((state: TestState) => state.fetcher.userWhyDesign);\n    const userToolExperience = useSelector((state: TestState) => state.fetcher.userToolExperience);\n    const userTeamworkExperience = useSelector((state: TestState) => state.fetcher.userTeamworkExperience);\n    const userDesignGrowth = useSelector((state: TestState) => state.fetcher.userDesignGrowth);\n    const userPortfolioLink = useSelector((state: TestState) => state.fetcher.userPortfolioLinkDesign);\n\n\n    useEffect(() => {\n        document.body.style.overflow = \"unset\";\n        if (!userName && !userID && !userPhone && !userEmail && !userPosition) {\n            navigate('/404')\n        }\n\n        // 이전 값들을 저장하기 위해서 Redux 사용\n        if (userWhyDesign) {\n            setWhyDesign(userWhyDesign);\n        }\n\n        if (userToolExperience) {\n            setToolExperience(userToolExperience);\n        }\n\n        if (userTeamworkExperience) {\n            setTeamworkExperience(userTeamworkExperience);\n        }\n\n        if (userDesignGrowth) {\n            setDesignGrowth(userDesignGrowth);\n        }\n\n        if (userPortfolioLink) {\n            setPortfolioLink(userPortfolioLink)\n        }\n\n    }, [])\n\n    useMemo(() => {\n        // 디자인 파트로 들어왔을 때는 공통 질문이 하나라도 작성된 상태이기 때문에 바로 임시저장이 가능함\n        if (userMotiv || userHardWork || userKeyWord || userMostDeeplyWork) {\n            setTempState(false);\n        } else {\n            setTempState(true);\n        }\n\n        if (whyDesign && toolExperience && teamworkExperience && designGrowth) {\n            setButtonState(false)\n        } else {\n            setButtonState(true)\n        }\n        if (submitCount >= 1) {\n            setButtonState(true);\n        }\n    }, [whyDesign, toolExperience, teamworkExperience, designGrowth, submitCount])\n\n\n    const Back = () => {\n        setSubmitCount((prev) => (prev + 1))\n        dispatch(saveDesign({ userWhyDesign: whyDesign, userToolExperience: toolExperience, userTeamworkExperience: teamworkExperience, userDesignGrowth: designGrowth, userPortfolioLinkDesign: portfolioLink }));\n        navigate('/common');\n    }\n\n    const TempSave = () => {\n        setSubmitCount((prev) => (prev + 1))\n        axios.post('/designApplication', JSON.stringify({\n            department: userDepartment,\n            whyDesign: whyDesign,\n            email: userEmail,\n            hardWork: userHardWork,\n            toolExperience: toolExperience,\n            keyWord: userKeyWord,\n            mostDeeplyWork: userMostDeeplyWork,\n            motive: userMotiv,\n            name: userName,\n            passOrNot: true,\n            phoneNumber: userPhone,\n            portfolioFile: \"\",\n            portfolioLink: portfolioLink,\n            sid: userID,\n            teamworkExperience: teamworkExperience,\n            designGrowth: designGrowth,\n            submissionStatus: false,\n        }),\n            {\n                headers: {\n                    \"Content-type\": \"application/json\",\n                }\n            }\n        )\n            .then((res) => {\n                console.log(res);\n                setTemp(!temp);\n                document.body.style.overflow = \"hidden\";\n            })\n    }\n\n    const Submit = async () => {\n        setSubmitCount((prev) => (prev + 1))\n        axios.post('/designApplication', JSON.stringify({\n            department: userDepartment,\n            whyDesign: whyDesign,\n            email: userEmail,\n            hardWork: userHardWork,\n            toolExperience: toolExperience,\n            keyWord: userKeyWord,\n            mostDeeplyWork: userMostDeeplyWork,\n            motive: userMotiv,\n            name: userName,\n            passOrNot: true,\n            phoneNumber: userPhone,\n            portfolioFile: \"\",\n            portfolioLink: portfolioLink,\n            sid: userID,\n            teamworkExperience: teamworkExperience,\n            designGrowth: designGrowth,\n            submissionStatus: true,\n        }),\n            {\n                headers: {\n                    \"Content-type\": \"application/json\",\n                }\n            }\n        )\n            .then((res) => {\n                console.log(res);\n                dispatch(saveDesign({\n                    userWhyDesign: '',\n                    userToolExperience: '',\n                    userTeamworkExperience: '',\n                    userPortfolioLinkDesign: '',\n                    userDesignGrowth: '',\n                }));\n                dispatch(saveCommon({\n                    userMotiv: '',\n                    userHardWork: '',\n                    userKeyWord: '',\n                    userMostDeeplyWork: '',\n                }))\n                dispatch(saveIndex({\n                    userName: '',\n                    userID: '',\n                    userDepartment: '',\n                    userEmail: '',\n                    userPhone: '',\n                    userPosition: '',\n                }))\n                setComplete(!complete)\n                document.body.style.overflow = \"hidden\";\n            })\n    }\n\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement> | ChangeEvent<HTMLInputElement>) => {\n        if (event.target.name === \"동기\") {\n            if (event.target.value.length <= 1000) {\n                setWhyDesign(event.target.value);\n            }\n        }\n\n        if (event.target.name === \"경험\") {\n            if (event.target.value.length <= 1000) {\n                setToolExperience(event.target.value);\n            }\n        }\n\n        if (event.target.name === \"팀워크\") {\n            if (event.target.value.length <= 1000) {\n                setTeamworkExperience(event.target.value);\n            }\n        }\n\n        if (event.target.name === \"성장\") {\n            if (event.target.value.length <= 1000) {\n                setDesignGrowth(event.target.value);\n            }\n        }\n\n        if (event.target.name === \"포트폴리오\") {\n            setPortfolioLink(event.target.value);\n        }\n    }\n\n    const TempBack = async () => {\n        setTemp(false);\n        setSubmitCount(0);\n        setTempState(false);\n        setButtonState(false);\n    }\n\n    const TempHome = async () => {\n        await dispatch(saveDesign({\n            userWhyDesign: '',\n            userToolExperience: '',\n            userTeamworkExperience: '',\n            userPortfolioLinkDesign: '',\n            userDesignGrowth: '',\n        }));\n        await dispatch(saveCommon({\n            userMotiv: '',\n            userHardWork: '',\n            userKeyWord: '',\n            userMostDeeplyWork: '',\n        }))\n        await dispatch(saveIndex({\n            userName: '',\n            userID: '',\n            userDepartment: '',\n            userEmail: '',\n            userPhone: '',\n            userPosition: '',\n        }))\n        await navigate('/');\n    }\n\n    return (\n        <Section>\n            {complete ?\n                <Modal text=\"지원서가 정상적으로 제출되었습니다!\" imgSrc={completeImg} alt=\"최종제출\">\n                    <Button name=\"제출하기\" onClick={() => navigate('/')}>메인 화면으로 이동</Button>\n                </Modal>\n                : null\n            }\n            {temp ?\n                <Modal text=\"지원하신 학번으로 지원서가 저장이 되었어요!\" imgSrc={tempImg}>\n                    <Button name=\"임시저장\" onClick={TempHome}>메인 화면으로 이동</Button>\n                    <Button name=\"제출하기\" onClick={TempBack}>이어서 작성하기</Button>\n                </Modal>\n                : null\n            }\n            <Banner />\n            <Article>\n                <InputTitle>디자인 트랙을 선택하게 된 이유를 구체적으로 서술해주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"동기\" onChange={handleChange} value={whyDesign} />\n                <WordLength>{whyDesign.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>피그마나 Adobe XD와 같은 목업 툴에 관련된 경험을 해본 적이 있다면 그 경험에 대해 자세히 설명을 해주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"경험\" onChange={handleChange} value={toolExperience} />\n                <WordLength>{toolExperience.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>본인이 협업과 팀워크를 진행해 보았던 경험과, 그 경험을 멋쟁이 사자처럼 대학에서 어떻게 적용시킬 수 있는지 알려주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"팀워크\" onChange={handleChange} value={teamworkExperience} />\n                <WordLength>{teamworkExperience.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>디자인 트랙을 통해 어떠한 성장을 희망하시는지 구체적으로 서술해주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"성장\" onChange={handleChange} value={designGrowth} />\n                <WordLength>{designGrowth.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>포트폴리오 링크가 있다면 첨부해주세요 </InputTitle>\n                <InputBox type=\"text\" placeholder=\"포트폴리오 링크를 입력해주세요\" maxLength={200} name=\"포트폴리오\" onChange={handleChange} value={portfolioLink} />\n            </Article>\n            <ButtonBox>\n                <Button name=\"임시저장\" onClick={TempSave} disabled={tempState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `임시저장`}</Button>\n                <Button name=\"제출하기\" onClick={Back}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `뒤로가기`}</Button>\n                <Button name=\"제출하기\" onClick={Submit} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `제출하기`}</Button>\n            </ButtonBox>\n        </Section>\n    )\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Frontend.tsx",["178","179","180","181"],[],"import React, { ChangeEvent } from 'react'\nimport { ButtonBox, Section, Button, Require, Article, InputTitle, TextAreaBox, InputBox, Banner, WordLength, Modal } from '../emotion/component'\nimport { useNavigate } from 'react-router-dom'\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, TestState } from '../../app/store';\nimport { saveCommon, saveIndex, view, saveFrontEnd } from '../../features/fetcherSlice';\nimport { useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport tempImg from '../../images/temp.png';\nimport completeImg from '../../images/complete.png';\n\nexport default function Frontend() {\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch<AppDispatch>();\n\n    const [buttonState, setButtonState] = useState(false);\n    const [submitCount, setSubmitCount] = useState<number>(0);\n    const [tempState, setTempState] = useState<boolean>(false);\n    const [temp, setTemp] = useState<boolean>(false);\n    const [complete, setComplete] = useState<boolean>(false);\n\n    const [whyFrontend, setWhyFrontend] = useState('');\n    const [usingStack, setUsingStack] = useState('');\n    const [teamProject, setTeamProject] = useState('');\n    const [achieve, setAchieve] = useState('');\n    const [portfolioLink, setPortfolioLink] = useState('');\n\n\n    const userName = useSelector((state: TestState) => state.fetcher.userName);\n    const userID = useSelector((state: TestState) => state.fetcher.userID);\n    const userPhone = useSelector((state: TestState) => state.fetcher.userPhone);\n    const userEmail = useSelector((state: TestState) => state.fetcher.userEmail);\n    const userPosition = useSelector((state: TestState) => state.fetcher.userPosition);\n    const userDepartment = useSelector((state: TestState) => state.fetcher.userDepartment);\n\n    const userMotiv = useSelector((state: TestState) => state.fetcher.userMotiv);\n    const userHardWork = useSelector((state: TestState) => state.fetcher.userHardWork);\n    const userKeyWord = useSelector((state: TestState) => state.fetcher.userKeyWord);\n    const userMostDeeplyWork = useSelector((state: TestState) => state.fetcher.userMostDeeplyWork);\n\n    const userWhyFrontend = useSelector((state: TestState) => state.fetcher.userWhyFrontend);\n    const userUsingStack = useSelector((state: TestState) => state.fetcher.userUsingStack);\n    const userTeamProject = useSelector((state: TestState) => state.fetcher.userTeamProject);\n    const userAchieve = useSelector((state: TestState) => state.fetcher.userAchieve);\n    const userPortfolioLink = useSelector((state: TestState) => state.fetcher.userPortfolioLinkFront);\n\n    useEffect(() => {\n        document.body.style.overflow = \"unset\";\n        if (!userName && !userID && !userPhone && !userEmail && !userPosition) {\n            navigate('/404')\n        }\n\n        // 이전 값들을 저장하기 위해서 Redux 사용\n\n        if (userWhyFrontend) {\n            setWhyFrontend(userWhyFrontend)\n        }\n        if (userUsingStack) {\n            setUsingStack(userUsingStack)\n        }\n        if (userTeamProject) {\n            setTeamProject(userTeamProject)\n        }\n        if (userAchieve) {\n            setAchieve(userAchieve)\n        }\n        if (userPortfolioLink) {\n            setPortfolioLink(userPortfolioLink)\n        }\n    }, [])\n\n    useMemo(() => {\n\n        // 프론트엔드 파트로 들어왔을 때는 공통 질문이 하나라도 작성된 상태이기 때문에 바로 임시저장이 가능함\n        if (userMotiv || userHardWork || userKeyWord || userMostDeeplyWork) {\n            setTempState(false);\n        } else {\n            setTempState(true);\n        }\n\n        if (whyFrontend && usingStack && teamProject && achieve) {\n            setButtonState(false)\n        } else {\n            setButtonState(true)\n        }\n        if (submitCount >= 1) {\n            setButtonState(true);\n        }\n    }, [whyFrontend, usingStack, teamProject, achieve, submitCount])\n\n\n    const Back = () => {\n        setSubmitCount((prev) => (prev + 1))\n        dispatch(saveFrontEnd({ userWhyFrontend: whyFrontend, userUsingStack: usingStack, userTeamProject: teamProject, userAchieve: achieve, userPortfolioLinkFront: portfolioLink }));\n        navigate('/common');\n    }\n\n\n    const TempSave = () => {\n        setSubmitCount((prev) => (prev + 1));\n        if (userPosition === \"프론트엔드\") {\n            axios.post('/frontendApplication', JSON.stringify({\n                department: userDepartment,\n                whyFrontend: whyFrontend,\n                email: userEmail,\n                hardWork: userHardWork,\n                usingStack: usingStack,\n                keyWord: userKeyWord,\n                mostDeeplyWork: userMostDeeplyWork,\n                motive: userMotiv,\n                name: userName,\n                passOrNot: true,\n                phoneNumber: userPhone,\n                portfolioFile: \"\",\n                portfolioLink: portfolioLink,\n                sid: userID,\n                teamProject: teamProject,\n                achieve: achieve,\n                submissionStatus: false,\n            }),\n                {\n                    headers: {\n                        \"Content-type\": \"application/json\",\n                    }\n                }\n            )\n                .then((res) => {\n                    console.log(res);\n                    setTemp(!temp);\n                    document.body.style.overflow = \"hidden\";\n                })\n        }\n    }\n\n    const OpenSubmit = () => {\n        setComplete(!complete);\n    }\n\n    const Submit = () => {\n        setSubmitCount((prev) => (prev + 1))\n        axios.post('/frontendApplication', JSON.stringify({\n            department: userDepartment,\n            whyFrontend: whyFrontend,\n            email: userEmail,\n            hardWork: userHardWork,\n            usingStack: usingStack,\n            keyWord: userKeyWord,\n            mostDeeplyWork: userMostDeeplyWork,\n            motive: userMotiv,\n            name: userName,\n            passOrNot: true,\n            phoneNumber: userPhone,\n            portfolioFile: \"\",\n            portfolioLink: portfolioLink,\n            sid: userID,\n            teamProject: teamProject,\n            achieve: achieve,\n            submissionStatus: true,\n        }),\n            {\n                headers: {\n                    \"Content-type\": \"application/json\",\n                }\n            }\n        )\n            .then((res) => {\n                console.log(res);\n                dispatch(saveFrontEnd({\n                    userWhyFrontend: '',\n                    userUsingStack: '',\n                    userAchieve: '',\n                    userPortfolioLinkFront: '',\n                    userTeamProject: '',\n                }));\n                dispatch(saveCommon({\n                    userMotiv: '',\n                    userHardWork: '',\n                    userKeyWord: '',\n                    userMostDeeplyWork: '',\n                }))\n                dispatch(saveIndex({\n                    userName: '',\n                    userID: '',\n                    userDepartment: '',\n                    userEmail: '',\n                    userPhone: '',\n                    userPosition: '',\n                }))\n                setComplete(!complete)\n                document.body.style.overflow = \"hidden\";\n            })\n    }\n\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement> | ChangeEvent<HTMLInputElement>) => {\n        if (event.target.name === \"동기\") {\n            if (event.target.value.length <= 1000) {\n                setWhyFrontend(event.target.value);\n            }\n        }\n\n        if (event.target.name === \"프레임워크\") {\n            if (event.target.value.length <= 1000) {\n\n                setUsingStack(event.target.value);\n            }\n        }\n\n        if (event.target.name === \"경험\") {\n            if (event.target.value.length <= 1000) {\n                setTeamProject(event.target.value);\n            }\n        }\n\n        if (event.target.name === \"성장\") {\n            if (event.target.value.length <= 1000) {\n                setAchieve(event.target.value);\n            }\n        }\n\n        if (event.target.name === \"포트폴리오\") {\n            setPortfolioLink(event.target.value);\n        }\n    }\n\n    const TempBack = async () => {\n        setTemp(false);\n        setSubmitCount(0);\n        setTempState(false);\n        setButtonState(false);\n    }\n\n    const TempHome = async () => {\n        await dispatch(saveFrontEnd({\n            userWhyFrontend: '',\n            userUsingStack: '',\n            userAchieve: '',\n            userPortfolioLinkFront: '',\n            userTeamProject: '',\n        }));\n        await dispatch(saveCommon({\n            userMotiv: '',\n            userHardWork: '',\n            userKeyWord: '',\n            userMostDeeplyWork: '',\n        }))\n        await dispatch(saveIndex({\n            userName: '',\n            userID: '',\n            userDepartment: '',\n            userEmail: '',\n            userPhone: '',\n            userPosition: '',\n        }))\n        await navigate('/');\n    }\n\n    return (\n        <Section>\n            {complete ?\n                <Modal text=\"지원서가 정상적으로 제출되었습니다!\" imgSrc={completeImg} alt=\"최종제출\">\n                    <Button name=\"제출하기\" onClick={() => navigate('/')}>메인 화면으로 이동</Button>\n                </Modal>\n                : null\n            }\n            {temp ?\n                <Modal text=\"지원하신 학번으로 지원서가 저장이 되었어요!\" imgSrc={tempImg}>\n                    <Button name=\"임시저장\" onClick={TempHome}>메인 화면으로 이동</Button>\n                    <Button name=\"제출하기\" onClick={TempBack}>이어서 작성하기</Button>\n                </Modal>\n                : null\n            }\n            <Banner />\n            <Article>\n                <InputTitle>프론트엔드 트랙을 선택하게 된 이유를 구체적으로 서술해주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"동기\" onChange={handleChange} value={whyFrontend} />\n                <WordLength>{whyFrontend.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>프론트엔드 개발과 관련된 프레임워크나 html, css, js 등의 언어를 사용해 보신 적 있으신가요? 있으시다면 어디까지 사용해 보셨는지 구체적으로 적어주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"프레임워크\" onChange={handleChange} value={usingStack} />\n                <WordLength>{usingStack.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>팀 활동이나 프로젝트를 경험해본 내용과 이를 통해 자신의 성장 경험에 대해서 서술해주세요<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"경험\" onChange={handleChange} value={teamProject} />\n                <WordLength>{teamProject.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>멋사 프론트엔드 아기사자로 활동하면서 얻어 가고 싶은 것은 무엇인가요?<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"성장\" onChange={handleChange} value={achieve} />\n                <WordLength>{achieve.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>포트폴리오 링크가 있다면 첨부해주세요 </InputTitle>\n                <InputBox type=\"text\" placeholder=\"포트폴리오 링크를 입력해주세요\" maxLength={200} name=\"포트폴리오\" onChange={handleChange} value={portfolioLink} />\n            </Article>\n            <ButtonBox>\n                <Button name=\"임시저장\" onClick={TempSave} disabled={tempState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `임시저장`}</Button>\n                <Button name=\"제출하기\" onClick={Back}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `뒤로가기`}</Button>\n                <Button name=\"제출하기\" onClick={Submit} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `제출하기`}</Button>\n            </ButtonBox>\n        </Section>\n    )\n}","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\position\\Backend.tsx",["182","183","184"],[],"import React, { ChangeEvent } from 'react'\nimport { ButtonBox, Section, Button, Require, Article, InputTitle, TextAreaBox, InputBox, Banner, WordLength, Modal } from '../emotion/component'\nimport { useNavigate } from 'react-router-dom'\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, TestState } from '../../app/store';\nimport { saveCommon, saveIndex, view, saveBackEnd } from '../../features/fetcherSlice';\nimport { useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport tempImg from '../../images/temp.png';\nimport completeImg from '../../images/complete.png';\n\nexport default function Backend() {\n\n    const navigate = useNavigate();\n    const dispatch = useDispatch<AppDispatch>();\n    const [difficultAndOvercoming, setDifficultAndOvercoming] = useState('');\n    const [studyFramework, setStudyFramework] = useState('');\n    const [importantGroup, setImportantGroup] = useState('');\n    const [portfolioLink, setPortfolioLink] = useState('');\n    const [buttonState, setButtonState] = useState(false);\n    const [backButtonState, setBackButtonState] = useState(false);\n    const [submitCount, setSubmitCount] = useState<number>(0);\n    const [tempState, setTempState] = useState<boolean>(false);\n    const [temp, setTemp] = useState<boolean>(false);\n    const [complete, setComplete] = useState<boolean>(false);\n\n    const userName = useSelector((state: TestState) => state.fetcher.userName);\n    const userID = useSelector((state: TestState) => state.fetcher.userID);\n    const userPhone = useSelector((state: TestState) => state.fetcher.userPhone);\n    const userEmail = useSelector((state: TestState) => state.fetcher.userEmail);\n    const userPosition = useSelector((state: TestState) => state.fetcher.userPosition);\n    const userDepartment = useSelector((state: TestState) => state.fetcher.userDepartment);\n\n    const userMotiv = useSelector((state: TestState) => state.fetcher.userMotiv);\n    const userHardWork = useSelector((state: TestState) => state.fetcher.userHardWork);\n    const userKeyWord = useSelector((state: TestState) => state.fetcher.userKeyWord);\n    const userMostDeeplyWork = useSelector((state: TestState) => state.fetcher.userMostDeeplyWork);\n\n    const userDifficultAndOvercoming = useSelector((state: TestState) => state.fetcher.userDifficultAndOvercoming);\n    const userStudyFramework = useSelector((state: TestState) => state.fetcher.userStudyFramework);\n    const userImportantGroup = useSelector((state: TestState) => state.fetcher.userImportantGroup);\n    const userPortfolioLink = useSelector((state: TestState) => state.fetcher.userPortfolioLinkBack);\n\n    useEffect(() => {\n        document.body.style.overflow = \"unset\";\n\n        if (!userName && !userID && !userPhone && !userEmail && !userPosition) {\n            navigate('/404')\n        }\n\n        // 이전 값들을 저장하기 위해서 Redux 사용\n        if (userDifficultAndOvercoming) {\n            setDifficultAndOvercoming(userDifficultAndOvercoming);\n        }\n\n        if (userStudyFramework) {\n            setStudyFramework(userStudyFramework);\n        }\n\n        if (userImportantGroup) {\n            setImportantGroup(userImportantGroup);\n        }\n\n        if (userPortfolioLink) {\n            setPortfolioLink(userPortfolioLink)\n        }\n    }, [])\n\n    useMemo(() => {\n\n        // 백엔드 파트로 들어왔을 때는 공통 질문이 하나라도 작성된 상태이기 때문에 바로 임시저장이 가능함\n        if (userMotiv || userHardWork || userKeyWord || userMostDeeplyWork) {\n            setTempState(false);\n        } else {\n            setTempState(true);\n        }\n\n        if (difficultAndOvercoming && studyFramework && importantGroup) {\n            setButtonState(false)\n        } else {\n            setButtonState(true)\n        }\n        if (submitCount >= 1) {\n            setButtonState(true);\n            setBackButtonState(true);\n        }\n    }, [difficultAndOvercoming, studyFramework, importantGroup, submitCount])\n\n\n    const Back = () => {\n        setSubmitCount((prev) => (prev + 1))\n        dispatch(saveBackEnd({ userDifficultAndOvercoming: difficultAndOvercoming, userStudyFramework: studyFramework, userImportantGroup: importantGroup, userPortfolioLinkBack: portfolioLink }));\n        navigate('/common');\n    }\n\n    const TempSave = () => {\n        setSubmitCount((prev) => (prev + 1))\n        axios.post('/backendApplication', JSON.stringify({\n            department: userDepartment,\n            difficultAndOvercoming: difficultAndOvercoming,\n            email: userEmail,\n            hardWork: userHardWork,\n            importantGroup: importantGroup,\n            keyWord: userKeyWord,\n            mostDeeplyWork: userMostDeeplyWork,\n            motive: userMotiv,\n            name: userName,\n            passOrNot: true,\n            phoneNumber: userPhone,\n            portfolioFile: \"\",\n            portfolioLink: portfolioLink,\n            sid: userID,\n            studyFramework: studyFramework,\n            submissionStatus: false,\n        }),\n            {\n                headers: {\n                    \"Content-type\": \"application/json\",\n                }\n            }\n        )\n            .then((res) => {\n                console.log(res);\n                dispatch(saveBackEnd({\n                    userDifficultAndOvercoming: '',\n                    userImportantGroup: '',\n                    userPortfolioLink: '',\n                    userStudyFramework: '',\n                }));\n                dispatch(saveCommon({\n                    userMotiv: '',\n                    userHardWork: '',\n                    userKeyWord: '',\n                    userMostDeeplyWork: '',\n                }))\n                dispatch(saveIndex({\n                    userName: '',\n                    userID: '',\n                    userDepartment: '',\n                    userEmail: '',\n                    userPhone: '',\n                    userPosition: '',\n                }))\n                setTemp(!temp);\n                document.body.style.overflow = \"hidden\";\n            })\n    }\n\n    const Submit = () => {\n        setSubmitCount((prev) => (prev + 1))\n        axios.post('/backendApplication', JSON.stringify({\n            department: userDepartment,\n            difficultAndOvercoming: difficultAndOvercoming,\n            email: userEmail,\n            hardWork: userHardWork,\n            importantGroup: importantGroup,\n            keyWord: userKeyWord,\n            mostDeeplyWork: userMostDeeplyWork,\n            motive: userMotiv,\n            name: userName,\n            passOrNot: true,\n            phoneNumber: userPhone,\n            portfolioFile: \"\",\n            portfolioLink: portfolioLink,\n            sid: userID,\n            studyFramework: studyFramework,\n            submissionStatus: true,\n        }),\n            {\n                headers: {\n                    \"Content-type\": \"application/json\",\n                }\n            }\n        )\n            .then((res) => {\n                console.log(res);\n                setComplete(!complete);\n                document.body.style.overflow = \"hidden\";\n            })\n    }\n\n    const handleChange = (event: ChangeEvent<HTMLTextAreaElement> | ChangeEvent<HTMLInputElement>) => {\n        if (event.target.name === \"극복\") {\n            if (event.target.value.length <= 1000) {\n                setDifficultAndOvercoming(event.target.value);\n            }\n        }\n\n        if (event.target.name === \"경험\") {\n            if (event.target.value.length <= 1000) {\n                setStudyFramework(event.target.value);\n            }\n        }\n\n        if (event.target.name === \"팀워크\") {\n            if (event.target.value.length <= 1000) {\n                setImportantGroup(event.target.value);\n            }\n        }\n\n        if (event.target.name === \"포트폴리오\") {\n            setPortfolioLink(event.target.value);\n        }\n    }\n\n    const TempBack = async () => {\n        setTemp(false);\n        setSubmitCount(0);\n        setTempState(false);\n        setButtonState(false);\n    }\n\n    const TempHome = async () => {\n        await dispatch(saveBackEnd({\n            userDifficultAndOvercoming: '',\n            userImportantGroup: '',\n            userPortfolioLink: '',\n            userStudyFramework: '',\n        }));\n        await dispatch(saveCommon({\n            userMotiv: '',\n            userHardWork: '',\n            userKeyWord: '',\n            userMostDeeplyWork: '',\n        }))\n        await dispatch(saveIndex({\n            userName: '',\n            userID: '',\n            userDepartment: '',\n            userEmail: '',\n            userPhone: '',\n            userPosition: '',\n        }))\n        await navigate('/');\n    }\n\n    return (\n        <Section>\n            {complete ?\n                <Modal text=\"지원서가 정상적으로 제출되었습니다!\" imgSrc={completeImg} alt=\"최종제출\">\n                    <Button name=\"제출하기\" onClick={() => navigate('/')}>메인 화면으로 이동</Button>\n                </Modal>\n                : null\n            }\n            {temp ?\n                <Modal text=\"소중한 지원서가 학번으로 지원서가 저장이 되었어요!\" imgSrc={tempImg}>\n                    <Button name=\"임시저장\" onClick={TempHome}>메인 화면으로 이동</Button>\n                    <Button name=\"제출하기\" onClick={TempBack}>이어서 작성하기</Button>\n                </Modal>\n                : null\n            }\n            <Banner />\n            <Article>\n                <InputTitle>개발 관련 공부를 하며 개인적으로 힘들었던 경험과 그걸 극복했던 자신만의 방법이 있나요?<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"극복\" onChange={handleChange} value={difficultAndOvercoming} />\n                <WordLength>{difficultAndOvercoming.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>웹 백앤드 프레임워크를 공부해보신적 있으신가요? 있으시다면 어디까지 공부해보셨나요?<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"경험\" onChange={handleChange} value={studyFramework} />\n                <WordLength>{studyFramework.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>단체생활에서 가장 중요하다고 생각하는 것은 무엇인가요?<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" name=\"팀워크\" onChange={handleChange} value={importantGroup} />\n                <WordLength>{importantGroup.length}</WordLength>\n            </Article>\n            <Article>\n                <InputTitle>포트폴리오 링크가 있다면 첨부해주세요 </InputTitle>\n                <InputBox type=\"text\" placeholder=\"포트폴리오 링크를 입력해주세요\" maxLength={200} name=\"포트폴리오\" onChange={handleChange} value={portfolioLink} />\n            </Article>\n            <ButtonBox>\n                <Button name=\"임시저장\" onClick={TempSave} disabled={tempState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `임시저장`}</Button>\n                <Button name=\"제출하기\" onClick={Back} disabled={backButtonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `뒤로가기`}</Button>\n                <Button name=\"제출하기\" onClick={Submit} disabled={buttonState}>{submitCount >= 1 ? `잠시만 기다려주세요...` : `제출하기`}</Button>\n            </ButtonBox>\n        </Section>\n    )\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\emotion\\component.tsx",["185","186","187","188","189","190"],[],"/** @jsxImportSource @emotion/react */\nimport { css, keyframes } from \"@emotion/react\";\nimport React, { ChangeEvent, useState } from 'react'\nimport banner from '../../images/banner.png';\nimport loading from '../../images/loading.gif';\nimport axios from 'axios';\nimport checkBox from '../images/checkBox.svg';\nimport checkedBox from '../images/checkedBox.svg';\nimport { useMemo } from 'react';\nimport { fadeLeft, fadeUp } from \"../../styles/Keyframes\";\nimport { WrapperProps } from \"../../App\"\nimport { ImgClickType } from \"../admin/detail/Type\";\nimport back from '../../images/back.png';\nimport oops from '../../images/oops.png';\n\n\nexport const TextAreaBox = (props: TextAreaType) => {\n    return (\n        <textarea css={css`\n        font-family: 'Pretendard-Medium';\n        letter-spacing: -0.03em;\n        line-height: 1.5em;\n        padding: 0;\n        padding-left: 1em;\n        padding-bottom: 1em;\n        padding-right: 1em;\n        padding-top: 1em;\n        width: 64.28em;\n        height: 15em;\n        border: solid;\n        border-radius: 15px;\n        border-color: #707070;\n        border-width: 1px;\n        font-size: 14px;\n        box-sizing: border-box;\n        resize: none;\n\n        // 익스플로러, 파이어폭스에서 우측 스크롤 없애기\n        -ms-overflow-style: none;\n        scrollbar-width: none;\n\n        &:focus {\n            outline-color: #ff7828;\n        }\n\n        &::placeholder {\n            font-family: 'Pretendard-Regular';\n            margin-left: 0.4em;\n        }\n\n        // 크롬에서 우측 스크롤 없애기\n        &::-webkit-scrollbar {\n            display: none;\n          }\n\n        `} {...props} maxLength={1000} />\n    )\n}\n\nexport const UploadButton = () => {\n    return (\n        <div css={css`\n            position: absolute;\n            font-family: 'Pretendard-Bold';\n            letter-spacing: -0.03em;\n            font-size: 15px;\n            border: none;\n            border-radius: 7px;\n            width: 5.8em;\n            height: 2em;       \n            background-color: #ff7828;     \n            margin-left: 59em;\n\n            display: flex;\n            align-items: center;\n            justify-content: center;\n\n            cursor: pointer;\n            transition: 0.5s all;\n\n            &:hover {\n                opacity: 80%;\n            }\n        `}>\n            <span css={css`\n                color: white;\n            `}>업로드</span>\n        </div>\n    )\n}\n\nexport const InputBox = (props: InputType) => {\n    return (\n        <input css={css`\n        font-family: 'Pretendard-Medium';\n        letter-spacing: -0.03em;\n        padding: 0;\n        padding-left: 1em;\n        width: 64.28em;\n        height: 3.7em;\n        border: solid;\n        border-radius: 10px;\n        border-color: #707070;\n        border-width: 1px;\n        font-size: 14px;\n        box-sizing: border-box;\n\n        &::-webkit-outer-spin-button,\n        &::-webkit-inner-spin-button {\n            -webkit-appearance: none;\n            margin: 0;\n        }\n\n        &:focus {\n            outline-color: #ff7828;\n        }\n\n        &::placeholder {\n            font-family: 'Pretendard-Regular';\n            margin-left: 0.4em;\n        }\n        `} {...props} maxLength={props.maxLength} tabIndex={-1} />\n    )\n}\n\nexport interface PositionType {\n    name?: string;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    children?: React.ReactNode;\n    state?: string;\n    alt?: string;\n}\n\nexport const Position = (props: PositionType) => {\n    return (\n        <button css={css`\n            font-family: 'Pretendard-Medium';\n            letter-spacing: -0.03em;\n            font-size: 14px;\n            height: 4em;\n            ${props.alt === \"모달\" && css`height: 3em;`} \n            ${props.alt === \"모달\" && css`font-size: 12px;`} \n            border-radius: 50px;\n            border: solid;\n            border-width: 1px;\n            border-color: #707070;\n            transition: 0.5s all;\n            cursor: pointer;\n\n            ${props.name === props.state ? css`\n            color: white;\n            background-color: #ff7828;\n            border: none;\n            ` : css`\n            background-color: white;\n            color: #707070;\n\n            &:hover {\n                border-color: #ff7828;\n                color:  #ff7828;\n            }\n            &:focus {\n                outline: none;\n                border-color: #ff7828;\n                color:  #ff7828;\n            }\n            `}\n        `}{...props} tabIndex={-1}>{props.children}</button>\n    )\n}\n\nexport const ModalFrame = ({ children }: WrapperProps) => {\n    return (\n        <div css={css`\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height:100%;\n        background-color: rgba(0, 0, 0, 0.4);\n        z-index: 999;\n        cursor: pointer;\n        display: block;\n        `}>\n            {children}\n        </div>\n    )\n}\n\nexport const Modal = (props: WrapperProps) => {\n    return (\n        <ModalFrame>\n            <div css={css`\n                position: fixed;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                display: flex;\n                justify-content: center;\n            `}>\n                <div css={css`\n                    font-family: 'Pretendard-Bold';\n                    letter-spacing: -0.03em;\n                    border-radius: 20px;\n                    background-color: white;\n                    position: fixed;\n                    font-size: 16px;\n                    width: 40em;\n                    height: 30em;\n                    ${props.alt === \"찾기\" && css`height: 35em`}\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    animation: ${fadeUp} 1s ease-in-out;\n                `}>\n                    <div css={css`\n                        display: flex;\n                        flex-direction: column;\n                        align-items: center;\n                        justify-content: center;\n                        animation: ${fadeUp} 1.3s ease-in-out;\n                    `}>\n                        {props.imgSrc &&\n                            <img alt=\"사람\" src={props.imgSrc}\n                                css={css`\n                            width: 9.2em;\n                            ${props.alt === \"찾기\" &&\n                                    'width: 7.3em;'\n                                    }\n                            ${props.alt === \"최종제출\" &&\n                                    'width: 7.5em;'\n                                    }\n                            ${props.alt === \"불러오기\" &&\n                                    'width: 7.5em;'\n                                    }\n                            margin-bottom: 2em;\n                            animation: ${fadeUp} 1.5s ease-in-out;\n                        `} />\n                        }\n                        <span css={css`\n                            animation: ${fadeUp} 1.5s ease-in-out;\n                            ${props.alt === \"찾기\" && css`margin-bottom: -1em;`}\n                        `}>\n                            {props.text}\n                        </span>\n                        <ButtonBox>\n                            {props.children}\n                        </ButtonBox>\n                    </div>\n                </div>\n            </div>\n        </ModalFrame>\n    )\n}\n\nexport const ModalInput = (props: InputType) => {\n    return (\n        <input css={css`\n        font-family: 'Pretendard-Medium';\n        letter-spacing: -0.03em;\n        padding: 0;\n        padding-left: 1em;\n        width: 22.5em;\n        border: solid;\n        border-radius: 7px;\n        border-color: #707070;\n        border-width: 1px;\n        font-size: 16px;\n        ${props.name === \"저장된_학번\" && css`font-size: 13px;`}\n        ${props.name === \"저장된_학번\" && css`\n        width: 37em;\n        height: 3.5em;\n        `}\n        ${props.name === \"저장된_이메일\" && css`font-size: 13px;`}\n        ${props.name === \"저장된_이메일\" && css`\n        width: 37em;\n        height: 3.5em;\n        `}\n        box-sizing: border-box;\n\n        &::-webkit-outer-spin-button,\n        &::-webkit-inner-spin-button {\n            -webkit-appearance: none;\n            margin: 0;\n        }\n\n        &:focus {\n            outline-color: #ff7828;\n        }\n\n        &::placeholder {\n            font-family: 'Pretendard-Regular';\n            margin-left: 0.4em;\n        }\n        `}{...props} />\n    )\n}\n\nexport const EndTime = () => {\n    return (\n        <section css={css`\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n        `}>\n            <div css={css`\n                background-color: white;\n                width: 30em;\n                height: 25em;\n                border-radius: 10px;\n                border: none;\n                font-size: 14px;\n                letter-spacing: -0.03em;\n                line-height: 1.5em;\n\n                display: flex;\n                flex-direction: column;\n                justify-content: center;\n                align-items: center;\n                row-gap: 2em;\n            `}>\n                <img alt=\"낫 지원기간\" src={oops} css={css`\n                    width: 8em;\n                `} />\n                <span css={css`\n                    font-size: 15px;\n                    letter-spacing: -0.03em;\n                    \n                    font-family: 'Pretendard-Medium';\n                `}>\n                    지원이 마감되었습니다<br />결과 발표를 위해 잠시만 기다려주세요\n                </span>\n            </div>\n        </section>\n    )\n}\n\nexport const Precautions = () => {\n    return (\n        <div css={css`\n            font-family: 'Pretendard-Medium';\n            letter-spacing: -0.03em;\n            display: flex;\n            flex-direction: column;\n            text-align: left;\n            font-size: 14px;\n            width: 64.28em;\n        `}>\n            <InputTitle>주의사항 <Require /> </InputTitle>\n            <div css={css`\n                display: flex;\n                flex-direction: column;\n                row-gap: 0.5em;\n            `}>\n                <span>· 지원서 최종 제출 후에는 지원서의 수정이 불가능합니다.</span>\n                <span>· 작성 중인 지원서는 임시저장 버튼을 통해 실시간으로 저장이 가능합니다.</span>\n                <span>· 지원서 접수 마감일에는 지원자가 몰려 지원이 어려울 수 있으니, 여유있게 미리 제출해주시기바랍니다.</span>\n                <span>· 문항에 따른 올바른 입력을 해주셔야 지원서의 다음 단계로 이동하실 수 있습니다.</span>\n                <span>· 지원서의 내용이 사실과 다를 경우, 합격이 취소되거나 전형 상의 불이익을 받을 수 있습니다.</span>\n                <span>· 지원서는 문항별 최대 1000자의 제한을 두고 있으나, 문항을 다 채우실 필요는 없습니다.</span>\n                <span>· 문의사항은 <strong>kangnam@likelion.org</strong> 으로 문의해주시면 최대한 빠르게 도와드리겠습니다.</span>\n            </div>\n        </div >\n    )\n}\n\nexport const PositionBox = (props: WrapperProps) => {\n    return (\n        <div css={css`\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            column-gap: 2em;\n            font-size: 16px;\n            width: 56.25em;\n            ${props.alt === \"모달\" && css`width: 30em;`} \n        `}>\n            {props.children}\n        </div>\n    )\n}\n\n// 로딩중을 표시하는 컴포넌트\nexport const Loading = () => {\n    return (\n        <img alt=\"로딩 이미지\" src={loading} css={css`\n            width: 12em;\n        `} />\n    )\n}\n\n// 뒤로가기 및 취소\nexport const Quit = (props: ImgClickType) => {\n    return (\n        <img alt=\"뒤로가기\" onClick={props.onClick} src={back} css={css`\n            width: 1em;\n            transition: 0.4s all;\n            margin-top: 2em;\n            margin-bottom: 1em;\n            cursor: pointer;\n\n            ${props.alt === \"찾기\" && css`\n                position: absolute;\n                margin-top: -17em;\n                margin-left: 35.5em;\n            `}\n\n            &:hover {\n                opacity: 60%;\n            }\n        `} />\n    )\n}\n\nexport const WordLength = ({ children }: WrapperProps) => {\n    return (\n        <div css={css`\n            width: 10em;\n            position: absolute;\n            text-align:center;\n            font-family: 'Pretendard-Medium';\n            letter-spacing: -0.03em;\n            font-size: 13px;\n            color: #ff7828;\n            margin-top: 16em;\n            margin-left: 59em;\n\n            display:flex;\n            justify-content: center;\n            align-items: center;\n        `}>\n            <div css={css`\n                width: 2.5em;\n                border-box: box-sizing;\n            `}>\n                {children}\n            </div>\n            <span css={css`\n                margin-right: 0.3em;\n            `}>/</span>\n            <span css={css`\n            `}>1000</span>\n        </div>\n    )\n}\n\nexport const Require = () => {\n    return (\n        <span css={css`\n            margin-left: 0.4em;\n            font-family: 'Pretendard-Medium';\n            letter-spacing: -0.02em;\n            font-size: 14px;\n            color: #ff0000;\n        `}>* </span>\n    )\n}\n\nexport const ArgreeBox = ({ children }: WrapperProps) => {\n    return (\n        <div css={css`\n            display: flex;\n            flex-direction: column;\n            margin-top: 1.3em;\n            row-gap: 0.6em;\n        `}>\n            {children}\n        </div>\n    )\n}\n\nexport interface AgreeType {\n    src: string;\n    text: string;\n    onClick: (event: React.MouseEvent<HTMLImageElement | HTMLDivElement>) => void;\n    name: string;\n}\n\nexport const Argree = ((props: AgreeType) => {\n    return (\n        <div css={css`\n            display: flex;\n            flex-direction: column;\n            width: 64.28em;\n            font-size: 14px;\n        `}>\n            <div css={css`\n                display: flex;\n                align-items: center;\n            `}>\n                <img alt={props.name} onClick={props.onClick} src={props.src} css={css`\n                    width: 1.1em;\n                    cursor: pointer;\n                `} />\n                <span css={css`\n                    font-size: 14px;\n                    font-family: 'Pretendard-Medium';\n                    letter-spacing: -0.03em;\n                    margin-left: 0.4em;\n                    cursor: pointer;\n                `} onClick={props.onClick} id={props.name} >{props.text}<Require /></span>\n            </div>\n        </div>\n    )\n})\n\nexport const Banner = () => {\n    return (\n        <img alt=\"배너 이미지\" src={banner} css={css`\n            margin-top: 40px;\n            max-width: 900px;\n            border-radius: 12px;\n            margin-bottom: 1em;\n            // animation: ${fadeLeft} 1.8s ease-in-out;\n        `} />\n    )\n}\n\nexport const Section = ({ children }: WrapperProps) => {\n    return (\n        <section css={css`\n            position: absolute;\n            left: 50%;\n            transform: translate(-50%);\n            max-width: 73em;\n            width: 100%;\n            background-color: white;\n\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding-bottom: 5em;\n            row-gap: 1.5em;\n        `}>\n            {children}\n        </section>\n    )\n}\n\nexport const InputTitle = ({ children }: WrapperProps) => {\n    return (\n        <p css={css`\n            font-family: 'Pretendard-Bold';\n            letter-spacing: -0.03em;\n            font-size: 14px;\n\n            display: flex;\n            align-items: center;\n        `}>\n            {children}\n        </p>\n    )\n}\n\nexport const SearchDepartment = ({ children }: WrapperProps) => {\n    return (\n        <div css={css`\n            font-family: 'Pretendard-Regular';\n            letter-spacing: -0.03em;\n            background-color: white;\n            border: none;\n            border-radius: 10px;\n            font-size: 13px;\n            padding: 1em;\n            row-gap: 0.5em;\n            box-shadow:2px 3px 5px 0px #707070;\n            display: flex;\n            flex-direction: column;\n            height: 5em;\n        `}>\n            {children}\n        </div>\n    )\n}\n\nexport const Article = ({ children }: WrapperProps) => {\n    return (\n        <article css={css`\n            display: flex;\n            flex-direction: column;\n            text-align: left;\n            justify-content: center;\n            // animation: ${fadeUp} 2s ease-in-out;\n        `}>\n            {children}\n        </article>\n    )\n}\n\nexport const ErrorDescription = ({ children }: WrapperProps) => {\n    return (\n        <span css={css`\n            position: absolute;\n            font-family: 'Pretendard-Regular';\n            letter-spacing: -0.03em;\n            font-size: 12.5px;\n            margin-top: 10em;\n            color: red;\n        `}>\n            {children}\n        </span>\n    )\n}\n\nexport const CollectDescription = ({ children }: WrapperProps) => {\n    return (\n        <span css={css`\n            position: absolute;\n            font-family: 'Pretendard-Regular';\n            letter-spacing: -0.03em;\n            font-size: 12.5px;\n            margin-top: 10em;\n            color: #11BD7E;\n        `}>\n            {children}\n        </span>\n    )\n}\n\nexport interface ButtonType {\n    name?: string;\n    children?: React.ReactNode;\n    disabled?: boolean;\n    onClick?: () => void;\n    alt?: string;\n}\n\nexport const Button = (props: ButtonType) => {\n    return (\n        <button css={css`\n            font-family: 'Pretendard-Bold';\n            letter-spacing: -0.03em;\n            font-size: 14px;\n            width: 15em;\n            height: 3.5em;\n            ${props.alt === \"불러오기\" && css`\n                width: 40em;\n                font-size: 12px;\n                height: 3.8em;\n            `}\n            border: none;\n            border-radius: 7px;\n            color: white;\n            transition: 0.5s all;\n            ${props.name === \"임시저장\" && `background-color : #262626;`}\n            ${props.name === \"제출하기\" && `background-color : #ff7828;`}\n            ${props.disabled ?\n                css`\n                    cursor: auto;\n                    filter: grayscale(100%);\n                ` :\n                css`\n                    cursor: pointer;\n                    &:hover {\n                        opacity: 80%;\n                    }\n                    `\n            }\n        `} {...props} tabIndex={-1}>\n            {props.children}\n        </button>\n    )\n}\n\nexport const ButtonBox = (props: WrapperProps) => {\n    return (\n        <div css={css`\n            display: flex;\n            column-gap: 1em;\n            margin-top: 3em;\n            animation: ${fadeUp} 2s ease-in-out;\n            ${props.alt === \"임시저장_모달\" && css`margin-top: 0em;`}\n        `}>\n            {props.children}\n        </div>\n    )\n}\n\nexport interface InputType {\n    type?: string;\n    placeholder?: string;\n    value?: string | number;\n    disabled?: boolean;\n    maxLength?: number;\n    name?: string;\n    onChange?: (event: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport interface TextAreaType {\n    type?: string;\n    placeholder?: string;\n    value?: string;\n    disabled?: boolean;\n    maxLength?: number;\n    name?: string;\n    onChange?: (event: ChangeEvent<HTMLTextAreaElement>) => void;\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\styles\\Keyframes.ts",["191","192"],[],"import React from 'react'\nimport { css, keyframes } from \"@emotion/react\";\n\nexport const fadeUp = keyframes`\n    0% {\n        transform : translateY(30px);\n        opacity: 0;\n    }\n    50% {\n        opacity: 0.3;\n    }\n    70% {\n        opacity: 0.5;\n    }\n    100% {\n        opacity: 1;\n        transform : none;\n`;\n\nexport const fadeLeft = keyframes`\n0% {\n    transform : translateX(30px);\n    opacity: 0;\n}\n50% {\n    opacity: 0.3;\n}\n70% {\n    opacity: 0.5;\n}\n100% {\n    opacity: 1;\n    transform : none;\n`;\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\partition\\Fail.tsx",["193","194","195","196","197","198","199","200","201","202"],[],"import React from 'react'\nimport { Content, List, NotData, Section, onModalType } from '../emotion/component'\nimport Header from '../common/Header';\nimport { Position, PositionBox } from '../emotion/component';\nimport { frontendDummy, backendDummy, designDummy } from './dummy';\nimport { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport { Loading } from '../../emotion/component';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TestState } from '../../../app/store';\nimport { saveModalState } from '../../../features/fetcherSlice';\nimport Detail from '../detail/Detail';\nimport { userType } from './Type';\n\nexport default function Fail() {\n\n\n    const [position, setPosition] = useState<string>('백엔드');\n    const [frontend, setFrontend] = useState<[]>([]);\n    const [backend, setBackend] = useState<[]>([]);\n    const [design, setDesign] = useState<[]>([]);\n\n    const [backendState, setBackendState] = useState<boolean | null>(true);\n    const [frontendState, setFrontendState] = useState<boolean | null>(true);\n    const [designState, setDesignState] = useState<boolean | null>(true);\n    const [clickState, setClickState] = useState<boolean>(false);\n    const [sid, setSid] = useState<string>('');\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const userModalState = useSelector((state: TestState) => state.fetcher.userModalState);\n    const adminState = useSelector((state: TestState) => (state.fetcher.adminState));\n\n    useEffect(() => {\n\n        if (adminState === false) {\n            navigate('/error');\n        }\n\n        dispatch(saveModalState(false));\n        axios.get('/backendApplication/getApplications?bool=false')\n            .then((res) => {\n                setBackend(() => {\n                    return res.data\n                });\n\n                if (res.data.length < 1) {\n                    setBackendState(false);\n                } else {\n                    setBackendState(null);\n                }\n            })\n    }, [])\n\n    useEffect(() => {\n        if (position === \"백엔드\") {\n            axios.get('/backendApplication/getApplications?bool=false')\n                .then((res) => {\n                    setBackend(res.data);\n\n                    if (res.data.length < 1) {\n                        setBackendState(false);\n                    } else {\n                        setBackendState(null);\n                    }\n                })\n        }\n\n        if (position === \"프론트엔드\") {\n            axios.get('/frontendApplication/getApplications?bool=false')\n                .then((res) => {\n                    setFrontend(res.data);\n\n                    if (res.data.length < 1) {\n                        setFrontendState(false);\n                    } else {\n                        setFrontendState(null);\n                    }\n                })\n        }\n\n        if (position === \"디자인\") {\n            axios.get('/designApplication/getApplications?bool=false')\n                .then((res) => {\n                    setDesign(res.data);\n\n                    if (res.data.length < 1) {\n                        setDesignState(false);\n                    } else {\n                        setDesignState(null);\n                    }\n                })\n        }\n    }, [userModalState])\n\n    function CheckPosition(event: React.MouseEvent<HTMLButtonElement>): void {\n        const name = (event.target as HTMLButtonElement).name;\n        setPosition(name);\n\n        if (name === \"백엔드\") {\n            axios.get('/backendApplication/getApplications?bool=false')\n                .then((res) => {\n                    setBackend(res.data);\n\n                    if (res.data.length < 1) {\n                        setBackendState(false);\n                    } else {\n                        setBackendState(null);\n                    }\n                })\n        }\n\n        if (name === \"프론트엔드\") {\n            axios.get('/frontendApplication/getApplications?bool=false')\n                .then((res) => {\n                    setFrontend(res.data);\n\n                    if (res.data.length < 1) {\n                        setFrontendState(false);\n                    } else {\n                        setFrontendState(null);\n                    }\n                })\n        }\n\n        if (name === \"디자인\") {\n            axios.get('/designApplication/getApplications?bool=false')\n                .then((res) => {\n                    setDesign(res.data);\n\n                    if (res.data.length < 1) {\n                        setDesignState(false);\n                    } else {\n                        setDesignState(null);\n                    }\n                })\n        }\n\n    }\n\n    const onModal: onModalType = async (userID: string) => {\n        await setSid(userID);\n        await dispatch(saveModalState({ userModalState: true }))\n    }\n\n    return (\n        <>\n            {\n                !userModalState ?\n                    <Content>\n                        < PositionBox >\n                            <Position name=\"백엔드\" onClick={CheckPosition} state={position}>백엔드</Position>\n                            <Position name=\"프론트엔드\" onClick={CheckPosition} state={position}>프론트엔드</Position>\n                            <Position name=\"디자인\" onClick={CheckPosition} state={position}>디자인</Position>\n                        </PositionBox >\n                        <List name=\"이름\" position=\"지원분야\" department=\"학과\" id=\"학번\" email=\"이메일\" />\n                        {/* 백엔드 로직 */}\n                        {position === '백엔드' && backendState && <Loading />}\n                        {\n                            position === '백엔드' && backend.length >= 1 && backend.map((item: userType) => {\n                                return (\n                                    <List key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} onClick={() => onModal(item.sid)} />\n                                )\n                            })\n                        }\n                        {position === '백엔드' && backendState === false && <NotData />}\n\n                        {/* 프론트엔드 로직 */}\n                        {position === '프론트엔드' && frontendState && <Loading />}\n                        {\n                            position === '프론트엔드' && frontend.length >= 1 && frontend.map((item: userType) => {\n                                return (\n                                    <List key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} onClick={() => onModal(item.sid)} />\n                                )\n                            })\n                        }\n                        {position === '프론트엔드' && frontendState === false && <NotData />}\n\n                        {/* 디자인 로직 */}\n                        {position === '디자인' && designState && <Loading />}\n                        {\n                            position === '디자인' && design.length >= 1 && design.map((item: userType) => {\n                                return (\n                                    <List key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} onClick={() => onModal(item.sid)} />\n                                )\n                            })\n                        }\n                        {position === '디자인' && designState === false && <NotData />}\n                    </Content >\n                    : <Detail position={position} sid={sid} />\n            }\n        </>\n    )\n}","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\Index.tsx",["203","204"],[],"import React, { useState } from 'react'\nimport { Button, Img, Input, LoginBox, Section } from './emotion/component'\nimport person from '../../images/admin.png';\nimport { useNavigate } from 'react-router-dom';\nimport { Loading } from '../emotion/component';\nimport axios from 'axios';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TestState } from '../../app/store';\nimport { saveAdminState } from '../../features/fetcherSlice';\n\nexport default function Index() {\n\n    const navigate = useNavigate();\n    const [id, setId] = useState('');\n    const [pw, setPw] = useState('');\n    const dispatch = useDispatch();\n    const adminState = useSelector((state: TestState) => (state.fetcher.adminState));\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.target.name === \"아이디\") {\n            setId(event.target.value);\n        }\n\n        if (event.target.name === \"비밀번호\") {\n            setPw(event.target.value);\n        }\n    }\n\n    const handleClick = () => {\n        axios.post(`/adminLogin?id=${id}&pw=${pw}`)\n            .then(async (res) => {\n                console.log(res);\n                if (res.data === true) {\n                    await dispatch(saveAdminState({ adminState: true }));\n                    await navigate('/admin/main');\n                } else {\n                    alert(\"잘못된 접근입니다!\");\n                }\n            })\n            .catch((error) => {\n                alert(error!);\n            })\n    }\n\n    return (\n        <Section>\n            <LoginBox>\n                <Img src={person} />\n                <Input type=\"text\" placeholder='아이디를 입력해주세요' name=\"아이디\" onChange={handleChange} value={id} />\n                <Input type=\"password\" placeholder='비밀번호를 입력해주세요' name=\"비밀번호\" onChange={handleChange} value={pw} />\n                <Button onClick={handleClick}>관리자 로그인</Button>\n            </LoginBox>\n        </Section>\n    )\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\partition\\Main.tsx",["205","206","207","208","209","210","211","212","213","214","215","216","217"],[],"import React, { useMemo } from 'react'\nimport { Content, List, ListType, NotData, Section, onModalType } from '../emotion/component'\nimport { Position, PositionBox } from '../emotion/component';\nimport { frontendDummy, backendDummy, designDummy } from './dummy';\nimport { useState } from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport { userType } from './Type';\nimport { Loading, Modal } from '../../emotion/component';\nimport Header from '../common/Header';\nimport Detail from '../detail/Detail';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TestState } from '../../../app/store';\nimport { saveModalState } from '../../../features/fetcherSlice';\n\nexport default function Main() {\n\n    const [position, setPosition] = useState<string>('백엔드');\n    const [frontend, setFrontend] = useState<[]>([]);\n    const [backend, setBackend] = useState<[]>([]);\n    const [design, setDesign] = useState<[]>([]);\n\n    const [backendState, setBackendState] = useState<boolean | null>(true);\n    const [frontendState, setFrontendState] = useState<boolean | null>(true);\n    const [designState, setDesignState] = useState<boolean | null>(true);\n    const [clickState, setClickState] = useState<boolean>(false);\n    const [sid, setSid] = useState<string>('');\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const userModalState = useSelector((state: TestState) => state.fetcher.userModalState);\n    const adminState = useSelector((state: TestState) => (state.fetcher.adminState));\n\n    useEffect(() => {\n\n        if (adminState === false) {\n            navigate('/error');\n        }\n\n        dispatch(saveModalState(false));\n        axios.get('/backendApplication/getAllApplications')\n            .then((res) => {\n                setBackend(() => {\n                    return res.data\n                });\n\n                if (res.data.length < 1) {\n                    setBackendState(false);\n                } else {\n                    setBackendState(null);\n                }\n            })\n    }, [])\n\n    function CheckPosition(event: React.MouseEvent<HTMLButtonElement>): void {\n        const name = (event.target as HTMLButtonElement).name;\n        setPosition(name);\n\n        if (name === \"백엔드\") {\n            axios.get('/backendApplication/getAllApplications')\n                .then((res) => {\n                    setBackend(res.data);\n\n                    if (res.data.length < 1) {\n                        setBackendState(false);\n                    } else {\n                        setBackendState(null);\n                    }\n                })\n        }\n\n        if (name === \"프론트엔드\") {\n            axios.get('/frontendApplication/getAllApplications')\n                .then((res) => {\n                    setFrontend(res.data);\n\n                    if (res.data.length < 1) {\n                        setFrontendState(false);\n                    } else {\n                        setFrontendState(null);\n                    }\n                })\n        }\n\n        if (name === \"디자인\") {\n            axios.get('/designApplication/getAllApplications')\n                .then((res) => {\n                    setDesign(res.data);\n\n                    if (res.data.length < 1) {\n                        setDesignState(false);\n                    } else {\n                        setDesignState(null);\n                    }\n                })\n        }\n\n    }\n\n    const onModal: onModalType = async (userID: string) => {\n        await setSid(userID);\n        await dispatch(saveModalState({ userModalState: true }))\n    }\n\n    return (\n        <>\n            {\n                !userModalState ?\n                    <Content>\n                        < PositionBox >\n                            <Position name=\"백엔드\" onClick={CheckPosition} state={position}>백엔드</Position>\n                            <Position name=\"프론트엔드\" onClick={CheckPosition} state={position}>프론트엔드</Position>\n                            <Position name=\"디자인\" onClick={CheckPosition} state={position}>디자인</Position>\n                        </PositionBox >\n                        <List name=\"이름\" position=\"지원분야\" department=\"학과\" id=\"학번\" email=\"이메일\" />\n                        {/* 백엔드 로직 */}\n                        {position === '백엔드' && backendState && <Loading />}\n                        {\n                            position === '백엔드' && backend.length >= 1 && backend.map((item: userType) => {\n                                return (\n                                    <List key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} onClick={() => onModal(item.sid)} />\n                                )\n                            })\n                        }\n                        {position === '백엔드' && backendState === false && <NotData />}\n\n                        {/* 프론트엔드 로직 */}\n                        {position === '프론트엔드' && frontendState && <Loading />}\n                        {\n                            position === '프론트엔드' && frontend.length >= 1 && frontend.map((item: userType) => {\n                                return (\n                                    <List key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} onClick={() => onModal(item.sid)} />\n                                )\n                            })\n                        }\n                        {position === '프론트엔드' && frontendState === false && <NotData />}\n\n                        {/* 디자인 로직 */}\n                        {position === '디자인' && designState && <Loading />}\n                        {\n                            position === '디자인' && design.length >= 1 && design.map((item: userType) => {\n                                return (\n                                    <List key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} onClick={() => onModal(item.sid)} />\n                                )\n                            })\n                        }\n                        {position === '디자인' && designState === false && <NotData />}\n                    </Content >\n                    : <Detail position={position} sid={sid} />\n            }\n        </>\n    )\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\partition\\Pass.tsx",["218","219","220","221","222","223","224","225","226","227"],[],"import React from 'react'\nimport { Content, List, NotData, Section, onModalType } from '../emotion/component'\nimport { Position, PositionBox } from '../emotion/component';\nimport { frontendDummy, backendDummy, designDummy } from './dummy';\nimport { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport axios from 'axios';\nimport { Loading } from '../../emotion/component';\nimport { userType } from './Type';\nimport Header from '../common/Header';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TestState } from '../../../app/store';\nimport { saveModalState } from '../../../features/fetcherSlice';\nimport Detail from '../detail/Detail';\n\nexport default function Pass() {\n\n\n    const [position, setPosition] = useState<string>('백엔드');\n    const [frontend, setFrontend] = useState<[]>([]);\n    const [backend, setBackend] = useState<[]>([]);\n    const [design, setDesign] = useState<[]>([]);\n\n    const [backendState, setBackendState] = useState<boolean | null>(true);\n    const [frontendState, setFrontendState] = useState<boolean | null>(true);\n    const [designState, setDesignState] = useState<boolean | null>(true);\n    const [clickState, setClickState] = useState<boolean>(false);\n    const [sid, setSid] = useState<string>('');\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const userModalState = useSelector((state: TestState) => state.fetcher.userModalState);\n    const adminState = useSelector((state: TestState) => (state.fetcher.adminState));\n\n    useEffect(() => {\n\n        if (adminState === false) {\n            navigate('/error');\n        }\n\n        dispatch(saveModalState(false));\n        axios.get('/backendApplication/getApplications?bool=true')\n            .then((res) => {\n                setBackend(() => {\n                    return res.data\n                });\n\n                if (res.data.length < 1) {\n                    setBackendState(false);\n                } else {\n                    setBackendState(null);\n                }\n            })\n    }, [])\n\n    useEffect(() => {\n        if (position === \"백엔드\") {\n            axios.get('/backendApplication/getApplications?bool=true')\n                .then((res) => {\n                    setBackend(res.data);\n\n                    if (res.data.length < 1) {\n                        setBackendState(false);\n                    } else {\n                        setBackendState(null);\n                    }\n                })\n        }\n\n        if (position === \"프론트엔드\") {\n            axios.get('/frontendApplication/getApplications?bool=true')\n                .then((res) => {\n                    setFrontend(res.data);\n\n                    if (res.data.length < 1) {\n                        setFrontendState(false);\n                    } else {\n                        setFrontendState(null);\n                    }\n                })\n        }\n\n        if (position === \"디자인\") {\n            axios.get('/designApplication/getApplications?bool=true')\n                .then((res) => {\n                    setDesign(res.data);\n\n                    if (res.data.length < 1) {\n                        setDesignState(false);\n                    } else {\n                        setDesignState(null);\n                    }\n                })\n        }\n    }, [userModalState])\n\n    function CheckPosition(event: React.MouseEvent<HTMLButtonElement>): void {\n        const name = (event.target as HTMLButtonElement).name;\n        setPosition(name);\n\n        if (name === \"백엔드\") {\n            axios.get('/backendApplication/getApplications?bool=true')\n                .then((res) => {\n                    setBackend(res.data);\n\n                    if (res.data.length < 1) {\n                        setBackendState(false);\n                    } else {\n                        setBackendState(null);\n                    }\n                })\n        }\n\n        if (name === \"프론트엔드\") {\n            axios.get('/frontendApplication/getApplications?bool=true')\n                .then((res) => {\n                    setFrontend(res.data);\n\n                    if (res.data.length < 1) {\n                        setFrontendState(false);\n                    } else {\n                        setFrontendState(null);\n                    }\n                })\n        }\n\n        if (name === \"디자인\") {\n            axios.get('/designApplication/getApplications?bool=true')\n                .then((res) => {\n                    setDesign(res.data);\n\n                    if (res.data.length < 1) {\n                        setDesignState(false);\n                    } else {\n                        setDesignState(null);\n                    }\n                })\n        }\n\n    }\n\n    const onModal: onModalType = async (userID: string) => {\n        await setSid(userID);\n        await dispatch(saveModalState({ userModalState: true }))\n    }\n\n    return (\n        <>\n            {\n                !userModalState ?\n                    <Content>\n                        < PositionBox >\n                            <Position name=\"백엔드\" onClick={CheckPosition} state={position}>백엔드</Position>\n                            <Position name=\"프론트엔드\" onClick={CheckPosition} state={position}>프론트엔드</Position>\n                            <Position name=\"디자인\" onClick={CheckPosition} state={position}>디자인</Position>\n                        </PositionBox >\n                        <List name=\"이름\" position=\"지원분야\" department=\"학과\" id=\"학번\" email=\"이메일\" />\n                        {/* 백엔드 로직 */}\n                        {position === '백엔드' && backendState && <Loading />}\n                        {\n                            position === '백엔드' && backend.length >= 1 && backend.map((item: userType) => {\n                                return (\n                                    <List key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} onClick={() => onModal(item.sid)} />\n                                )\n                            })\n                        }\n                        {position === '백엔드' && backendState === false && <NotData />}\n\n                        {/* 프론트엔드 로직 */}\n                        {position === '프론트엔드' && frontendState && <Loading />}\n                        {\n                            position === '프론트엔드' && frontend.length >= 1 && frontend.map((item: userType) => {\n                                return (\n                                    <List key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} onClick={() => onModal(item.sid)} />\n                                )\n                            })\n                        }\n                        {position === '프론트엔드' && frontendState === false && <NotData />}\n\n                        {/* 디자인 로직 */}\n                        {position === '디자인' && designState && <Loading />}\n                        {\n                            position === '디자인' && design.length >= 1 && design.map((item: userType) => {\n                                return (\n                                    <List key={item.sid} name={item.name} position={position} department={item.department} id={item.sid} email={item.email} onClick={() => onModal(item.sid)} />\n                                )\n                            })\n                        }\n                        {position === '디자인' && designState === false && <NotData />}\n                    </Content >\n                    : <Detail position={position} sid={sid} />\n            }\n        </>\n    )\n}","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\common\\Header.tsx",["228","229","230","231"],[],"/** @jsxImportSource @emotion/react */\nimport { css, keyframes } from \"@emotion/react\";\nimport React, { useState } from 'react'\nimport { useEffect } from 'react';\nimport { HeaderType } from '../emotion/component';\nimport { Outlet, useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { HeaderText } from '../emotion/component';\n\nexport default function Header() {\n\n    const location = useLocation();\n\n    return (\n        <>\n            <div css={css`\n            width: 100%;\n            height: 7em;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            column-gap: 4em;\n        `}>\n                <Link to=\"/admin/main\">\n                    <HeaderText path={location.pathname} url={\"/admin/main\"}>전체 지원서</HeaderText>\n                </Link>\n                <Link to=\"/admin/pass\">\n                    <HeaderText path={location.pathname} url={\"/admin/pass\"}>합격 지원서</HeaderText>\n                </Link>\n                <Link to=\"/admin/fail\">\n                    <HeaderText path={location.pathname} url={\"/admin/fail\"}>불합 지원서</HeaderText>\n                </Link>\n            </div>\n            <Outlet />\n        </>\n    )\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\detail\\Detail.tsx",["232","233","234","235","236","237","238","239"],[],"import React, { useEffect, useState } from 'react'\nimport { Answer, Article, Quit, Section } from './emotion/component'\nimport { ButtonBox, Button } from './emotion/component'\nimport { useLocation, useNavigate, useParams } from 'react-router-dom'\nimport axios from 'axios';\nimport { Loading } from '../../emotion/component';\nimport { DetailType } from './Type';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TestState } from '../../../app/store';\nimport { onModalType } from '../emotion/component';\nimport { saveModalState } from '../../../features/fetcherSlice';\n\nexport default function Detail(props: DetailType) {\n\n    const [name, setName] = useState<string>('');\n    const [sid, setSid] = useState<string>('');\n    const [department, setDepartment] = useState<string>('');\n    const [track, setTrack] = useState<string>('');\n    const [phone, setPhone] = useState<string>('');\n    const [state, setState] = useState<boolean>(false);\n\n    const [motive, setMotive] = useState('');\n    const [hardwork, setHardwork] = useState('');\n    const [keyword, setKeyword] = useState('');\n    const [mostDeeplyWork, setMostDeeplyWork] = useState('');\n    const [buttonState, setButtonState] = useState<boolean>(false);\n    const [buttonCount, setButtonCount] = useState<number>(0);\n\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    // 프론트엔드\n    const [whyFrontend, setWhyFrontend] = useState('');\n    const [usingStack, setUsingStack] = useState('');\n    const [teamProject, setTeamProject] = useState('');\n    const [achieve, setAchieve] = useState('');\n    const [portfolioLink, setPortfolioLink] = useState('');\n\n    // 백엔드\n    const [difficultAndOvercoming, setDifficultAndOvercoming] = useState('');\n    const [studyFramework, setStudyFramework] = useState('');\n    const [importantGroup, setImportantGroup] = useState('');\n\n    // 디자인\n    const [whyDesign, setWhyDesign] = useState('');\n    const [toolExperience, setToolExperience] = useState('');\n    const [teamworkExperience, setTeamworkExperience] = useState('');\n    const [designGrowth, setDesignGrowth] = useState('');\n\n    const userModalState = useSelector((state: TestState) => state.fetcher.userModalState);\n    const adminState = useSelector((state: TestState) => (state.fetcher.adminState));\n\n\n    useEffect(() => {\n        // console.log(position);\n        // console.log(location);\n        // console.log(userSid);\n\n        if (adminState === false) {\n            navigate('/error');\n        }\n\n        if (props.position === '프론트엔드') {\n            setTrack(\"프론트엔드\")\n            axios.get(`/frontendApplication?sid=${props.sid}`)\n                .then((res) => {\n                    // console.log(res);\n                    setName(res.data.name);\n                    setSid(res.data.sid);\n                    setDepartment(res.data.department);\n                    setPhone(res.data.phoneNumber);\n                    setState(res.data.passOrNot);\n\n                    setMotive(res.data.motive);\n                    setHardwork(res.data.hardWork);\n                    setKeyword(res.data.keyWord);\n                    setMostDeeplyWork(res.data.mostDeeplyWork);\n\n                    setWhyFrontend(res.data.whyFrontend);\n                    setUsingStack(res.data.usingStack);\n                    setTeamProject(res.data.teamProject);\n                    setAchieve(res.data.achieve);\n                    setPortfolioLink(res.data.portfolioLink);\n                })\n        }\n\n        if (props.position === '백엔드') {\n            setTrack(\"백엔드\")\n            axios.get(`/backendApplication?sid=${props.sid}`)\n                .then((res) => {\n                    // console.log(res);\n                    setName(res.data.name);\n                    setSid(res.data.sid);\n                    setDepartment(res.data.department);\n                    setPhone(res.data.phoneNumber);\n                    setState(res.data.passOrNot);\n\n                    setMotive(res.data.motive);\n                    setHardwork(res.data.hardWork);\n                    setKeyword(res.data.keyWord);\n                    setMostDeeplyWork(res.data.mostDeeplyWork);\n\n                    setDifficultAndOvercoming(res.data.difficultAndOvercoming);\n                    setStudyFramework(res.data.studyFramework);\n                    setImportantGroup(res.data.importantGroup);\n                    setPortfolioLink(res.data.portfolioLink);\n                })\n        }\n\n        if (props.position === '디자인') {\n            setTrack(\"디자인\")\n            axios.get(`/designApplication?sid=${props.sid}`)\n                .then((res) => {\n                    // console.log(\"디자인\", res);\n                    setName(res.data.name);\n                    setSid(res.data.sid);\n                    setDepartment(res.data.department);\n                    setPhone(res.data.phoneNumber);\n                    setState(res.data.passOrNot);\n\n                    setMotive(res.data.motive);\n                    setHardwork(res.data.hardWork);\n                    setKeyword(res.data.keyWord);\n                    setMostDeeplyWork(res.data.mostDeeplyWork);\n\n                    setWhyDesign(res.data.whyDesign);\n                    setToolExperience(res.data.toolExperience);\n                    setTeamworkExperience(res.data.teamworkExperience);\n                    setDesignGrowth(res.data.designGrowth);\n                    setPortfolioLink(res.data.portfolioLink);\n                })\n        }\n    })\n\n    const PassLogic = () => {\n        if (props.position === '백엔드') {\n            if (state === false) {\n                if (window.confirm(`${name}님을 정말 합격처리 하시겠어요?`)) {\n                    axios.put(`/backendApplication/changePassOrNot?sid=${props.sid}`)\n                        .then((res) => {\n                            alert(`${name}님의 합격처리가 되었습니다!`)\n                            setState(true);\n                            setButtonCount(0);\n                            setButtonState(false);\n                        })\n                } else {\n                    setButtonCount(0);\n                    setButtonState(false);\n                }\n            } else {\n                alert(\"이미 합격된 사용자입니다!\");\n            }\n        }\n        if (props.position === '프론트엔드') {\n            if (state === false) {\n                if (window.confirm(`${name}님을 정말 합격처리 하시겠어요?`)) {\n                    axios.put(`/frontendApplication/changePassOrNot?sid=${props.sid}`)\n                        .then((res) => {\n                            alert(`${name}님의 합격처리가 되었습니다!`)\n                            setState(true);\n                            setButtonCount(0);\n                            setButtonState(false);\n                        })\n                } else {\n                    setButtonCount(0);\n                    setButtonState(false);\n                }\n            } else {\n                alert(\"이미 합격된 사용자입니다!\");\n            }\n        }\n        if (props.position === '디자인') {\n            if (state === false) {\n                if (window.confirm(`${name}님을 정말 합격처리 하시겠어요?`)) {\n                    axios.put(`/designApplication/changePassOrNot?sid=${props.sid}`)\n                        .then((res) => {\n                            alert(`${name}님의 합격처리가 되었습니다!`)\n                            setState(true);\n                            setButtonCount(0);\n                            setButtonState(false);\n                        })\n                } else {\n                    setButtonCount(0);\n                    setButtonState(false);\n                }\n            } else {\n                alert(\"이미 합격된 사용자입니다!\");\n            }\n        }\n    }\n\n    const changePass = async () => {\n        await setButtonCount((prev) => (prev + 1));\n        await setButtonState(true);\n        await PassLogic();\n    }\n\n    const FailLogic = () => {\n        if (props.position === '백엔드') {\n            if (state === true) {\n                if (window.confirm(`${name}님을 정말 불합격처리 하시겠어요?`)) {\n                    axios.put(`/backendApplication/changePassOrNot?sid=${props.sid}`)\n                        .then((res) => {\n                            alert(`${name}님의 불합격처리가 되었습니다!`)\n                            setState(false);\n                            setButtonCount(0);\n                            setButtonState(false);\n                        })\n                } else {\n                    setButtonCount(0);\n                    setButtonState(false);\n                }\n            } else {\n                alert(\"이미 불합격된 사용자입니다!\");\n            }\n        }\n        if (props.position === '프론트엔드') {\n            if (state === true) {\n                if (window.confirm(`${name}님을 정말 불합격처리 하시겠어요?`)) {\n                    axios.put(`/frontendApplication/changePassOrNot?sid=${props.sid}`)\n                        .then((res) => {\n                            alert(`${name}님의 불합격처리가 되었습니다!`)\n                            setState(false);\n                            setButtonCount(0);\n                            setButtonState(false);\n                        })\n                } else {\n                    setButtonCount(0);\n                    setButtonState(false);\n                }\n            } else {\n                alert(\"이미 불합격된 사용자입니다!\");\n            }\n        }\n        if (props.position === '디자인') {\n            if (state === true) {\n                if (window.confirm(`${name}님을 정말 불합격처리 하시겠어요?`)) {\n                    axios.put(`/designApplication/changePassOrNot?sid=${props.sid}`)\n                        .then((res) => {\n                            alert(`${name}님의 불합격처리가 되었습니다!`)\n                            setState(false);\n                            setButtonCount(0);\n                            setButtonState(false);\n                        })\n                } else {\n                    setButtonCount(0);\n                    setButtonState(false);\n                }\n            } else {\n                alert(\"이미 불합격된 사용자입니다!\");\n            }\n        }\n    }\n\n    const changeFail = async () => {\n        await setButtonCount((prev) => (prev + 1));\n        await setButtonState(true);\n        await FailLogic();\n    }\n\n    const closeModal = async () => {\n        await dispatch(saveModalState({ userModalState: false }))\n    }\n\n    return (\n        <Section>\n            {name ?\n                <Article>\n                    <Quit onClick={closeModal} />\n                    <Answer name=\"이름\">\n                        {name}\n                    </Answer>\n                    <Answer name=\"학번\">\n                        {sid}\n                    </Answer>\n                    <Answer name=\"학과\">\n                        {department}\n                    </Answer>\n                    <Answer name=\"지원 트랙\">\n                        {track}\n                    </Answer>\n                    <Answer name=\"연락처\">\n                        {phone}\n                    </Answer>\n                    <Answer name=\"합불 상태\">\n                        <strong>\n                            {state ? \"합격\" : \"불합격\"}\n                        </strong>\n                    </Answer>\n                    <Answer name=\"지원자분의 인생의 최종 목표는 무엇인가요?\">\n                        {motive}\n                    </Answer>\n                    <Answer name=\"학교 공부를 제외하고 본인의 인생에 있어서 가장 열심히 했던 활동은 무엇인가요?\">\n                        {hardwork}\n                    </Answer>\n                    <Answer name=\"자신을 설명할 수 있는 키워드 3개와 그 이유에 대하여 설명해주세요\">\n                        {keyword}\n                    </Answer>\n                    <Answer name=\"최근에 가장 감명 깊었던 책 · 영화 · 노래가 있다면 하나를 선택해주시고, 그 이유에 대하여 설명해주세요\">\n                        {mostDeeplyWork}\n                    </Answer>\n                    {track === \"프론트엔드\" &&\n                        <>\n                            <Answer name=\"프론트엔드 트랙을 선택하게 된 이유를 구체적으로 서술해주세요\">\n                                {whyFrontend}\n                            </Answer>\n                            <Answer name=\"프론트엔드 개발과 관련된 프레임워크나 html, css, js 등의 언어를 사용해 보신 적 있으신가요? 있으시다면 어디까지 사용해 보셨는지 구체적으로 적어주세요.\">\n                                {usingStack}\n                            </Answer>\n                            <Answer name=\"팀 활동이나 프로젝트를 경험해본 내용과 이를 통해 자신의 성장 경험에 대해서 서술해주세요\">\n                                {teamProject}\n                            </Answer>\n                            <Answer name=\"멋사 프론트엔드 아기사자로 활동하면서 얻어 가고 싶은 것은 무엇인가요?\">\n                                {achieve}\n                            </Answer>\n                            <Answer name=\"포트폴리오 링크가 있다면 첨부해주세요\">\n                                {portfolioLink === '' ? \"포트폴리오 미첨부\" :\n                                    <a href={portfolioLink} target=\"_blank\">\n                                        {portfolioLink}\n                                    </a>\n                                }\n                            </Answer>\n                        </>\n                    }\n                    {track === \"백엔드\" &&\n                        <>\n                            <Answer name=\"개발 관련 공부를 하며 개인적으로 힘들었던 경험과 그걸 극복했던 자신만의 방법이 있나요?\">\n                                {difficultAndOvercoming}\n                            </Answer>\n                            <Answer name=\"웹 백앤드 프레임워크를 공부해보신적 있으신가요? 있으시다면 어디까지 공부해보셨나요?\">\n                                {studyFramework}\n                            </Answer>\n                            <Answer name=\"단체생활에서 가장 중요하다고 생각하는 것은 무엇인가요?\">\n                                {importantGroup}\n                            </Answer>\n                            <Answer name=\"포트폴리오 링크가 있다면 첨부해주세요\">\n                                {portfolioLink === '' ? \"포트폴리오 미첨부\" :\n                                    <a href={portfolioLink} target=\"_blank\">\n                                        {portfolioLink}\n                                    </a>\n                                }\n                            </Answer>\n                        </>\n                    }\n                    {track === \"디자인\" &&\n                        <>\n                            <Answer name=\"디자인 트랙을 선택하게 된 이유를 구체적으로 서술해주세요\">\n                                {whyDesign}\n                            </Answer>\n                            <Answer name=\"피그마나 Adobe XD와 같은 목업 툴에 관련된 경험을 해본 적이 있다면 그 경험에 대해 자세히 설명을 해주세요\">\n                                {toolExperience}\n                            </Answer>\n                            <Answer name=\"본인이 협업과 팀워크를 진행해 보았던 경험과, 그 경험을 멋쟁이 사자처럼 대학에서 어떻게 적용시킬 수 있는지 알려주세요\">\n                                {teamworkExperience}\n                            </Answer>\n                            <Answer name=\"디자인 트랙을 통해 어떠한 성장을 희망하시는지 구체적으로 서술해주세요\">\n                                {designGrowth}\n                            </Answer>\n                            <Answer name=\"포트폴리오 링크가 있다면 첨부해주세요\">\n                                {portfolioLink === '' ? \"포트폴리오 미첨부\" :\n                                    <a href={portfolioLink} target=\"_blank\">\n                                        {portfolioLink}\n                                    </a>\n                                }\n                            </Answer>\n                        </>\n                    }\n                    <ButtonBox>\n                        <Button name=\"임시저장\" onClick={closeModal}>{buttonCount >= 1 ? `잠시만 기다려주세요...` : `뒤로가기`}</Button>\n                        <Button name=\"제출하기\" disabled={buttonState} onClick={changePass}>{buttonCount >= 1 ? `잠시만 기다려주세요...` : `합격처리`}</Button>\n                        <Button name=\"제출하기\" disabled={buttonState} onClick={changeFail}>{buttonCount >= 1 ? `잠시만 기다려주세요...` : `불합격처리`}</Button>\n                    </ButtonBox>\n                </Article>\n                : <Loading />\n            }\n        </Section >\n    )\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\404\\Error.tsx",["240","241","242","243"],[],"/** @jsxImportSource @emotion/react */\nimport { css, keyframes } from \"@emotion/react\";\nimport React from 'react'\nimport { Button, Modal, Section } from '../emotion/component'\nimport oops from '../../images/oops.png';\nimport { Link } from \"react-router-dom\";\nimport { fadeUp } from \"../../styles/Keyframes\";\n\nexport default function Error() {\n    return (\n        <div css={css`\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        `}>\n            <img alt=\"404\" src={oops} css={css`\n                width: 9em;\n                animation: ${fadeUp} 1s ease-in-out;\n            `} />\n            <span css={css`\n                font-family: 'Pretendard-Bold';\n                letter-spacing: -0.03em;\n                color: white;\n                margin-top: 1em;\n                animation: ${fadeUp} 1s ease-in-out;\n            `}>웁스웁스, 잘못된 접근을 하셨어요</span>\n            <Link to='/'>\n                <button css={css`\n                font-family: 'Pretendard-Bold';\n                letter-spacing: -0.03em;\n                font-size: 14px;\n                width: 16em;\n                height: 3.5em;\n                border: none;\n                border-radius: 7px;\n                color: white;\n                background-color: #ff7828;\n                cursor: pointer;\n                transition: 0.5s all;\n                margin-top: 2em;\n                animation: ${fadeUp} 1s ease-in-out;\n\n                &:hover {\n                    opacity: 80%;\n                }\n            `}> 메인화면으로 </button>\n            </Link>\n        </div>\n    )\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\class.ts",[],[],"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\emotion\\component.tsx",["244","245","246","247","248","249"],[],"/** @jsxImportSource @emotion/react */\nimport React, { useEffect, useState } from 'react'\nimport { WrapperProps } from '../../../App'\nimport { css, keyframes } from \"@emotion/react\";\nimport { AgreeType, ButtonType, InputType } from '../../emotion/component';\nimport { PositionType } from '../../emotion/component';\nimport { Link, useLocation } from 'react-router-dom';\nimport oops from '../../../images/oops.png';\nimport { fadeUp } from '../../../styles/Keyframes';\n\nexport const Section = ({ children }: WrapperProps) => {\n    return (\n        <div\n            css={css`\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n            `}>\n            {children}\n        </div>\n    )\n}\n\nexport const LoginBox = ({ children }: WrapperProps) => {\n    return (\n        <div css={css`\n            display: flex;\n            flex-direction: column;\n            row-gap: 1em;\n            align-items: center;\n        `}>\n            {children}\n        </div>\n    )\n}\n\nexport const Content = ({ children }: WrapperProps) => {\n    return (\n        <section css={css`\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        `}>\n            {children}\n        </section>\n    )\n}\n\nexport const Button = (props: ButtonType) => {\n    return (\n        <button css={css`\n            font-size: 15px;\n            width: 26em;\n            height: 3.5em;\n            border-radius: 7px;\n            font-size: 15px;\n            border: none;\n            font-family: 'Pretendard-Bold';\n            letter-spacing: -0.03em;\n            padding-left: 1em;\n            color: white;\n            transition: 0.5s all;\n            cursor: pointer;\n\n            background-color: #ff7828;\n\n            &:hover {\n                opacity: 80%;\n            }\n        `}{...props}>{props.children}</button>\n    )\n}\n\nexport interface HeaderType {\n    path?: string;\n    children?: React.ReactNode;\n    url?: string;\n}\n\nexport const HeaderText = (props: HeaderType) => {\n    return (\n        <div css={css`\n            font-family: 'Pretendard-Bold';\n            letter-spacing: -0.03em;\n            width: 9em;\n            border:none;\n            padding-bottom: 0.7em;\n            border-width: 0.17em;\n            font-size: 17px;\n            text-decoration: none;\n            color: white;\n            cursor: pointer;\n\n            &:hover {\n                border:solid;\n                border-top: 0;\n                border-left: 0;\n                border-right: 0;\n                border: color;\n                border-bottom: 0.12em solid white;\n                margin-bottom: -0.12em;\n            }\n\n            ${props.path === props.url && css`\n                border:solid;\n                border-top: 0;\n                border-left: 0;\n                border-right: 0;\n                border: color;\n                color: #ff7828;\n                border-bottom: 0.12em solid #ff7828;\n                margin-bottom: -0.12em;\n\n                &:hover {\n                    border:solid;\n                    border-top: 0;\n                    border-left: 0;\n                    border-right: 0;\n                    border: color;\n                    border-bottom: 0.12em solid #ff7828;\n                    margin-bottom: -0.12em;\n                }\n            `}\n        `}>{props.children}</div>\n    )\n}\n\ninterface ImgType {\n    src?: string;\n}\n\nexport const Img = (props: ImgType) => {\n    return (\n        <img css={css`\n            width: 9em;\n        `} alt=\"어드민 이미지\" src={props.src} />\n    )\n}\n\nexport const Position = (props: PositionType) => {\n    return (\n        <button css={css`\n            font-family: 'Pretendard-Medium';\n            letter-spacing: -0.03em;\n            height: 3.7em;\n            ${props.alt === \"모달\" && css`height: 3em;`} \n            ${props.alt === \"모달\" && css`font-size: 14px;`} \n            border-radius: 50px;\n            border: solid;\n            border-width: 1px;\n            border-color: #707070;\n            transition: 0.5s all;\n            cursor: pointer;\n\n            ${props.name === props.state ? css`\n            color: white;\n            background-color: #ff7828;\n            border: none;\n            ` : css`\n            background-color: transparent;\n            color: white;\n            border-color: white;\n\n            &:hover {\n                border-color: #ff7828;\n                color:  #ff7828;\n            }\n            &:focus {\n                outline: none;\n                border-color: #ff7828;\n                color:  #ff7828;\n            }\n            `}\n        `}{...props} tabIndex={-1}>{props.children}</button>\n    )\n}\n\nexport const NotData = () => {\n    return (\n        <>\n            <img src={oops} alt=\"Oops!\" css={css`\n                margin-top: 3em;\n                width: 7em;\n                animation: ${fadeUp} 1s ease-in-out;\n            `} />\n            <span css={css`\n        font-family: 'Pretendard-Bold';\n        letter-spacing: -0.03em;\n        color: white;\n        font-size: 14px;\n        margin-top: 1em;\n        animation: ${fadeUp} 1s ease-in-out;\n        `}>\n                데이터가 존재하지 않아요!\n            </span>\n        </>\n    )\n}\n\nexport const PositionBox = (props: WrapperProps) => {\n    return (\n        <div css={css`\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            column-gap: 2em;\n            font-size: 12px;\n            width: 55.5em;\n            margin-top: 4em;\n            margin-bottom: 8em;\n            ${props.alt === \"모달\" && css`width: 30em;`} \n        `}>\n            {props.children}\n        </div>\n    )\n}\n\nexport const Input = (props: InputType) => {\n    return (\n        <input placeholder={props.placeholder} css={css`\n            width: 25em;\n            height: 3.5em;\n            border-radius: 7px;\n            font-size: 15px;\n            border: none;\n            font-family: 'Pretendard-Regular';\n            letter-spacing: -0.03em;\n            padding-left: 1em;\n\n            &::-webkit-outer-spin-button,\n            &::-webkit-inner-spin-button {\n                -webkit-appearance: none;\n                margin: 0;\n            }\n    \n            &:focus {\n                outline-style: solid;\n                outline-width: 2.5px;\n                outline-color: #ff7828;\n            }\n    \n            &::placeholder {\n                font-family: 'Pretendard-Regular';\n                margin-left: 0.4em;\n            }\n        `} {...props} />\n    )\n}\n\nexport interface ListType {\n    name?: string;\n    id?: string;\n    department?: string;\n    email?: string;\n    position?: string;\n    onClick?: (event: React.MouseEvent<HTMLDivElement>) => void;\n    children?: React.ReactNode;\n}\n\nexport interface onModalType {\n    (userID: string): void;\n}\n\nexport const List = (props: ListType) => {\n    return (\n        <div css={css`\n            font-family: 'Pretendard-Bold';\n            font-size: 14px;\n            letter-spacing: -0.03em;\n            color: white;\n\n            display: flex;\n            justify-content: center;\n            border: solid;\n            border-top: 0;\n            border-left: 0;\n            border-right: 0;\n            margin-bottom: 1em;\n            padding-bottom: 1em;\n            box-sizing: border-box;\n\n            ${props.name !== \"이름\" && css`\n                &:hover {\n                    color: #ff7828;\n                    border-color: white;\n                    cursor: pointer;\n                }\n            `}\n        `} onClick={props.onClick}>\n            <ListText onClick={props.onClick}>{props.name}</ListText>\n            <ListText onClick={props.onClick}>{props.position}</ListText>\n            <ListText onClick={props.onClick}>{props.department}</ListText>\n            <ListText onClick={props.onClick}>{props.id}</ListText>\n            <ListText onClick={props.onClick}>{props.email}</ListText>\n        </div>\n    )\n}\n\nexport const ListText = (props: ListType) => {\n    return (\n        <div css={css`\n            width: 18em;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        `} {...props}>\n            {props.children}\n        </div>\n    )\n}\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\admin\\detail\\emotion\\component.tsx",["250","251","252","253","254","255","256"],[],"/** @jsxImportSource @emotion/react */\nimport React, { useEffect, useState } from 'react'\nimport { css, keyframes } from \"@emotion/react\";\nimport { Link, useLocation } from 'react-router-dom';\nimport oops from '../../../images/oops.png';\nimport { WrapperProps } from '../../../../App';\nimport { InputType } from '../../../emotion/component';\nimport { ButtonType } from '../../../emotion/component';\nimport quit from '../../../../images/quit.png';\nimport { ImgClickType } from '../Type';\n\n\nexport const Section = ({ children }: WrapperProps) => {\n    return (\n        <div\n            css={css`\n                position: absolute;\n                left: 50%;\n                transform: translate(-50%);\n\n                display: flex;\n                flex-direction: column;\n                align-items: center;          \n                width: 60em;\n                height: 100%;\n                background-color: white;\n                border-radius: 15px;\n                margin-top: 4em;\n            `}>\n            {children}\n        </div>\n    )\n}\n\nexport const Quit = (props: ImgClickType) => {\n    return (\n        <img alt=\"뒤로가기\" onClick={props.onClick} src={quit} css={css`\n            width: 2em;\n            cursor: pointer;\n            transition: 0.4s all;\n            margin-bottom: 1em;\n\n            &:hover {\n                opacity: 60%;\n            }\n        `} />\n    )\n}\n\nexport const Article = ({ children }: WrapperProps) => {\n    return (\n        <article css={css`\n            padding-top: 3em;\n            padding-bottom: 5em;\n            background-color: white;\n            width: 100%;\n            border: solid;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            row-gap: 2em;\n            border-radius: 15px;\n        `}>\n            {children}\n        </article>\n    )\n}\n\nexport interface AnswerType {\n    name?: string;\n    children?: React.ReactNode;\n}\n\nexport const Answer = (props: AnswerType) => {\n    return (\n        <div css={css`\n            display: flex;\n            flex-direction: column;\n            text-align: left;\n            row-gap: 0.5em;\n        `}>\n            <span css={css`\n                    font-family: 'Pretendard-Bold';\n                    letter-spacing: -0.03em;\n                    font-size: 14px;\n                    color: #ff7828;\n            `}> {props.name}</span>\n            <div css={css`\n        font-family: 'Pretendard-Medium';\n        letter-spacing: -0.03em;\n        padding: 0;\n        padding-left: 1em;\n        width: 60em;\n        padding: 1em;\n        border: solid;\n        border-color: #ff7828;\n        font-size: 15px;\n        border-radius: 8px;\n        line-height: 1.5em;\n        border-width: 1px;\n        font-size: 14px;\n        box-sizing: border-box;\n        white-space: pre-wrap;\n\n        display: flex;\n        align-items: center;\n        justify-content: left;\n\n        `}>\n                {props.children}\n            </div>\n        </div>\n    )\n}\n\nexport const ButtonBox = (props: WrapperProps) => {\n    return (\n        <div css={css`\n            display: flex;\n            column-gap: 1em;\n            margin-top: 1em;\n            ${props.alt === \"임시저장_모달\" && css`margin-top: 2em;`}\n        `}>\n            {props.children}\n        </div>\n    )\n}\n\n\nexport const Button = (props: ButtonType) => {\n    return (\n        <button css={css`\n            font-family: 'Pretendard-Bold';\n            letter-spacing: -0.03em;\n            font-size: 14px;\n            width: 15em;\n            height: 3.5em;\n            transition: 0.5s all;\n            ${props.alt === \"불러오기\" && css`\n                width: 7.5em;\n                font-size: 14px;\n            `}\n            border: none;\n            border-radius: 7px;\n            color: white;\n            transition: 0.5s all;\n            ${props.name === \"임시저장\" && `background-color : #262626;`}\n            ${props.name === \"제출하기\" && `background-color : #ff7828;`}\n            ${props.disabled ?\n                css`\n                    cursor: auto;\n                    filter: grayscale(100%);\n                ` :\n                css`\n                    cursor: pointer;\n                    &:hover {\n                        opacity: 80%;\n                    }\n                    `\n            }\n        `} tabIndex={-1} {...props}>\n            {props.children}\n        </button>\n    )\n}",{"ruleId":"257","severity":1,"message":"258","line":1,"column":17,"nodeType":"259","messageId":"260","endLine":1,"endColumn":26},{"ruleId":"257","severity":1,"message":"261","line":1,"column":28,"nodeType":"259","messageId":"260","endLine":1,"endColumn":36},{"ruleId":"257","severity":1,"message":"262","line":2,"column":8,"nodeType":"259","messageId":"260","endLine":2,"endColumn":12},{"ruleId":"257","severity":1,"message":"263","line":4,"column":40,"nodeType":"259","messageId":"260","endLine":4,"endColumn":51},{"ruleId":"257","severity":1,"message":"264","line":19,"column":10,"nodeType":"259","messageId":"260","endLine":19,"endColumn":21},{"ruleId":"257","severity":1,"message":"265","line":20,"column":10,"nodeType":"259","messageId":"260","endLine":20,"endColumn":19},{"ruleId":"257","severity":1,"message":"266","line":2,"column":17,"nodeType":"259","messageId":"260","endLine":2,"endColumn":28},{"ruleId":"257","severity":1,"message":"267","line":7,"column":15,"nodeType":"259","messageId":"260","endLine":7,"endColumn":24},{"ruleId":"257","severity":1,"message":"268","line":8,"column":10,"nodeType":"259","messageId":"260","endLine":8,"endColumn":18},{"ruleId":"257","severity":1,"message":"269","line":8,"column":20,"nodeType":"259","messageId":"260","endLine":8,"endColumn":26},{"ruleId":"257","severity":1,"message":"270","line":13,"column":10,"nodeType":"259","messageId":"260","endLine":13,"endColumn":14},{"ruleId":"271","severity":1,"message":"272","line":62,"column":35,"nodeType":"273","messageId":"274","endLine":62,"endColumn":36,"suggestions":"275"},{"ruleId":"271","severity":1,"message":"276","line":62,"column":39,"nodeType":"273","messageId":"274","endLine":62,"endColumn":40,"suggestions":"277"},{"ruleId":"271","severity":1,"message":"278","line":62,"column":47,"nodeType":"273","messageId":"274","endLine":62,"endColumn":48,"suggestions":"279"},{"ruleId":"271","severity":1,"message":"272","line":62,"column":60,"nodeType":"273","messageId":"274","endLine":62,"endColumn":61,"suggestions":"280"},{"ruleId":"271","severity":1,"message":"276","line":62,"column":64,"nodeType":"273","messageId":"274","endLine":62,"endColumn":65,"suggestions":"281"},{"ruleId":"271","severity":1,"message":"278","line":62,"column":72,"nodeType":"273","messageId":"274","endLine":62,"endColumn":73,"suggestions":"282"},{"ruleId":"271","severity":1,"message":"278","line":62,"column":81,"nodeType":"273","messageId":"274","endLine":62,"endColumn":82,"suggestions":"283"},{"ruleId":"271","severity":1,"message":"278","line":62,"column":85,"nodeType":"273","messageId":"274","endLine":62,"endColumn":86,"suggestions":"284"},{"ruleId":"271","severity":1,"message":"276","line":62,"column":101,"nodeType":"273","messageId":"274","endLine":62,"endColumn":102,"suggestions":"285"},{"ruleId":"271","severity":1,"message":"278","line":62,"column":109,"nodeType":"273","messageId":"274","endLine":62,"endColumn":110,"suggestions":"286"},{"ruleId":"271","severity":1,"message":"276","line":62,"column":126,"nodeType":"273","messageId":"274","endLine":62,"endColumn":127,"suggestions":"287"},{"ruleId":"271","severity":1,"message":"278","line":62,"column":134,"nodeType":"273","messageId":"274","endLine":62,"endColumn":135,"suggestions":"288"},{"ruleId":"289","severity":1,"message":"290","line":89,"column":8,"nodeType":"291","endLine":89,"endColumn":10,"suggestions":"292"},{"ruleId":"289","severity":1,"message":"293","line":112,"column":8,"nodeType":"291","endLine":112,"endColumn":214,"suggestions":"294"},{"ruleId":"271","severity":1,"message":"272","line":450,"column":72,"nodeType":"273","messageId":"274","endLine":450,"endColumn":73,"suggestions":"295"},{"ruleId":"271","severity":1,"message":"278","line":450,"column":101,"nodeType":"273","messageId":"274","endLine":450,"endColumn":102,"suggestions":"296"},{"ruleId":"271","severity":1,"message":"272","line":502,"column":77,"nodeType":"273","messageId":"274","endLine":502,"endColumn":78,"suggestions":"297"},{"ruleId":"271","severity":1,"message":"278","line":502,"column":106,"nodeType":"273","messageId":"274","endLine":502,"endColumn":107,"suggestions":"298"},{"ruleId":"299","severity":1,"message":"300","line":624,"column":47,"nodeType":"301","messageId":"302","endLine":624,"endColumn":49},{"ruleId":"257","severity":1,"message":"303","line":2,"column":81,"nodeType":"259","messageId":"260","endLine":2,"endColumn":89},{"ruleId":"257","severity":1,"message":"270","line":7,"column":33,"nodeType":"259","messageId":"260","endLine":7,"endColumn":37},{"ruleId":"289","severity":1,"message":"304","line":74,"column":8,"nodeType":"291","endLine":74,"endColumn":10,"suggestions":"305"},{"ruleId":"257","severity":1,"message":"306","line":1,"column":10,"nodeType":"259","messageId":"260","endLine":1,"endColumn":26},{"ruleId":"257","severity":1,"message":"307","line":1,"column":41,"nodeType":"259","messageId":"260","endLine":1,"endColumn":52},{"ruleId":"257","severity":1,"message":"270","line":7,"column":33,"nodeType":"259","messageId":"260","endLine":7,"endColumn":37},{"ruleId":"289","severity":1,"message":"308","line":75,"column":8,"nodeType":"291","endLine":75,"endColumn":10,"suggestions":"309"},{"ruleId":"289","severity":1,"message":"310","line":93,"column":8,"nodeType":"291","endLine":93,"endColumn":82,"suggestions":"311"},{"ruleId":"257","severity":1,"message":"270","line":7,"column":33,"nodeType":"259","messageId":"260","endLine":7,"endColumn":37},{"ruleId":"289","severity":1,"message":"312","line":72,"column":8,"nodeType":"291","endLine":72,"endColumn":10,"suggestions":"313"},{"ruleId":"289","severity":1,"message":"310","line":91,"column":8,"nodeType":"291","endLine":91,"endColumn":68,"suggestions":"314"},{"ruleId":"257","severity":1,"message":"315","line":137,"column":11,"nodeType":"259","messageId":"260","endLine":137,"endColumn":21},{"ruleId":"257","severity":1,"message":"270","line":7,"column":33,"nodeType":"259","messageId":"260","endLine":7,"endColumn":37},{"ruleId":"289","severity":1,"message":"316","line":68,"column":8,"nodeType":"291","endLine":68,"endColumn":10,"suggestions":"317"},{"ruleId":"289","severity":1,"message":"310","line":88,"column":8,"nodeType":"291","endLine":88,"endColumn":77,"suggestions":"318"},{"ruleId":"257","severity":1,"message":"267","line":2,"column":15,"nodeType":"259","messageId":"260","endLine":2,"endColumn":24},{"ruleId":"257","severity":1,"message":"261","line":3,"column":30,"nodeType":"259","messageId":"260","endLine":3,"endColumn":38},{"ruleId":"257","severity":1,"message":"319","line":6,"column":8,"nodeType":"259","messageId":"260","endLine":6,"endColumn":13},{"ruleId":"257","severity":1,"message":"320","line":7,"column":8,"nodeType":"259","messageId":"260","endLine":7,"endColumn":16},{"ruleId":"257","severity":1,"message":"321","line":8,"column":8,"nodeType":"259","messageId":"260","endLine":8,"endColumn":18},{"ruleId":"257","severity":1,"message":"322","line":9,"column":10,"nodeType":"259","messageId":"260","endLine":9,"endColumn":17},{"ruleId":"257","severity":1,"message":"323","line":1,"column":8,"nodeType":"259","messageId":"260","endLine":1,"endColumn":13},{"ruleId":"257","severity":1,"message":"324","line":2,"column":10,"nodeType":"259","messageId":"260","endLine":2,"endColumn":13},{"ruleId":"257","severity":1,"message":"325","line":2,"column":34,"nodeType":"259","messageId":"260","endLine":2,"endColumn":41},{"ruleId":"257","severity":1,"message":"326","line":3,"column":8,"nodeType":"259","messageId":"260","endLine":3,"endColumn":14},{"ruleId":"257","severity":1,"message":"327","line":5,"column":10,"nodeType":"259","messageId":"260","endLine":5,"endColumn":23},{"ruleId":"257","severity":1,"message":"328","line":5,"column":25,"nodeType":"259","messageId":"260","endLine":5,"endColumn":37},{"ruleId":"257","severity":1,"message":"329","line":5,"column":39,"nodeType":"259","messageId":"260","endLine":5,"endColumn":50},{"ruleId":"257","severity":1,"message":"263","line":7,"column":10,"nodeType":"259","messageId":"260","endLine":7,"endColumn":21},{"ruleId":"257","severity":1,"message":"330","line":28,"column":12,"nodeType":"259","messageId":"260","endLine":28,"endColumn":22},{"ruleId":"257","severity":1,"message":"331","line":28,"column":24,"nodeType":"259","messageId":"260","endLine":28,"endColumn":37},{"ruleId":"289","severity":1,"message":"332","line":55,"column":8,"nodeType":"291","endLine":55,"endColumn":10,"suggestions":"333"},{"ruleId":"289","severity":1,"message":"334","line":96,"column":8,"nodeType":"291","endLine":96,"endColumn":24,"suggestions":"335"},{"ruleId":"257","severity":1,"message":"336","line":5,"column":10,"nodeType":"259","messageId":"260","endLine":5,"endColumn":17},{"ruleId":"257","severity":1,"message":"337","line":17,"column":11,"nodeType":"259","messageId":"260","endLine":17,"endColumn":21},{"ruleId":"257","severity":1,"message":"322","line":1,"column":17,"nodeType":"259","messageId":"260","endLine":1,"endColumn":24},{"ruleId":"257","severity":1,"message":"338","line":2,"column":25,"nodeType":"259","messageId":"260","endLine":2,"endColumn":33},{"ruleId":"257","severity":1,"message":"325","line":2,"column":44,"nodeType":"259","messageId":"260","endLine":2,"endColumn":51},{"ruleId":"257","severity":1,"message":"327","line":4,"column":10,"nodeType":"259","messageId":"260","endLine":4,"endColumn":23},{"ruleId":"257","severity":1,"message":"328","line":4,"column":25,"nodeType":"259","messageId":"260","endLine":4,"endColumn":37},{"ruleId":"257","severity":1,"message":"329","line":4,"column":39,"nodeType":"259","messageId":"260","endLine":4,"endColumn":50},{"ruleId":"257","severity":1,"message":"339","line":6,"column":10,"nodeType":"259","messageId":"260","endLine":6,"endColumn":14},{"ruleId":"257","severity":1,"message":"263","line":6,"column":16,"nodeType":"259","messageId":"260","endLine":6,"endColumn":27},{"ruleId":"257","severity":1,"message":"340","line":10,"column":19,"nodeType":"259","messageId":"260","endLine":10,"endColumn":24},{"ruleId":"257","severity":1,"message":"326","line":11,"column":8,"nodeType":"259","messageId":"260","endLine":11,"endColumn":14},{"ruleId":"257","severity":1,"message":"330","line":27,"column":12,"nodeType":"259","messageId":"260","endLine":27,"endColumn":22},{"ruleId":"257","severity":1,"message":"331","line":27,"column":24,"nodeType":"259","messageId":"260","endLine":27,"endColumn":37},{"ruleId":"289","severity":1,"message":"332","line":54,"column":8,"nodeType":"291","endLine":54,"endColumn":10,"suggestions":"341"},{"ruleId":"257","severity":1,"message":"325","line":2,"column":34,"nodeType":"259","messageId":"260","endLine":2,"endColumn":41},{"ruleId":"257","severity":1,"message":"327","line":4,"column":10,"nodeType":"259","messageId":"260","endLine":4,"endColumn":23},{"ruleId":"257","severity":1,"message":"328","line":4,"column":25,"nodeType":"259","messageId":"260","endLine":4,"endColumn":37},{"ruleId":"257","severity":1,"message":"329","line":4,"column":39,"nodeType":"259","messageId":"260","endLine":4,"endColumn":50},{"ruleId":"257","severity":1,"message":"263","line":6,"column":10,"nodeType":"259","messageId":"260","endLine":6,"endColumn":21},{"ruleId":"257","severity":1,"message":"326","line":11,"column":8,"nodeType":"259","messageId":"260","endLine":11,"endColumn":14},{"ruleId":"257","severity":1,"message":"330","line":28,"column":12,"nodeType":"259","messageId":"260","endLine":28,"endColumn":22},{"ruleId":"257","severity":1,"message":"331","line":28,"column":24,"nodeType":"259","messageId":"260","endLine":28,"endColumn":37},{"ruleId":"289","severity":1,"message":"332","line":55,"column":8,"nodeType":"291","endLine":55,"endColumn":10,"suggestions":"342"},{"ruleId":"289","severity":1,"message":"334","line":96,"column":8,"nodeType":"291","endLine":96,"endColumn":24,"suggestions":"343"},{"ruleId":"257","severity":1,"message":"267","line":2,"column":15,"nodeType":"259","messageId":"260","endLine":2,"endColumn":24},{"ruleId":"257","severity":1,"message":"261","line":3,"column":17,"nodeType":"259","messageId":"260","endLine":3,"endColumn":25},{"ruleId":"257","severity":1,"message":"258","line":4,"column":10,"nodeType":"259","messageId":"260","endLine":4,"endColumn":19},{"ruleId":"257","severity":1,"message":"344","line":5,"column":10,"nodeType":"259","messageId":"260","endLine":5,"endColumn":20},{"ruleId":"257","severity":1,"message":"263","line":4,"column":10,"nodeType":"259","messageId":"260","endLine":4,"endColumn":21},{"ruleId":"257","severity":1,"message":"345","line":4,"column":36,"nodeType":"259","messageId":"260","endLine":4,"endColumn":45},{"ruleId":"257","severity":1,"message":"346","line":10,"column":10,"nodeType":"259","messageId":"260","endLine":10,"endColumn":21},{"ruleId":"257","severity":1,"message":"347","line":50,"column":11,"nodeType":"259","messageId":"260","endLine":50,"endColumn":25},{"ruleId":"289","severity":1,"message":"348","line":54,"column":5,"nodeType":"259","endLine":54,"endColumn":14,"suggestions":"349"},{"ruleId":"350","severity":1,"message":"351","line":318,"column":37,"nodeType":"352","messageId":"353","endLine":318,"endColumn":77,"fix":"354"},{"ruleId":"350","severity":1,"message":"351","line":338,"column":37,"nodeType":"352","messageId":"353","endLine":338,"endColumn":77,"fix":"355"},{"ruleId":"350","severity":1,"message":"351","line":361,"column":37,"nodeType":"352","messageId":"353","endLine":361,"endColumn":77,"fix":"356"},{"ruleId":"257","severity":1,"message":"267","line":2,"column":15,"nodeType":"259","messageId":"260","endLine":2,"endColumn":24},{"ruleId":"257","severity":1,"message":"357","line":4,"column":10,"nodeType":"259","messageId":"260","endLine":4,"endColumn":16},{"ruleId":"257","severity":1,"message":"340","line":4,"column":18,"nodeType":"259","messageId":"260","endLine":4,"endColumn":23},{"ruleId":"257","severity":1,"message":"325","line":4,"column":25,"nodeType":"259","messageId":"260","endLine":4,"endColumn":32},{"ruleId":"257","severity":1,"message":"258","line":2,"column":17,"nodeType":"259","messageId":"260","endLine":2,"endColumn":26},{"ruleId":"257","severity":1,"message":"261","line":2,"column":28,"nodeType":"259","messageId":"260","endLine":2,"endColumn":36},{"ruleId":"257","severity":1,"message":"267","line":4,"column":15,"nodeType":"259","messageId":"260","endLine":4,"endColumn":24},{"ruleId":"257","severity":1,"message":"358","line":5,"column":10,"nodeType":"259","messageId":"260","endLine":5,"endColumn":19},{"ruleId":"257","severity":1,"message":"339","line":7,"column":10,"nodeType":"259","messageId":"260","endLine":7,"endColumn":14},{"ruleId":"257","severity":1,"message":"263","line":7,"column":16,"nodeType":"259","messageId":"260","endLine":7,"endColumn":27},{"ruleId":"257","severity":1,"message":"258","line":2,"column":17,"nodeType":"259","messageId":"260","endLine":2,"endColumn":26},{"ruleId":"257","severity":1,"message":"261","line":2,"column":28,"nodeType":"259","messageId":"260","endLine":2,"endColumn":36},{"ruleId":"257","severity":1,"message":"267","line":3,"column":15,"nodeType":"259","messageId":"260","endLine":3,"endColumn":24},{"ruleId":"257","severity":1,"message":"339","line":4,"column":10,"nodeType":"259","messageId":"260","endLine":4,"endColumn":14},{"ruleId":"257","severity":1,"message":"263","line":4,"column":16,"nodeType":"259","messageId":"260","endLine":4,"endColumn":27},{"ruleId":"257","severity":1,"message":"359","line":5,"column":8,"nodeType":"259","messageId":"260","endLine":5,"endColumn":12},{"ruleId":"257","severity":1,"message":"360","line":7,"column":10,"nodeType":"259","messageId":"260","endLine":7,"endColumn":19},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'logo' is defined but never used.","'useLocation' is defined but never used.","'useSelector' is defined but never used.","'TestState' is defined but never used.","'ChangeEvent' is defined but never used.","'keyframes' is defined but never used.","'fadeLeft' is defined but never used.","'fadeUp' is defined but never used.","'view' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["361","362"],"Unnecessary escape character: \\..",["363","364"],"Unnecessary escape character: \\\".",["365","366"],["367","368"],["369","370"],["371","372"],["373","374"],["375","376"],["377","378"],["379","380"],["381","382"],["383","384"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentTime', 'endTime', 'userDepartment', 'userEmail', 'userID', 'userName', 'userPhone', and 'userPosition'. Either include them or remove the dependency array.","ArrayExpression",["385"],"React Hook useMemo has unnecessary dependencies: 'department', 'email', 'id', 'name', and 'phone'. Either exclude them or remove the dependency array.",["386"],["387","388"],["389","390"],["391","392"],["393","394"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'InputBox' is defined but never used.","React Hook useEffect has missing dependencies: 'navigate', 'userEmail', 'userHardWork', 'userID', 'userKeyWord', 'userMostDeeplyWork', 'userMotiv', 'userName', 'userPhone', and 'userPosition'. Either include them or remove the dependency array.",["395"],"'createAsyncThunk' is defined but never used.","'isFulfilled' is defined but never used.","React Hook useEffect has missing dependencies: 'navigate', 'userDesignGrowth', 'userEmail', 'userID', 'userName', 'userPhone', 'userPortfolioLink', 'userPosition', 'userTeamworkExperience', 'userToolExperience', and 'userWhyDesign'. Either include them or remove the dependency array.",["396"],"React Hook useMemo has missing dependencies: 'userHardWork', 'userKeyWord', 'userMostDeeplyWork', and 'userMotiv'. Either include them or remove the dependency array.",["397"],"React Hook useEffect has missing dependencies: 'navigate', 'userAchieve', 'userEmail', 'userID', 'userName', 'userPhone', 'userPortfolioLink', 'userPosition', 'userTeamProject', 'userUsingStack', and 'userWhyFrontend'. Either include them or remove the dependency array.",["398"],["399"],"'OpenSubmit' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'navigate', 'userDifficultAndOvercoming', 'userEmail', 'userID', 'userImportantGroup', 'userName', 'userPhone', 'userPortfolioLink', 'userPosition', and 'userStudyFramework'. Either include them or remove the dependency array.",["400"],["401"],"'axios' is defined but never used.","'checkBox' is defined but never used.","'checkedBox' is defined but never used.","'useMemo' is defined but never used.","'React' is defined but never used.","'css' is defined but never used.","'Section' is defined but never used.","'Header' is defined but never used.","'frontendDummy' is defined but never used.","'backendDummy' is defined but never used.","'designDummy' is defined but never used.","'clickState' is assigned a value but never used.","'setClickState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'adminState', 'dispatch', and 'navigate'. Either include them or remove the dependency array.",["402"],"React Hook useEffect has a missing dependency: 'position'. Either include it or remove the dependency array.",["403"],"'Loading' is defined but never used.","'adminState' is assigned a value but never used.","'ListType' is defined but never used.","'Link' is defined but never used.","'Modal' is defined but never used.",["404"],["405"],["406"],"'HeaderType' is defined but never used.","'useParams' is defined but never used.","'onModalType' is defined but never used.","'userModalState' is assigned a value but never used.","React Hook useEffect contains a call to 'setTrack'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [adminState, props.position, props.sid, navigate] as a second argument to the useEffect Hook.",["407"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"408","text":"409"},{"range":"410","text":"409"},{"range":"411","text":"409"},"'Button' is defined but never used.","'AgreeType' is defined but never used.","'oops' is defined but never used.","'InputType' is defined but never used.",{"messageId":"412","fix":"413","desc":"414"},{"messageId":"415","fix":"416","desc":"417"},{"messageId":"412","fix":"418","desc":"414"},{"messageId":"415","fix":"419","desc":"417"},{"messageId":"412","fix":"420","desc":"414"},{"messageId":"415","fix":"421","desc":"417"},{"messageId":"412","fix":"422","desc":"414"},{"messageId":"415","fix":"423","desc":"417"},{"messageId":"412","fix":"424","desc":"414"},{"messageId":"415","fix":"425","desc":"417"},{"messageId":"412","fix":"426","desc":"414"},{"messageId":"415","fix":"427","desc":"417"},{"messageId":"412","fix":"428","desc":"414"},{"messageId":"415","fix":"429","desc":"417"},{"messageId":"412","fix":"430","desc":"414"},{"messageId":"415","fix":"431","desc":"417"},{"messageId":"412","fix":"432","desc":"414"},{"messageId":"415","fix":"433","desc":"417"},{"messageId":"412","fix":"434","desc":"414"},{"messageId":"415","fix":"435","desc":"417"},{"messageId":"412","fix":"436","desc":"414"},{"messageId":"415","fix":"437","desc":"417"},{"messageId":"412","fix":"438","desc":"414"},{"messageId":"415","fix":"439","desc":"417"},{"desc":"440","fix":"441"},{"desc":"442","fix":"443"},{"messageId":"412","fix":"444","desc":"414"},{"messageId":"415","fix":"445","desc":"417"},{"messageId":"412","fix":"446","desc":"414"},{"messageId":"415","fix":"447","desc":"417"},{"messageId":"412","fix":"448","desc":"414"},{"messageId":"415","fix":"449","desc":"417"},{"messageId":"412","fix":"450","desc":"414"},{"messageId":"415","fix":"451","desc":"417"},{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},{"desc":"464","fix":"465"},{"desc":"466","fix":"467"},{"desc":"468","fix":"469"},{"desc":"466","fix":"470"},{"desc":"466","fix":"471"},{"desc":"468","fix":"472"},{"desc":"473","fix":"474"},[12640,12640]," rel=\"noreferrer\"",[13667,13667],[14888,14888],"removeEscape",{"range":"475","text":"476"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"477","text":"478"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"479","text":"476"},{"range":"480","text":"478"},{"range":"481","text":"476"},{"range":"482","text":"478"},{"range":"483","text":"476"},{"range":"484","text":"478"},{"range":"485","text":"476"},{"range":"486","text":"478"},{"range":"487","text":"476"},{"range":"488","text":"478"},{"range":"489","text":"476"},{"range":"490","text":"478"},{"range":"491","text":"476"},{"range":"492","text":"478"},{"range":"493","text":"476"},{"range":"494","text":"478"},{"range":"495","text":"476"},{"range":"496","text":"478"},{"range":"497","text":"476"},{"range":"498","text":"478"},{"range":"499","text":"476"},{"range":"500","text":"478"},"Update the dependencies array to be: [currentTime, endTime, userDepartment, userEmail, userID, userName, userPhone, userPosition]",{"range":"501","text":"502"},"Update the dependencies array to be: [position, precautions, privacy, submitCount, tempCount, tempId, tempEmail, tempPosition, userNameCheck, userEmailCheck, userPhoneCheck, userDepartmentCheck, userIDCheck]",{"range":"503","text":"504"},{"range":"505","text":"476"},{"range":"506","text":"478"},{"range":"507","text":"476"},{"range":"508","text":"478"},{"range":"509","text":"476"},{"range":"510","text":"478"},{"range":"511","text":"476"},{"range":"512","text":"478"},"Update the dependencies array to be: [navigate, userEmail, userHardWork, userID, userKeyWord, userMostDeeplyWork, userMotiv, userName, userPhone, userPosition]",{"range":"513","text":"514"},"Update the dependencies array to be: [navigate, userDesignGrowth, userEmail, userID, userName, userPhone, userPortfolioLink, userPosition, userTeamworkExperience, userToolExperience, userWhyDesign]",{"range":"515","text":"516"},"Update the dependencies array to be: [userMotiv, userHardWork, userKeyWord, userMostDeeplyWork, whyDesign, toolExperience, teamworkExperience, designGrowth, submitCount]",{"range":"517","text":"518"},"Update the dependencies array to be: [navigate, userAchieve, userEmail, userID, userName, userPhone, userPortfolioLink, userPosition, userTeamProject, userUsingStack, userWhyFrontend]",{"range":"519","text":"520"},"Update the dependencies array to be: [userMotiv, userHardWork, userKeyWord, userMostDeeplyWork, whyFrontend, usingStack, teamProject, achieve, submitCount]",{"range":"521","text":"522"},"Update the dependencies array to be: [navigate, userDifficultAndOvercoming, userEmail, userID, userImportantGroup, userName, userPhone, userPortfolioLink, userPosition, userStudyFramework]",{"range":"523","text":"524"},"Update the dependencies array to be: [userMotiv, userHardWork, userKeyWord, userMostDeeplyWork, difficultAndOvercoming, studyFramework, importantGroup, submitCount]",{"range":"525","text":"526"},"Update the dependencies array to be: [adminState, dispatch, navigate]",{"range":"527","text":"528"},"Update the dependencies array to be: [position, userModalState]",{"range":"529","text":"530"},{"range":"531","text":"528"},{"range":"532","text":"528"},{"range":"533","text":"530"},"Add dependencies array: [adminState, props.position, props.sid, navigate]",{"range":"534","text":"535"},[3509,3510],"",[3509,3509],"\\",[3513,3514],[3513,3513],[3521,3522],[3521,3521],[3534,3535],[3534,3534],[3538,3539],[3538,3538],[3546,3547],[3546,3546],[3555,3556],[3555,3555],[3559,3560],[3559,3559],[3575,3576],[3575,3575],[3583,3584],[3583,3583],[3600,3601],[3600,3600],[3608,3609],[3608,3608],[4453,4455],"[currentTime, endTime, userDepartment, userEmail, userID, userName, userPhone, userPosition]",[5037,5243],"[position, precautions, privacy, submitCount, tempCount, tempId, tempEmail, tempPosition, userNameCheck, userEmailCheck, userPhoneCheck, userDepartmentCheck, userIDCheck]",[22847,22848],[22847,22847],[22876,22877],[22876,22876],[24724,24725],[24724,24724],[24753,24754],[24753,24753],[4057,4059],"[navigate, userEmail, userHardWork, userID, userKeyWord, userMostDeeplyWork, userMotiv, userName, userPhone, userPosition]",[3427,3429],"[navigate, userDesignGrowth, userEmail, userID, userName, userPhone, userPortfolioLink, userPosition, userTeamworkExperience, userToolExperience, userWhyDesign]",[3946,4020],"[userMotiv, userHardWork, userKeyWord, userMostDeeplyWork, whyDesign, toolExperience, teamworkExperience, designGrowth, submitCount]",[3325,3327],"[navigate, userAchieve, userEmail, userID, userName, userPhone, userPortfolioLink, userPosition, userTeamProject, userUsingStack, userWhyFrontend]",[3833,3893],"[userMotiv, userHardWork, userKeyWord, userMostDeeplyWork, whyFrontend, usingStack, teamProject, achieve, submitCount]",[3311,3313],"[navigate, userDifficultAndOvercoming, userEmail, userID, userImportantGroup, userName, userPhone, userPortfolioLink, userPosition, userStudyFramework]",[3862,3931],"[userMotiv, userHardWork, userKeyWord, userMostDeeplyWork, difficultAndOvercoming, studyFramework, importantGroup, submitCount]",[2105,2107],"[adminState, dispatch, navigate]",[3355,3371],"[position, userModalState]",[2132,2134],[2104,2106],[3351,3367],[5471,5471],", [adminState, props.position, props.sid, navigate]"]