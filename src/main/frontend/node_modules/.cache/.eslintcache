[{"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\index.tsx":"1","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\reportWebVitals.ts":"2","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\App.tsx":"3","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\styles\\GlobalFont.tsx":"4","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\Index.tsx":"5"},{"size":554,"mtime":1673862027123,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1673862027234,"results":"8","hashOfConfig":"7"},{"size":558,"mtime":1673862027014,"results":"9","hashOfConfig":"7"},{"size":1050,"mtime":1673862027474,"results":"10","hashOfConfig":"7"},{"size":11637,"mtime":1673862027308,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kskrrf",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\index.tsx",[],[],"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\reportWebVitals.ts",[],[],"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\App.tsx",["29"],[],"import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport Index from './component/Index'\nimport GlobalStyles from './styles/GlobalFont';\n\nexport interface WrapperProps {\n  children: React.ReactNode;\n  name?: string;\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <GlobalStyles />\n        <Routes>\n          <Route path='/' element={<Index />} />\n        </Routes>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\styles\\GlobalFont.tsx",[],[],"C:\\창규\\Likelion\\projects\\apply-page-backend\\src\\main\\frontend\\src\\component\\Index.tsx",["30","31","32","33","34","35","36","37"],[],"/** @jsxImportSource @emotion/react */\nimport React, { useState } from 'react'\nimport { WrapperProps } from '../App'\nimport { css } from '@emotion/react'\nimport banner from '../images/banner.png'\nimport loading from '../images/loading.gif';\nimport axios from 'axios';\n\nconst Section = ({ children }: WrapperProps) => {\n    return (\n        <section css={css`\n            position: absolute;\n            left: 50%;\n            transform: translate(-50%);\n            max-width: 75em;\n            width: 100%;\n            background-color: white;\n\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding-bottom: 5em;\n            row-gap: 1.1em;\n        `}>\n            {children}\n        </section>\n    )\n}\n\nconst InputTitle = ({ children }: WrapperProps) => {\n    return (\n        <p css={css`\n            font-family: 'Pretendard-Bold';\n            letter-spacing: -0.03em;\n            font-size: 16px;\n\n            display: flex;\n            align-items: center;\n        `}>\n            {children}\n        </p>\n    )\n}\n\nconst Article = ({ children }: WrapperProps) => {\n    return (\n        <article css={css`\n            display: flex;\n            flex-direction: column;\n            text-align: left;\n            justify-content: center;\n        `}>\n            {children}\n        </article>\n    )\n}\n\nconst Button = (props: WrapperProps) => {\n    return (\n        <button css={css`\n            font-family: 'Pretendard-Bold';\n            letter-spacing: -0.03em;\n            font-size: 16px;\n            width: 15em;\n            height: 3.5em;\n            border: none;\n            border-radius: 7px;\n            color: white;\n            cursor: pointer;\n            transition: 0.5s all;\n            ${props.name === \"임시저장\" && `background-color : #262626;`}\n            ${props.name === \"제출하기\" && `background-color : #ff7828;`}\n\n            &:hover {\n                opacity: 80%;\n            }\n        `}{...props}>\n            {props.children}\n        </button>\n    )\n}\n\nconst ButtonBox = () => {\n    return (\n        <div css={css`\n            display: flex;\n            column-gap: 1em;\n            margin-top: 3em;\n        `}>\n            <Button name=\"임시저장\">임시저장</Button>\n            <Button name=\"제출하기\">제출하기</Button>\n        </div>\n    )\n}\n\ninterface InputType {\n    type?: string;\n    placeholder?: string;\n    value?: string;\n    disabled?: boolean;\n    maxlength?: string;\n}\n\nconst TextAreaBox = (props: InputType) => {\n    return (\n        <textarea css={css`\n        font-family: 'Pretendard-Medium';\n        letter-spacing: -0.03em;\n        line-height: 1.5em;\n        padding: 0;\n        padding-left: 1em;\n        padding-bottom: 1em;\n        padding-right: 1em;\n        padding-top: 1em;\n        width: 62.5em;\n        height: 15em;\n        border: solid;\n        border-radius: 15px;\n        border-color: #707070;\n        border-width: 1px;\n        font-size: 16px;\n        box-sizing: border-box;\n        resize: none;\n        \n        &:focus {\n            outline-color: #ff7828;\n        }\n\n        &::placeholder {\n            font-family: 'Pretendard-Light';\n        }\n        `} maxlength=\"1000\" {...props} />\n    )\n}\n\nconst UploadButton = () => {\n    return (\n        <div css={css`\n            position: absolute;\n            font-family: 'Pretendard-Bold';\n            letter-spacing: -0.03em;\n            font-size: 15px;\n            border: none;\n            border-radius: 7px;\n            width: 5.8em;\n            height: 2em;       \n            background-color: #ff7828;     \n            margin-left: 59em;\n\n            display: flex;\n            align-items: center;\n            justify-content: center;\n\n            cursor: pointer;\n            transition: 0.5s all;\n\n            &:hover {\n                opacity: 80%;\n            }\n        `}>\n            <span css={css`\n                color: white;\n            `}>업로드</span>\n        </div>\n    )\n}\n\nconst InputBox = (props: InputType) => {\n    return (\n        <input css={css`\n        font-family: 'Pretendard-Medium';\n        letter-spacing: -0.03em;\n        padding: 0;\n        padding-left: 1em;\n        width: 62.5em;\n        height: 3.7em;\n        border: solid;\n        border-radius: 15px;\n        border-color: #707070;\n        border-width: 1px;\n        font-size: 16px;\n        box-sizing: border-box;\n\n        &::-webkit-outer-spin-button,\n        &::-webkit-inner-spin-button {\n            -webkit-appearance: none;\n            margin: 0;\n        }\n\n        &:focus {\n            outline-color: #ff7828;\n        }\n\n        &::placeholder {\n            font-family: 'Pretendard-Light';\n        }\n        `}{...props} />\n    )\n}\n\ninterface PositionType {\n    name: string;\n    onClick: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    children: React.ReactNode;\n    state: string;\n}\n\nconst Position = (props: PositionType) => {\n    return (\n        <button css={css`\n            font-family: 'Pretendard-Medium';\n            letter-spacing: -0.03em;\n            font-size: 16px;\n            height: 3.7em;\n            border-radius: 50px;\n            border: solid;\n            border-width: 1px;\n            border-color: #707070;\n            transition: 0.5s all;\n            cursor: pointer;\n\n            ${props.name === props.state ? css`\n            color: white;\n            background-color: #ff7828;\n            border: none;\n            ` : css`\n            background-color: white;\n            color: #707070;\n\n            &:hover {\n                border-color: #ff7828;\n                color:  #ff7828;\n            }\n            `}\n        `}{...props}>{props.children}</button>\n    )\n}\n\nconst PositionBox = ({ children }: WrapperProps) => {\n    return (\n        <div css={css`\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    column-gap: 1em;\n    font-size: 16px;\n    width: 62.5em;\n`}>\n            {children}\n        </div>\n    )\n}\n\n// 로딩중을 표시하는 컴포넌트\nconst Loading = () => {\n    return (\n        <img alt=\"로딩 이미지\" src={loading} css={css`\n            width: 12em;\n        `} />\n    )\n}\n\nconst Require = () => {\n    return (\n        <div css={css`\n            margin-left: 0.4em;\n        `}>\n            <span css={css`\n                font-family: 'Pretendard-Medium';\n                letter-spacing: -0.03em;\n                font-size: 15px;\n                color: #ff0000;\n            `}>* </span>\n        </div>\n    )\n}\n\nconst Banner = () => {\n    return (\n        <img alt=\"배너 이미지\" src={banner} css={css`\n            margin-top: 40px;\n            max-width: 1000px;\n        `} />\n    )\n}\n\nexport default function Index() {\n\n    const [frontend, setFrontEnd] = useState<boolean>(false);\n    const [backend, setBackEnd] = useState<boolean>(false);\n    const [design, setDesign] = useState<boolean>(false);\n    const [position, setPosition] = useState<string>('');\n\n    function CheckPosition(event: React.MouseEvent<HTMLButtonElement>): void {\n        const name = (event.target as HTMLButtonElement).name;\n        setPosition(name);\n    }\n\n    return (\n        <Section>\n            <Banner />\n            {/* <Article>\n                <InputTitle>멋쟁이사자처럼 강남대학교 구성원 모집의 기본이 되는 정보이므로 정확하게 입력해 주시기 바랍니다.</InputTitle>\n                <InputTitle>서류접수 제출 이전에는 자유롭게 지원서 수정 및 접수 취소가 가능합니다.</InputTitle>\n                <InputTitle>서류접수 마감 이후에는 지원서 수정 및 접수 취소가 불가능합니다.</InputTitle>\n                <InputTitle>서류접수 마감 직전에는 지원서 접수가 원활하지 않을 수 있으므로 여유롭게 제출 부탁 드립니다.</InputTitle>\n            </Article> */}\n            <Article>\n                <InputTitle>이름 <Require /> </InputTitle>\n                <InputBox type=\"text\" placeholder=\"이름을 입력해주세요\" />\n            </Article>\n            <Article>\n                <InputTitle>학번 <Require /> </InputTitle>\n                <InputBox type=\"number\" placeholder=\"학번을 입력해주세요\" />\n            </Article>\n            <Article>\n                <InputTitle>이메일 <Require /> </InputTitle>\n                <InputBox type=\"text\" placeholder=\"이메일을 입력해주세요\" />\n            </Article>\n            <Article>\n                <InputTitle>연락처 <Require /> </InputTitle>\n                <InputBox type=\"number\" placeholder=\"연락 가능한 번호를 입력해주세요\" />\n            </Article>\n            <Article>\n                <InputTitle>지원 포지션 <Require /> </InputTitle>\n                <PositionBox>\n                    <Position name=\"백엔드\" onClick={CheckPosition} state={position}>백엔드</Position>\n                    <Position name=\"프론트엔드\" onClick={CheckPosition} state={position}>프론트엔드</Position>\n                    <Position name=\"디자인\" onClick={CheckPosition} state={position}>디자인</Position>\n                </PositionBox>\n            </Article>\n            {/* <Article>\n                <label htmlFor=\"select1\">Label Text</label>\n                <select id=\"select1\">\n                    <option>백앤드</option>\n                    <option>프론트엔드</option>\n                    <option>디자인</option>\n                </select>\n            </Article> */}\n            <Article>\n                <InputTitle>멋쟁이사자처럼에 지원을 하게 된 동기를 알려주세요 (최대 1000자)<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" />\n            </Article>\n            <Article>\n                <InputTitle>본인의 장단점은 무엇이고 이 장단점이 어떻게 활동될 수 있는지 서술해주세요 (최대 1000자)<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" />\n            </Article>\n            <Article>\n                <InputTitle>가장 열정적으로 했었던 일과 이를 통해서 이룬 것에 대해 느낀점 중심으로 서술해주세요 (최대 1000자)<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" />\n            </Article>\n            <Article>\n                <InputTitle>갈등이 발생했던 구체적인 상황과 이를 극복하기 위해 노력했던 사례를 느낀 점 중심으로 서술해주세요 (최대 1000자)<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" />\n            </Article>\n            <Article>\n                <InputTitle>자신이 멋쟁이사자처럼에 들어와 실현시키고 싶은 IT 서비스에 대해서 설명을 해주세요 (최대 1000자)<Require /> </InputTitle>\n                <TextAreaBox placeholder=\"텍스트를 입력해주세요\" />\n            </Article>\n            <Article>\n                <InputTitle>포트폴리오 링크 첨부</InputTitle>\n                <InputBox type=\"text\" placeholder=\"포트폴리오 링크를 첨부해주세요\" />\n            </Article>\n            <Article>\n                <InputTitle>포트폴리오 파일 첨부</InputTitle>\n                <Article>\n                    <InputBox type=\"text\" placeholder=\"파일형식 : JPG, PNG, PDF, PPT, PPTX, HWP, HWPX\" value=\"\" disabled={true} />\n                    <UploadButton />\n                </Article>\n            </Article>\n            <ButtonBox />\n        </Section>\n    )\n}\n",{"ruleId":"38","severity":1,"message":"39","line":2,"column":8,"nodeType":"40","messageId":"41","endLine":2,"endColumn":12},{"ruleId":"38","severity":1,"message":"42","line":7,"column":8,"nodeType":"40","messageId":"41","endLine":7,"endColumn":13},{"ruleId":"38","severity":1,"message":"43","line":254,"column":7,"nodeType":"40","messageId":"41","endLine":254,"endColumn":14},{"ruleId":"38","severity":1,"message":"44","line":288,"column":12,"nodeType":"40","messageId":"41","endLine":288,"endColumn":20},{"ruleId":"38","severity":1,"message":"45","line":288,"column":22,"nodeType":"40","messageId":"41","endLine":288,"endColumn":33},{"ruleId":"38","severity":1,"message":"46","line":289,"column":12,"nodeType":"40","messageId":"41","endLine":289,"endColumn":19},{"ruleId":"38","severity":1,"message":"47","line":289,"column":21,"nodeType":"40","messageId":"41","endLine":289,"endColumn":31},{"ruleId":"38","severity":1,"message":"48","line":290,"column":12,"nodeType":"40","messageId":"41","endLine":290,"endColumn":18},{"ruleId":"38","severity":1,"message":"49","line":290,"column":20,"nodeType":"40","messageId":"41","endLine":290,"endColumn":29},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'Loading' is assigned a value but never used.","'frontend' is assigned a value but never used.","'setFrontEnd' is assigned a value but never used.","'backend' is assigned a value but never used.","'setBackEnd' is assigned a value but never used.","'design' is assigned a value but never used.","'setDesign' is assigned a value but never used."]